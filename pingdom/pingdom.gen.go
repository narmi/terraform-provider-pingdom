// Package pingdom provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package pingdom

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CheckStatus.
const (
	CheckStatusDown            CheckStatus = "down"
	CheckStatusPaused          CheckStatus = "paused"
	CheckStatusUnconfirmedDown CheckStatus = "unconfirmed_down"
	CheckStatusUnknown         CheckStatus = "unknown"
	CheckStatusUp              CheckStatus = "up"
)

// Defines values for CheckGeneralType.
const (
	CheckGeneralTypeRecording CheckGeneralType = "recording"
	CheckGeneralTypeScript    CheckGeneralType = "script"
)

// Defines values for CheckWithoutIDGETType.
const (
	CheckWithoutIDGETTypeRecording CheckWithoutIDGETType = "recording"
	CheckWithoutIDGETTypeScript    CheckWithoutIDGETType = "script"
)

// Defines values for ContactTargetsOwner.
const (
	ContactTargetsOwnerFalse ContactTargetsOwner = false
	ContactTargetsOwnerTrue  ContactTargetsOwner = true
)

// Defines values for ContactTargetsPaused.
const (
	ContactTargetsPausedFalse ContactTargetsPaused = false
	ContactTargetsPausedTrue  ContactTargetsPaused = true
)

// Defines values for ContactTargetsType.
const (
	ContactTargetsTypeContact ContactTargetsType = "contact"
	ContactTargetsTypeUser    ContactTargetsType = "user"
)

// Defines values for CreateCheckResolution.
const (
	CreateCheckResolutionN1  CreateCheckResolution = 1
	CreateCheckResolutionN15 CreateCheckResolution = 15
	CreateCheckResolutionN30 CreateCheckResolution = 30
	CreateCheckResolutionN5  CreateCheckResolution = 5
	CreateCheckResolutionN60 CreateCheckResolution = 60
)

// Defines values for CreateCheckType.
const (
	CreateCheckTypeDns        CreateCheckType = "dns"
	CreateCheckTypeHttp       CreateCheckType = "http"
	CreateCheckTypeHttpcustom CreateCheckType = "httpcustom"
	CreateCheckTypeImap       CreateCheckType = "imap"
	CreateCheckTypePing       CreateCheckType = "ping"
	CreateCheckTypePop3       CreateCheckType = "pop3"
	CreateCheckTypeSmtp       CreateCheckType = "smtp"
	CreateCheckTypeTcp        CreateCheckType = "tcp"
	CreateCheckTypeUdp        CreateCheckType = "udp"
)

// Defines values for CreateContactPaused.
const (
	CreateContactPausedFalse CreateContactPaused = false
	CreateContactPausedTrue  CreateContactPaused = true
)

// Defines values for DNSType.
const (
	DNSTypeDns DNSType = "dns"
)

// Defines values for DetailedCheckDnsCheckStatus.
const (
	DetailedCheckDnsCheckStatusDown            DetailedCheckDnsCheckStatus = "down"
	DetailedCheckDnsCheckStatusPaused          DetailedCheckDnsCheckStatus = "paused"
	DetailedCheckDnsCheckStatusUnconfirmedDown DetailedCheckDnsCheckStatus = "unconfirmed_down"
	DetailedCheckDnsCheckStatusUnknown         DetailedCheckDnsCheckStatus = "unknown"
	DetailedCheckDnsCheckStatusUp              DetailedCheckDnsCheckStatus = "up"
)

// Defines values for DetailedCheckHttpCheckStatus.
const (
	DetailedCheckHttpCheckStatusDown            DetailedCheckHttpCheckStatus = "down"
	DetailedCheckHttpCheckStatusPaused          DetailedCheckHttpCheckStatus = "paused"
	DetailedCheckHttpCheckStatusUnconfirmedDown DetailedCheckHttpCheckStatus = "unconfirmed_down"
	DetailedCheckHttpCheckStatusUnknown         DetailedCheckHttpCheckStatus = "unknown"
	DetailedCheckHttpCheckStatusUp              DetailedCheckHttpCheckStatus = "up"
)

// Defines values for DetailedCheckHttpCustomCheckStatus.
const (
	DetailedCheckHttpCustomCheckStatusDown            DetailedCheckHttpCustomCheckStatus = "down"
	DetailedCheckHttpCustomCheckStatusPaused          DetailedCheckHttpCustomCheckStatus = "paused"
	DetailedCheckHttpCustomCheckStatusUnconfirmedDown DetailedCheckHttpCustomCheckStatus = "unconfirmed_down"
	DetailedCheckHttpCustomCheckStatusUnknown         DetailedCheckHttpCustomCheckStatus = "unknown"
	DetailedCheckHttpCustomCheckStatusUp              DetailedCheckHttpCustomCheckStatus = "up"
)

// Defines values for DetailedCheckImapCheckStatus.
const (
	DetailedCheckImapCheckStatusDown            DetailedCheckImapCheckStatus = "down"
	DetailedCheckImapCheckStatusPaused          DetailedCheckImapCheckStatus = "paused"
	DetailedCheckImapCheckStatusUnconfirmedDown DetailedCheckImapCheckStatus = "unconfirmed_down"
	DetailedCheckImapCheckStatusUnknown         DetailedCheckImapCheckStatus = "unknown"
	DetailedCheckImapCheckStatusUp              DetailedCheckImapCheckStatus = "up"
)

// Defines values for DetailedCheckPop3CheckStatus.
const (
	DetailedCheckPop3CheckStatusDown            DetailedCheckPop3CheckStatus = "down"
	DetailedCheckPop3CheckStatusPaused          DetailedCheckPop3CheckStatus = "paused"
	DetailedCheckPop3CheckStatusUnconfirmedDown DetailedCheckPop3CheckStatus = "unconfirmed_down"
	DetailedCheckPop3CheckStatusUnknown         DetailedCheckPop3CheckStatus = "unknown"
	DetailedCheckPop3CheckStatusUp              DetailedCheckPop3CheckStatus = "up"
)

// Defines values for DetailedCheckSmtpCheckStatus.
const (
	DetailedCheckSmtpCheckStatusDown            DetailedCheckSmtpCheckStatus = "down"
	DetailedCheckSmtpCheckStatusPaused          DetailedCheckSmtpCheckStatus = "paused"
	DetailedCheckSmtpCheckStatusUnconfirmedDown DetailedCheckSmtpCheckStatus = "unconfirmed_down"
	DetailedCheckSmtpCheckStatusUnknown         DetailedCheckSmtpCheckStatus = "unknown"
	DetailedCheckSmtpCheckStatusUp              DetailedCheckSmtpCheckStatus = "up"
)

// Defines values for DetailedCheckTcpCheckStatus.
const (
	DetailedCheckTcpCheckStatusDown            DetailedCheckTcpCheckStatus = "down"
	DetailedCheckTcpCheckStatusPaused          DetailedCheckTcpCheckStatus = "paused"
	DetailedCheckTcpCheckStatusUnconfirmedDown DetailedCheckTcpCheckStatus = "unconfirmed_down"
	DetailedCheckTcpCheckStatusUnknown         DetailedCheckTcpCheckStatus = "unknown"
	DetailedCheckTcpCheckStatusUp              DetailedCheckTcpCheckStatus = "up"
)

// Defines values for DetailedCheckUdpCheckStatus.
const (
	DetailedCheckUdpCheckStatusDown            DetailedCheckUdpCheckStatus = "down"
	DetailedCheckUdpCheckStatusPaused          DetailedCheckUdpCheckStatus = "paused"
	DetailedCheckUdpCheckStatusUnconfirmedDown DetailedCheckUdpCheckStatus = "unconfirmed_down"
	DetailedCheckUdpCheckStatusUnknown         DetailedCheckUdpCheckStatus = "unknown"
	DetailedCheckUdpCheckStatusUp              DetailedCheckUdpCheckStatus = "up"
)

// Defines values for HTTPType.
const (
	Http HTTPType = "http"
)

// Defines values for HTTPCustomType.
const (
	Httpcustom HTTPCustomType = "httpcustom"
)

// Defines values for IMAPType.
const (
	Imap IMAPType = "imap"
)

// Defines values for MembersType.
const (
	MembersTypeContact MembersType = "contact"
	MembersTypeUser    MembersType = "user"
)

// Defines values for ModifyCheckSettingsResolution.
const (
	ModifyCheckSettingsResolutionN1  ModifyCheckSettingsResolution = 1
	ModifyCheckSettingsResolutionN15 ModifyCheckSettingsResolution = 15
	ModifyCheckSettingsResolutionN30 ModifyCheckSettingsResolution = 30
	ModifyCheckSettingsResolutionN5  ModifyCheckSettingsResolution = 5
	ModifyCheckSettingsResolutionN60 ModifyCheckSettingsResolution = 60
)

// Defines values for POP3Type.
const (
	Pop3 POP3Type = "pop3"
)

// Defines values for ReportPerformanceReportResolution.
const (
	ReportPerformanceReportResolutionDay  ReportPerformanceReportResolution = "day"
	ReportPerformanceReportResolutionHour ReportPerformanceReportResolution = "hour"
	ReportPerformanceReportResolutionWeek ReportPerformanceReportResolution = "week"
)

// Defines values for SMTPType.
const (
	Smtp SMTPType = "smtp"
)

// Defines values for StateStatus.
const (
	StateStatusDown    StateStatus = "down"
	StateStatusUnknown StateStatus = "unknown"
	StateStatusUp      StateStatus = "up"
)

// Defines values for TCPType.
const (
	Tcp TCPType = "tcp"
)

// Defines values for UDPType.
const (
	Udp UDPType = "udp"
)

// Defines values for UpdateContactPaused.
const (
	UpdateContactPausedFalse UpdateContactPaused = false
	UpdateContactPausedTrue  UpdateContactPaused = true
)

// Defines values for ActionsAlertsEntryActionsAlertsStatus.
const (
	Delivered    ActionsAlertsEntryActionsAlertsStatus = "delivered"
	Error        ActionsAlertsEntryActionsAlertsStatus = "error"
	Nocredits    ActionsAlertsEntryActionsAlertsStatus = "nocredits"
	Notdelivered ActionsAlertsEntryActionsAlertsStatus = "notdelivered"
	Sent         ActionsAlertsEntryActionsAlertsStatus = "sent"
)

// Defines values for ActionsAlertsEntryActionsAlertsVia.
const (
	Agcm    ActionsAlertsEntryActionsAlertsVia = "agcm"
	Apns    ActionsAlertsEntryActionsAlertsVia = "apns"
	Email   ActionsAlertsEntryActionsAlertsVia = "email"
	Sms     ActionsAlertsEntryActionsAlertsVia = "sms"
	Twitter ActionsAlertsEntryActionsAlertsVia = "twitter"
)

// Defines values for MaintenanceIdPutRecurrencetype.
const (
	MaintenanceIdPutRecurrencetypeDay   MaintenanceIdPutRecurrencetype = "day"
	MaintenanceIdPutRecurrencetypeMonth MaintenanceIdPutRecurrencetype = "month"
	MaintenanceIdPutRecurrencetypeNone  MaintenanceIdPutRecurrencetype = "none"
	MaintenanceIdPutRecurrencetypeWeek  MaintenanceIdPutRecurrencetype = "week"
)

// Defines values for MaintenanceOrder.
const (
	MaintenanceOrderAsc  MaintenanceOrder = "asc"
	MaintenanceOrderDesc MaintenanceOrder = "desc"
)

// Defines values for MaintenanceOrderby.
const (
	Description MaintenanceOrderby = "description"
	Effectiveto MaintenanceOrderby = "effectiveto"
	From        MaintenanceOrderby = "from"
	To          MaintenanceOrderby = "to"
)

// Defines values for MaintenancePostRecurrencetype.
const (
	MaintenancePostRecurrencetypeDay   MaintenancePostRecurrencetype = "day"
	MaintenancePostRecurrencetypeMonth MaintenancePostRecurrencetype = "month"
	MaintenancePostRecurrencetypeNone  MaintenancePostRecurrencetype = "none"
	MaintenancePostRecurrencetypeWeek  MaintenancePostRecurrencetype = "week"
)

// Defines values for MaintenanceRespAttrsMaintenanceRecurrencetype.
const (
	MaintenanceRespAttrsMaintenanceRecurrencetypeDay   MaintenanceRespAttrsMaintenanceRecurrencetype = "day"
	MaintenanceRespAttrsMaintenanceRecurrencetypeMonth MaintenanceRespAttrsMaintenanceRecurrencetype = "month"
	MaintenanceRespAttrsMaintenanceRecurrencetypeNone  MaintenanceRespAttrsMaintenanceRecurrencetype = "none"
	MaintenanceRespAttrsMaintenanceRecurrencetypeWeek  MaintenanceRespAttrsMaintenanceRecurrencetype = "week"
)

// Defines values for ResultsRespAttrsResultsStatus.
const (
	ResultsRespAttrsResultsStatusDown        ResultsRespAttrsResultsStatus = "down"
	ResultsRespAttrsResultsStatusUnconfirmed ResultsRespAttrsResultsStatus = "unconfirmed"
	ResultsRespAttrsResultsStatusUnknown     ResultsRespAttrsResultsStatus = "unknown"
	ResultsRespAttrsResultsStatusUp          ResultsRespAttrsResultsStatus = "up"
)

// Defines values for SummaryOutageOrder.
const (
	SummaryOutageOrderAsc  SummaryOutageOrder = "asc"
	SummaryOutageOrderDesc SummaryOutageOrder = "desc"
)

// Defines values for SummaryOutageRespAttrsSummaryStatesStatus.
const (
	SummaryOutageRespAttrsSummaryStatesStatusDown    SummaryOutageRespAttrsSummaryStatesStatus = "down"
	SummaryOutageRespAttrsSummaryStatesStatusUnknown SummaryOutageRespAttrsSummaryStatesStatus = "unknown"
	SummaryOutageRespAttrsSummaryStatesStatusUp      SummaryOutageRespAttrsSummaryStatesStatus = "up"
)

// Defines values for SummaryPerformanceOrder.
const (
	SummaryPerformanceOrderAsc  SummaryPerformanceOrder = "asc"
	SummaryPerformanceOrderDesc SummaryPerformanceOrder = "desc"
)

// Defines values for SummaryPerformanceResolution.
const (
	SummaryPerformanceResolutionDay  SummaryPerformanceResolution = "day"
	SummaryPerformanceResolutionHour SummaryPerformanceResolution = "hour"
	SummaryPerformanceResolutionWeek SummaryPerformanceResolution = "week"
)

// Defines values for PutChecksJSONBodyResolution.
const (
	PutChecksJSONBodyResolutionN1  PutChecksJSONBodyResolution = 1
	PutChecksJSONBodyResolutionN15 PutChecksJSONBodyResolution = 15
	PutChecksJSONBodyResolutionN30 PutChecksJSONBodyResolution = 30
	PutChecksJSONBodyResolutionN5  PutChecksJSONBodyResolution = 5
	PutChecksJSONBodyResolutionN60 PutChecksJSONBodyResolution = 60
)

// Defines values for PutChecksFormdataBodyResolution.
const (
	PutChecksFormdataBodyResolutionN1  PutChecksFormdataBodyResolution = 1
	PutChecksFormdataBodyResolutionN15 PutChecksFormdataBodyResolution = 15
	PutChecksFormdataBodyResolutionN30 PutChecksFormdataBodyResolution = 30
	PutChecksFormdataBodyResolutionN5  PutChecksFormdataBodyResolution = 5
	PutChecksFormdataBodyResolutionN60 PutChecksFormdataBodyResolution = 60
)

// Defines values for GetAllChecksParamsType.
const (
	Recording GetAllChecksParamsType = "recording"
	Script    GetAllChecksParamsType = "script"
)

// Defines values for GetCheckReportStatusAllParamsOrder.
const (
	GetCheckReportStatusAllParamsOrderAsc  GetCheckReportStatusAllParamsOrder = "asc"
	GetCheckReportStatusAllParamsOrderDesc GetCheckReportStatusAllParamsOrder = "desc"
)

// Defines values for GetCheckReportPerformanceParamsOrder.
const (
	GetCheckReportPerformanceParamsOrderAsc  GetCheckReportPerformanceParamsOrder = "asc"
	GetCheckReportPerformanceParamsOrderDesc GetCheckReportPerformanceParamsOrder = "desc"
)

// Defines values for GetCheckReportPerformanceParamsResolution.
const (
	GetCheckReportPerformanceParamsResolutionDay  GetCheckReportPerformanceParamsResolution = "day"
	GetCheckReportPerformanceParamsResolutionHour GetCheckReportPerformanceParamsResolution = "hour"
	GetCheckReportPerformanceParamsResolutionWeek GetCheckReportPerformanceParamsResolution = "week"
)

// Defines values for GetCheckReportStatusParamsOrder.
const (
	GetCheckReportStatusParamsOrderAsc  GetCheckReportStatusParamsOrder = "asc"
	GetCheckReportStatusParamsOrderDesc GetCheckReportStatusParamsOrder = "desc"
)

// AGCM defines model for AGCM.
type AGCM = []struct {
	// AgcmId Contact target's agcm id
	AgcmId *string `json:"agcm_id,omitempty"`

	// Severity Contact target's severity level
	Severity *string `json:"severity,omitempty"`
}

// APNS defines model for APNS.
type APNS = []struct {
	// ApnsDevice Contact target's apns
	ApnsDevice *string `json:"apns_device,omitempty"`

	// DeviceName Contact targets's device name
	DeviceName *string `json:"device_name,omitempty"`

	// Severity Contact target's severity level
	Severity *string `json:"severity,omitempty"`
}

// AlertingTeamID defines model for AlertingTeam_ID.
type AlertingTeamID struct {
	// Id Team identifier
	Id      *int       `json:"id,omitempty"`
	Members *[]Members `json:"members,omitempty"`

	// Name Team name
	Name *string `json:"name,omitempty"`
}

// AlertingTeams defines model for AlertingTeams.
type AlertingTeams struct {
	// Id Team identifier
	Id      *int       `json:"id,omitempty"`
	Members *[]Members `json:"members,omitempty"`

	// Name Team name
	Name *string `json:"name,omitempty"`
}

// AverageResponse Average response times in milliseconds
type AverageResponse = int64

// Check defines model for Check.
type Check struct {
	// Created Creating time. Format is UNIX timestamp
	Created *int `json:"created,omitempty"`

	// Hostname Target host
	Hostname *string `json:"hostname,omitempty"`
	Id       *int    `json:"id,omitempty"`

	// Ipv6 Use ipv6 instead of ipv4
	Ipv6 *bool `json:"ipv6,omitempty"`

	// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
	Lastdownend *int `json:"lastdownend,omitempty"`

	// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
	Lastdownstart *int `json:"lastdownstart,omitempty"`

	// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
	Lasterrortime *int `json:"lasterrortime,omitempty"`

	// Lastresponsetime Response time (in milliseconds) of last test.
	Lastresponsetime *int `json:"lastresponsetime,omitempty"`

	// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
	Lasttesttime *int    `json:"lasttesttime,omitempty"`
	Name         *string `json:"name,omitempty"`

	// Resolution How often should the check be tested? (minutes)
	Resolution *int         `json:"resolution,omitempty"`
	Status     *CheckStatus `json:"status,omitempty"`

	// Tags List of tags for check
	Tags *[]Tag `json:"tags,omitempty"`
}

// CheckStatus defines model for Check.Status.
type CheckStatus string

// CheckGeneral defines model for CheckGeneral.
type CheckGeneral struct {
	// Active Check status: active or inactive
	Active *bool `json:"active,omitempty"`

	// CreatedAt Timestamp when the check was created
	CreatedAt *int64 `json:"created_at,omitempty"`

	// Id Id of the check
	CheckID *int64 `json:"id,omitempty"`

	// Interval TMS test intervals in minutes. Allowed intervals: 5,10,20,60,720,1440. The interval you're allowed to set may vary depending on your current plan.
	Interval *int64 `json:"interval,omitempty"`

	// LastDowntimeEnd Timestamp when the last downtime ended. This field is optional
	LastDowntimeEnd *int64 `json:"last_downtime_end,omitempty"`

	// LastDowntimeStart Timestamp when the last downtime started. This field is optional
	LastDowntimeStart *int64 `json:"last_downtime_start,omitempty"`

	// ModifiedAt Timestamp when the check was modified
	ModifiedAt *int64 `json:"modified_at,omitempty"`

	// Name Name of the check
	Name *string `json:"name,omitempty"`

	// Region Name of the region where the check is executed. Supported regions: us-east, us-west, eu, au
	Region *string `json:"region,omitempty"`

	// Status Whether the check is passing or failing at the moment (successful, failing, unknown)
	Status *string `json:"status,omitempty"`

	// Tags List of tags for a check. The tag name may contain the characters 'A-Z', 'a-z', '0-9', '_' and '-'. The maximum length of a tag is 64 characters.
	Tags *[]string `json:"tags,omitempty"`

	// Type Type of transaction check: "script" for regular TMS checks and "recording" for checks made using the Transaction Recorder
	Type *CheckGeneralType `json:"type,omitempty"`
}

// CheckGeneralType Type of transaction check: "script" for regular TMS checks and "recording" for checks made using the Transaction Recorder
type CheckGeneralType string

// CheckSimple defines model for CheckSimple.
type CheckSimple struct {
	// Id Id of the check
	CheckID *int64 `json:"id,omitempty"`

	// Name Name of the check
	Name *string `json:"name,omitempty"`
}

// CheckStatusID defines model for CheckStatus.
type CheckStatusID struct {
	// CheckId ID of the check
	CheckId *PropertyCheckID `json:"check_id,omitempty"`

	// Name Name of the check
	Name *PropertyCheckName `json:"name,omitempty"`

	// States Intervals when the check had a specific status (`up`/`down`).
	States *[]State `json:"states,omitempty"`
}

// CheckWithStringType defines model for CheckWithStringType.
type CheckWithStringType = Check

// CheckWithoutID CheckWithoutID is a struct describing a TMS check data common for creating a check
type CheckWithoutID struct {
	// Active Check status: active or inactive
	Active *bool `json:"active,omitempty"`

	// ContactIds Contacts to alert
	ContactIDs *[]int64 `json:"contact_ids,omitempty"`

	// CustomMessage Custom message that is part of the email and webhook alerts
	CustomMessage *string `json:"custom_message,omitempty"`

	// IntegrationIds Integration identifiers.
	IntegrationIDs *[]int64 `json:"integration_ids,omitempty"`

	// Interval TMS test intervals in minutes. Allowed intervals: 5,10,20,60,720,1440. The interval you're allowed to set may vary depending on your current plan.
	Interval *int64 `json:"interval,omitempty"`

	// Metadata Recording related metadata. Used for recordings only. Modify with caution!
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Name of the check
	Name string `json:"name"`

	// Region Name of the region where the check is executed. Supported regions: us-east, us-west, eu, au
	Region *string `json:"region,omitempty"`

	// SendNotificationWhenDown Send notification when down X times
	NotifyAfter *int64 `json:"send_notification_when_down,omitempty"`

	// SeverityLevel Check importance- how important are the alerts when the check fails. Allowed values: low, high
	SeverityLevel *string `json:"severity_level,omitempty"`

	// Steps steps to be executed as part of the check
	Steps []Step `json:"steps"`

	// Tags List of tags for a check. The tag name may contain the characters 'A-Z', 'a-z', '0-9', '_' and '-'. The maximum length of a tag is 64 characters.
	Tags *[]string `json:"tags,omitempty"`

	// TeamIds Teams to alert
	TeamIDs *[]int64 `json:"team_ids,omitempty"`
}

// CheckWithoutIDGET CheckWithoutIDGET is a struct describing a TMS check data common for displaying a check
type CheckWithoutIDGET struct {
	// Active Check status - active or inactive
	Active *bool `json:"active,omitempty"`

	// ContactIds Contacts to alert
	ContactIDs *[]int64 `json:"contact_ids,omitempty"`

	// CreatedAt Timestamp when the check was created
	CreatedAt *int64 `json:"created_at,omitempty"`

	// CustomMessage Custom message that is part of the email and webhook alerts
	CustomMessage *string `json:"custom_message,omitempty"`

	// IntegrationIds Integration identifiers.
	IntegrationIDs *[]int64 `json:"integration_ids,omitempty"`

	// Interval TMS test intervals in minutes. Allowed intervals: 5,10,20,60,720,1440. The interval you're allowed to set may vary depending on your current plan.
	Interval *int64 `json:"interval,omitempty"`

	// LastDowntimeEnd Timestamp when the last downtime ended. This field is optional
	LastDowntimeEnd *int64 `json:"last_downtime_end,omitempty"`

	// LastDowntimeStart Timestamp when the last downtime started. This field is optional
	LastDowntimeStart *int64 `json:"last_downtime_start,omitempty"`

	// Metadata Recording related metadata. Used for recordings only. Modify with caution!
	Metadata *MetadataGET `json:"metadata,omitempty"`

	// ModifiedAt Timestamp when the check was modified
	ModifiedAt *int64 `json:"modified_at,omitempty"`

	// Name Name of the check
	Name *string `json:"name,omitempty"`

	// Region Name of the region where the check is executed. Supported regions: us-east, us-west, eu, au
	Region *string `json:"region,omitempty"`

	// SendNotificationWhenDown Send notification when down X times
	NotifyAfter *int64 `json:"send_notification_when_down,omitempty"`

	// SeverityLevel Check importance- how important are the alerts when the check fails. Allowed values: low, high
	SeverityLevel *string `json:"severity_level,omitempty"`

	// Status Whether the check is passing or failing at the moment (successful, failing, unknown)
	Status *string `json:"status,omitempty"`

	// Steps steps to be executed as part of the check
	Steps *[]Step `json:"steps,omitempty"`

	// Tags List of tags for a check. The tag name may contain the characters 'A-Z', 'a-z', '0-9', '_' and '-'. The maximum length of a tag is 64 characters.
	Tags *[]string `json:"tags,omitempty"`

	// TeamIds Teams to alert
	TeamIDs *[]int64 `json:"team_ids,omitempty"`

	// Type Type of transaction check: "script" for regular TMS checks and "recording" for checks made using the Transaction Recorder
	Type *CheckWithoutIDGETType `json:"type,omitempty"`
}

// CheckWithoutIDGETType Type of transaction check: "script" for regular TMS checks and "recording" for checks made using the Transaction Recorder
type CheckWithoutIDGETType string

// CheckWithoutIDPUT CheckWithoutIDPUT is a struct describing a TMS check data common for updating a check
type CheckWithoutIDPUT struct {
	// Active Check status: active or inactive
	Active *bool `json:"active,omitempty"`

	// ContactIds Contacts to alert
	ContactIDs *[]int64 `json:"contact_ids,omitempty"`

	// CustomMessage Custom message that is part of the email and webhook alerts
	CustomMessage *string `json:"custom_message,omitempty"`

	// IntegrationIds Integration identifiers as a list of integers.
	IntegrationIds *[]int `json:"integration_ids,omitempty"`

	// Interval TMS test intervals in minutes. Allowed intervals: 5,10,20,60,720,1440. The interval you're allowed to set may vary depending on your current plan.
	Interval *int64 `json:"interval,omitempty"`

	// Metadata Recording related metadata. Used for recordings only. Modify with caution!
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Name of the check
	Name *string `json:"name,omitempty"`

	// Region Name of the region where the check is executed. Supported regions: us-east, us-west, eu, au
	Region *string `json:"region,omitempty"`

	// SendNotificationWhenDown Send notification when down X times
	NotifyAfter *int64 `json:"send_notification_when_down,omitempty"`

	// SeverityLevel Check importance- how important are the alerts when the check fails. Allowed values: low, high
	SeverityLevel *string `json:"severity_level,omitempty"`

	// Steps steps to be executed as part of the check
	Steps *[]Step `json:"steps,omitempty"`

	// Tags List of tags for a check. The tag name may contain the characters 'A-Z', 'a-z', '0-9', '_' and '-'. The maximum length of a tag is 64 characters.
	Tags *[]string `json:"tags,omitempty"`

	// TeamIds Teams to alert
	TeamIDs *[]int64 `json:"team_ids,omitempty"`
}

// Checks defines model for Checks.
type Checks struct {
	Checks *[]CheckWithStringType `json:"checks,omitempty"`
	Counts *Counts                `json:"counts,omitempty"`
}

// ChecksAll defines model for ChecksAll.
type ChecksAll struct {
	Check  *[]CheckGeneral `json:"checks,omitempty"`
	Limit  *uint64         `json:"limit,omitempty"`
	Offset *uint64         `json:"offset,omitempty"`
}

// Contact defines model for Contact.
type Contact struct {
	Contact *ContactTargets `json:"contact,omitempty"`
}

// ContactTargets defines model for ContactTargets.
type ContactTargets struct {
	// Id Contact ID
	Id *int `json:"id,omitempty"`

	// Name Contact name
	Name                *string                             `json:"name,omitempty"`
	NotificationTargets *ContactTargets_NotificationTargets `json:"notification_targets,omitempty"`

	// Owner Indicates whether the contact is the owner of the organization
	Owner *ContactTargetsOwner `json:"owner,omitempty"`

	// Paused Describes whether alerts are paused for this contact
	Paused *ContactTargetsPaused `json:"paused,omitempty"`
	Teams  *[]struct {
		// Id Team ID
		Id *int `json:"id,omitempty"`

		// Name Name of the team
		Name *string `json:"name,omitempty"`
	} `json:"teams,omitempty"`

	// Type Type defines whether this is a user (login user) or a contact only
	Type *ContactTargetsType `json:"type,omitempty"`
}

// ContactTargets_NotificationTargets defines model for ContactTargets.NotificationTargets.
type ContactTargets_NotificationTargets struct {
	union json.RawMessage
}

// ContactTargetsOwner Indicates whether the contact is the owner of the organization
type ContactTargetsOwner bool

// ContactTargetsPaused Describes whether alerts are paused for this contact
type ContactTargetsPaused bool

// ContactTargetsType Type defines whether this is a user (login user) or a contact only
type ContactTargetsType string

// ContactsList defines model for ContactsList.
type ContactsList struct {
	// Contacts List of all contacts targets
	Contacts *[]ContactTargets `json:"contacts,omitempty"`
}

// Country defines model for Country.
type Country struct {
	// Id Country id
	Id *int `json:"id,omitempty"`

	// Iso Country ISO code
	Iso *string `json:"iso,omitempty"`

	// Name Country name
	Name *string `json:"name,omitempty"`
}

// Counts defines model for Counts.
type Counts struct {
	// Filtered Number of checks after limit was applied
	Filtered *int `json:"filtered,omitempty"`

	// Limited Number of checks after tags filter was applied
	Limited *int `json:"limited,omitempty"`

	// Total Total number of checks
	Total *int `json:"total,omitempty"`
}

// CreateCheck defines model for CreateCheck.
type CreateCheck struct {
	// CustomMessage Custom message that will be added to email and webhook alerts.
	CustomMessage *string `json:"custom_message,omitempty"`

	// Host Target host
	Host string `json:"host"`

	// Integrationids Integration identifiers. For example integrationids:[1,2,3].
	Integrationids *[]int `json:"integrationids,omitempty"`

	// Ipv6 Use ipv6 instead of ipv4, if an IP address is provided as host this will be overrided by the IP address version
	Ipv6 *bool `json:"ipv6,omitempty"`

	// Name Check name
	Name string `json:"name"`

	// Notifyagainevery Notify again every n result. 0 means that no extra notifications will be sent.
	Notifyagainevery *int `json:"notifyagainevery,omitempty"`

	// Notifywhenbackup Notify when back up again
	Notifywhenbackup *bool `json:"notifywhenbackup,omitempty"`
	Paused           *bool `json:"paused,omitempty"`

	// ProbeFilters Filters used for probe selections. Overwrites previous filters for check. To remove all filters from a check, use an empty value. Comma separated key:value pairs. Currently only region is supported. Possible values are 'EU', 'NA', 'APAC' and 'LATAM'. For example, "region: NA".
	ProbeFilters *[]string `json:"probe_filters,omitempty"`

	// Resolution How often should the check be tested? (minutes)
	Resolution *CreateCheckResolution `json:"resolution,omitempty"`

	// ResponsetimeThreshold Triggers a down alert if the response time exceeds threshold specified in ms (Not available for Starter and Free plans.)
	ResponsetimeThreshold *int `json:"responsetime_threshold,omitempty"`

	// Sendnotificationwhendown Send notification when down X times
	Sendnotificationwhendown *int `json:"sendnotificationwhendown,omitempty"`

	// Tags List of tags for check. The maximum length of a tag is 64 characters.
	Tags *[]string `json:"tags,omitempty"`

	// Teamids Teams to alert. Comma separated Integers.
	Teamids *string `json:"teamids,omitempty"`

	// Type Type of check
	Type CreateCheckType `json:"type"`

	// Userids User identifiers. For example userids=154325,465231,765871
	Userids *string `json:"userids,omitempty"`
	union   json.RawMessage
}

// CreateCheckResolution How often should the check be tested? (minutes)
type CreateCheckResolution int

// CreateCheckType Type of check
type CreateCheckType string

// CreateContact defines model for CreateContact.
type CreateContact struct {
	// Name Contact name
	Name                string                            `json:"name"`
	NotificationTargets CreateContact_NotificationTargets `json:"notification_targets"`

	// Paused Pause contact
	Paused *CreateContactPaused `json:"paused,omitempty"`
}

// CreateContact_NotificationTargets defines model for CreateContact.NotificationTargets.
type CreateContact_NotificationTargets struct {
	union json.RawMessage
}

// CreateContactPaused Pause contact
type CreateContactPaused bool

// CreateTeam defines model for CreateTeam.
type CreateTeam struct {
	// MemberIds Contact ids
	MemberIds []int `json:"member_ids"`

	// Name Team name
	Name string `json:"name"`
}

// DNS defines model for DNS.
type DNS struct {
	// Expectedip (dns specific) Expected ip
	Expectedip string `json:"expectedip"`

	// Host Target host
	Host string `json:"host"`

	// Ipv6 Use ipv6 instead of ipv4
	Ipv6 *bool `json:"ipv6,omitempty"`

	// Nameserver (dns specific) Nameserver
	Nameserver string `json:"nameserver"`

	// ProbeFilters Filters used for probe selections. Comma separated key:value pairs. Currently only region is supported. Possible values are 'EU', 'NA', 'APAC' and 'LATAM'. For example, "region: NA".
	ProbeFilters *int `json:"probe_filters,omitempty"`

	// Probeid Probe identifier
	Probeid *int `json:"probeid,omitempty"`

	// ResponsetimeThreshold Triggers a down alert if the response time exceeds threshold specified in ms (Not available for Starter and Free plans.)
	ResponsetimeThreshold *int    `json:"responsetime_threshold,omitempty"`
	Type                  DNSType `json:"type"`
}

// DNSType defines model for DNS.Type.
type DNSType string

// DateTimeFormat defines model for DateTimeFormat.
type DateTimeFormat struct {
	// Description Date/time description
	Description *string `json:"description,omitempty"`

	// Id Date/time identifier
	Id *int `json:"id,omitempty"`
}

// Days defines model for Days.
type Days struct {
	Days *SummaryPerformanceResults `json:"days,omitempty"`
}

// DetailedCheck defines model for DetailedCheck.
type DetailedCheck struct {
	union json.RawMessage
}

// DetailedCheckAttributes defines model for DetailedCheckAttributes.
type DetailedCheckAttributes = Check

// DetailedCheckDns defines model for DetailedCheckDns.
type DetailedCheckDns struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int                         `json:"resolution,omitempty"`
		Status     *DetailedCheckDnsCheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Dns *DnsAttributes `json:"dns,omitempty"`
		} `json:"type,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckDnsCheckStatus defines model for DetailedCheckDns.Check.Status.
type DetailedCheckDnsCheckStatus string

// DetailedCheckHttp defines model for DetailedCheckHttp.
type DetailedCheckHttp struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int                          `json:"resolution,omitempty"`
		Status     *DetailedCheckHttpCheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Http *HttpAttributesGet `json:"http,omitempty"`
		} `json:"type,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckHttpCheckStatus defines model for DetailedCheckHttp.Check.Status.
type DetailedCheckHttpCheckStatus string

// DetailedCheckHttpCustom defines model for DetailedCheckHttpCustom.
type DetailedCheckHttpCustom struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int `json:"resolution,omitempty"`

		// SslDownDaysBefore Treat the target site as down if a certificate expires within the given number of days. This parameter will be ignored if `verify_certificate` is set to `false`.
		SslDownDaysBefore *int                                `json:"ssl_down_days_before,omitempty"`
		Status            *DetailedCheckHttpCustomCheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Httpcustom *HttpCustomAttributes `json:"httpcustom,omitempty"`
		} `json:"type,omitempty"`

		// VerifyCertificate Treat target site as down if an invalid/unverifiable certificate is found.
		VerifyCertificate *bool `json:"verify_certificate,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckHttpCustomCheckStatus defines model for DetailedCheckHttpCustom.Check.Status.
type DetailedCheckHttpCustomCheckStatus string

// DetailedCheckImap defines model for DetailedCheckImap.
type DetailedCheckImap struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int                          `json:"resolution,omitempty"`
		Status     *DetailedCheckImapCheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Imap *ImapAttributes `json:"imap,omitempty"`
		} `json:"type,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckImapCheckStatus defines model for DetailedCheckImap.Check.Status.
type DetailedCheckImapCheckStatus string

// DetailedCheckPop3 defines model for DetailedCheckPop3.
type DetailedCheckPop3 struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int                          `json:"resolution,omitempty"`
		Status     *DetailedCheckPop3CheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Pop3 *Pop3Attributes `json:"pop3,omitempty"`
		} `json:"type,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckPop3CheckStatus defines model for DetailedCheckPop3.Check.Status.
type DetailedCheckPop3CheckStatus string

// DetailedCheckSmtp defines model for DetailedCheckSmtp.
type DetailedCheckSmtp struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int                          `json:"resolution,omitempty"`
		Status     *DetailedCheckSmtpCheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Smtp *SmtpAttributesGet `json:"smtp,omitempty"`
		} `json:"type,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckSmtpCheckStatus defines model for DetailedCheckSmtp.Check.Status.
type DetailedCheckSmtpCheckStatus string

// DetailedCheckTcp defines model for DetailedCheckTcp.
type DetailedCheckTcp struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int                         `json:"resolution,omitempty"`
		Status     *DetailedCheckTcpCheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Tcp *TcpAttributes `json:"tcp,omitempty"`
		} `json:"type,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckTcpCheckStatus defines model for DetailedCheckTcp.Check.Status.
type DetailedCheckTcpCheckStatus string

// DetailedCheckUdp defines model for DetailedCheckUdp.
type DetailedCheckUdp struct {
	Check *struct {
		// Created Creating time. Format is UNIX timestamp
		Created *int `json:"created,omitempty"`

		// Hostname Target host
		Hostname *string `json:"hostname,omitempty"`
		Id       *int    `json:"id,omitempty"`

		// Ipv6 Use ipv6 instead of ipv4
		Ipv6 *bool `json:"ipv6,omitempty"`

		// Lastdownend Timestamp of end of last check down (if any). Format is UNIX timestamp. During a downtime it will be lasttesttime.
		Lastdownend *int `json:"lastdownend,omitempty"`

		// Lastdownstart Timestamp of start of last check down (if any). Format is UNIX timestamp.
		Lastdownstart *int `json:"lastdownstart,omitempty"`

		// Lasterrortime Timestamp of last error (if any). Format is UNIX timestamp
		Lasterrortime *int `json:"lasterrortime,omitempty"`

		// Lastresponsetime Response time (in milliseconds) of last test.
		Lastresponsetime *int `json:"lastresponsetime,omitempty"`

		// Lasttesttime Timestamp of last test (if any). Format is UNIX timestamp
		Lasttesttime *int    `json:"lasttesttime,omitempty"`
		Name         *string `json:"name,omitempty"`

		// Resolution How often should the check be tested? (minutes)
		Resolution *int                         `json:"resolution,omitempty"`
		Status     *DetailedCheckUdpCheckStatus `json:"status,omitempty"`

		// Tags List of tags for check
		Tags *[]Tag `json:"tags,omitempty"`
		Type *struct {
			Udp *UdpAttributes `json:"udp,omitempty"`
		} `json:"type,omitempty"`
	} `json:"check,omitempty"`
}

// DetailedCheckUdpCheckStatus defines model for DetailedCheckUdp.Check.Status.
type DetailedCheckUdpCheckStatus string

// DetailedDnsAttributes defines model for DetailedDnsAttributes.
type DetailedDnsAttributes struct {
	Type *struct {
		Dns *DnsAttributes `json:"dns,omitempty"`
	} `json:"type,omitempty"`
}

// DetailedHttpAttributes defines model for DetailedHttpAttributes.
type DetailedHttpAttributes struct {
	Type *struct {
		Http *HttpAttributesGet `json:"http,omitempty"`
	} `json:"type,omitempty"`
}

// DetailedHttpCustomAttributes defines model for DetailedHttpCustomAttributes.
type DetailedHttpCustomAttributes struct {
	Type *struct {
		Httpcustom *HttpCustomAttributes `json:"httpcustom,omitempty"`
	} `json:"type,omitempty"`
}

// DetailedImapAttributes defines model for DetailedImapAttributes.
type DetailedImapAttributes struct {
	Type *struct {
		Imap *ImapAttributes `json:"imap,omitempty"`
	} `json:"type,omitempty"`
}

// DetailedPop3Attributes defines model for DetailedPop3Attributes.
type DetailedPop3Attributes struct {
	Type *struct {
		Pop3 *Pop3Attributes `json:"pop3,omitempty"`
	} `json:"type,omitempty"`
}

// DetailedSmtpAttributes defines model for DetailedSmtpAttributes.
type DetailedSmtpAttributes struct {
	Type *struct {
		Smtp *SmtpAttributesGet `json:"smtp,omitempty"`
	} `json:"type,omitempty"`
}

// DetailedTcpAttributes defines model for DetailedTcpAttributes.
type DetailedTcpAttributes struct {
	Type *struct {
		Tcp *TcpAttributes `json:"tcp,omitempty"`
	} `json:"type,omitempty"`
}

// DetailedUdpAttributes defines model for DetailedUdpAttributes.
type DetailedUdpAttributes struct {
	Type *struct {
		Udp *UdpAttributes `json:"udp,omitempty"`
	} `json:"type,omitempty"`
}

// DnsAttributes defines model for DnsAttributes.
type DnsAttributes struct {
	// Expectedip Expected IP
	Expectedip string `json:"expectedip"`

	// Nameserver DNS server to use
	Nameserver string `json:"nameserver"`
}

// Downtime Amount of time when the check was down within given interval (only with the `include_uptime` flag)
type Downtime = int64

// Emails defines model for Emails.
type Emails = []struct {
	// Address Email address
	Address *string `json:"address,omitempty"`

	// Severity Contact target's severity level
	Severity *string `json:"severity,omitempty"`
}

// HTTP defines model for HTTP.
type HTTP struct {
	// Auth (http specific) Username and password for target HTTP authentication.
	Auth *string `json:"auth,omitempty"`

	// Encryption (http specific) Connection encryption
	Encryption *bool `json:"encryption,omitempty"`

	// Host Target host
	Host string `json:"host"`

	// Ipv6 Use ipv6 instead of ipv4
	Ipv6 *bool `json:"ipv6,omitempty"`

	// Port (http specific) Target port
	Port *int `json:"port,omitempty"`

	// Postdata (http specific) Data that should be posted to the web page, for example submission data for a sign-up or login form. The data needs to be formatted in the same way as a web browser would send it to the web server
	Postdata *string `json:"postdata,omitempty"`

	// ProbeFilters Filters used for probe selections. Comma separated key:value pairs. Currently only region is supported. Possible values are 'EU', 'NA', 'APAC' and 'LATAM'.
	ProbeFilters *int `json:"probe_filters,omitempty"`

	// Probeid Probe identifier
	Probeid *int `json:"probeid,omitempty"`

	// RequestheaderX (http specific) Custom HTTP header name. Replace {X} with a number unique for each header argument.
	RequestheaderX *string `json:"requestheader{X},omitempty"`

	// ResponsetimeThreshold Triggers a down alert if the response time exceeds threshold specified in ms (Not available for Starter and Free plans.)
	ResponsetimeThreshold *int `json:"responsetime_threshold,omitempty"`

	// Shouldcontain (http specific) Target site should contain this string
	Shouldcontain *string `json:"shouldcontain,omitempty"`

	// Shouldnotcontain (http specific) Target site should NOT contain this string
	Shouldnotcontain *string `json:"shouldnotcontain,omitempty"`

	// SslDownDaysBefore (http specific) Treat the target site as down if a certificate expires within the given number of days. This parameter will be ignored if `verify_certificate` is set to `false`.
	SslDownDaysBefore *int     `json:"ssl_down_days_before,omitempty"`
	Type              HTTPType `json:"type"`

	// Url (http specific) Target path on server
	Url *string `json:"url,omitempty"`

	// VerifyCertificate (http specific) Treat target site as down if an invalid/unverifiable certificate is found.
	VerifyCertificate *bool `json:"verify_certificate,omitempty"`
}

// HTTPType defines model for HTTP.Type.
type HTTPType string

// HTTPCustom defines model for HTTP-Custom.
type HTTPCustom struct {
	// Additionalurls (httpcustom specific) ;-separated list of addidional URLs with hostname included.
	Additionalurls *string `json:"additionalurls,omitempty"`

	// Auth (httpcustom specific) Username and password for target HTTP authentication.
	Auth *string `json:"auth,omitempty"`

	// Encryption (httpcustom specific) Connection encryption
	Encryption *bool `json:"encryption,omitempty"`

	// Host Target host
	Host string `json:"host"`

	// Ipv6 Use ipv6 instead of ipv4
	Ipv6 *bool `json:"ipv6,omitempty"`

	// Port (httpcustom specific) Target port
	Port *int `json:"port,omitempty"`

	// ProbeFilters Filters used for probe selections. Comma separated key:value pairs. Currently only region is supported. Possible values are 'EU', 'NA', 'APAC' and 'LATAM'.
	ProbeFilters *int `json:"probe_filters,omitempty"`

	// Probeid Probe identifier
	Probeid *int `json:"probeid,omitempty"`

	// ResponsetimeThreshold Triggers a down alert if the response time exceeds threshold specified in ms (Not available for Starter and Free plans.)
	ResponsetimeThreshold *int           `json:"responsetime_threshold,omitempty"`
	Type                  HTTPCustomType `json:"type"`

	// Url (httpcustom specific) Target path to XML file on server
	Url string `json:"url"`
}

// HTTPCustomType defines model for HTTPCustom.Type.
type HTTPCustomType string

// Hours defines model for Hours.
type Hours struct {
	Hours *SummaryPerformanceResults `json:"hours,omitempty"`
}

// HttpAttributesBase defines model for HttpAttributesBase.
type HttpAttributesBase struct {
	// Encryption Connection encryption
	Encryption *bool `json:"encryption,omitempty"`

	// Port Target port
	Port *int `json:"port,omitempty"`

	// Postdata Data that should be posted to the web page, for example submission data for a sign-up or login form. The data needs to be formatted in the same way as a web browser would send it to the web server
	Postdata *string `json:"postdata,omitempty"`

	// Requestheaders Custom HTTP header. The entry value should contain a one-element string array. The element should contain `headerName` and `headerValue` colon-separated. To add more than one header send other parameters named `requestheaders{number}`.
	Requestheaders *[]string `json:"requestheaders,omitempty"`

	// Shouldcontain Target site should contain this string. Note! This parameter cannot be used together with the parameter “shouldnotcontain”, use only one of them in your request.
	Shouldcontain *string `json:"shouldcontain,omitempty"`

	// Shouldnotcontain Target site should NOT contain this string. Note! This parameter cannot be used together with the parameter “shouldcontain”, use only one of them in your request.
	Shouldnotcontain *string `json:"shouldnotcontain,omitempty"`

	// SslDownDaysBefore Treat the target site as down if a certificate expires within the given number of days. This parameter will be ignored if `verify_certificate` is set to `false`. It will appear provided `verify_certificate` is true and `ssl_down_days_before` value is greater than or equals 1.
	SslDownDaysBefore *int `json:"ssl_down_days_before,omitempty"`

	// Url Path to target on server
	Url *string `json:"url,omitempty"`

	// VerifyCertificate Treat target site as down if an invalid/unverifiable certificate is found.
	VerifyCertificate *bool `json:"verify_certificate,omitempty"`
}

// HttpAttributesGet defines model for HttpAttributesGet.
type HttpAttributesGet = HttpAttributesBase

// HttpAttributesSet defines model for HttpAttributesSet.
type HttpAttributesSet = HttpAttributesBase

// HttpAuthentications defines model for HttpAuthentications.
type HttpAuthentications struct {
	// Credentials Basic Authentication credentials to use on host
	Credentials *struct {
		// Password Basic Authentication password
		Password *string `json:"password,omitempty"`

		// UserName Basic Authentication Username
		UserName *string `json:"userName,omitempty"`
	} `json:"credentials,omitempty"`
	Host *string `json:"host,omitempty"`
}

// HttpCertificateAttributes defines model for HttpCertificateAttributes.
type HttpCertificateAttributes struct {
	// SslDownDaysBefore Treat the target site as down if a certificate expires within the given number of days. This parameter will be ignored if `verify_certificate` is set to `false`.
	SslDownDaysBefore *int `json:"ssl_down_days_before,omitempty"`

	// VerifyCertificate Treat target site as down if an invalid/unverifiable certificate is found.
	VerifyCertificate *bool `json:"verify_certificate,omitempty"`
}

// HttpCustomAttributes defines model for HttpCustomAttributes.
type HttpCustomAttributes = HttpCertificateAttributes

// IMAP defines model for IMAP.
type IMAP struct {
	// Encryption (imap specific) Connection encryption
	Encryption *bool `json:"encryption,omitempty"`

	// Host Target host
	Host string `json:"host"`

	// Ipv6 Use ipv6 instead of ipv4
	Ipv6 *bool `json:"ipv6,omitempty"`

	// Port (imap specific) Target port
	Port *int `json:"port,omitempty"`

	// ProbeFilters Filters used for probe selections. Comma separated key:value pairs. Currently only region is supported. Possible values are 'EU', 'NA', 'APAC' and 'LATAM'.
	ProbeFilters *int `json:"probe_filters,omitempty"`

	// Probeid Probe identifier
	Probeid *int `json:"probeid,omitempty"`

	// ResponsetimeThreshold Triggers a down alert if the response time exceeds threshold specified in ms (Not available for Starter and Free plans.)
	ResponsetimeThreshold *int `json:"responsetime_threshold,omitempty"`

	// Stringtoexpect (imap specific) String to expect in response
	Stringtoexpect *string  `json:"stringtoexpect,omitempty"`
	Type           IMAPType `json:"type"`
}

// IMAPType defines model for IMAP.Type.
type IMAPType string

// ImapAttributes defines model for ImapAttributes.
type ImapAttributes struct {
	// Port Target port
	Port *int `json:"port,omitempty"`

	// Stringtoexpect String to expect in response
	Stringtoexpect *string `json:"stringtoexpect,omitempty"`
}

// Members defines model for Members.
type Members struct {
	// Id Contact identifier
	Id *int `json:"id,omitempty"`

	// Name The team member’s name
	Name *string `json:"name,omitempty"`

	// Type Type defines whether the member is a user (login user) or a contact only
	Type *MembersType `json:"type,omitempty"`
}

// MembersType Type defines whether the member is a user (login user) or a contact only
type MembersType string

// Metadata Recording related metadata. Used for recordings only. Modify with caution!
type Metadata struct {
	// Authentications Allowed values are either an empty JSON object (no authentication) or Basic Authentication
	Authentications struct {
		// HttpAuthentications HTTP (browser-level) authentications. Currently, only Basic Authentication is supported
		HttpAuthentications *[]HttpAuthentications `json:"httpAuthentications,omitempty"`
	} `json:"authentications"`

	// DisableWebSecurity Setting this field to false will disable the same-origin policy during check execution
	DisableWebSecurity bool `json:"disableWebSecurity"`

	// Height Height of the browser window
	Height int `json:"height"`

	// Width Width of the browser window
	Width int `json:"width"`
}

// MetadataGET Recording related metadata. Used for recordings only. Modify with caution!
type MetadataGET struct {
	// Authentications Allowed values are either an empty JSON object (no authentication) or Basic Authentication
	Authentications *struct {
		// HttpAuthentications HTTP (browser-level) authentications. Currently, only Basic Authentication is supported
		HttpAuthentications *[]HttpAuthentications `json:"httpAuthentications,omitempty"`
	} `json:"authentications,omitempty"`

	// DisableWebSecurity Setting this field to false will disable the same-origin policy during check execution
	DisableWebSecurity *bool `json:"disableWebSecurity,omitempty"`

	// Height Height of the browser window
	Height *int `json:"height,omitempty"`

	// Width Width of the browser window
	Width *int `json:"width,omitempty"`
}

// ModifyCheckSettings defines model for ModifyCheckSettings.
type ModifyCheckSettings struct {
	// Addtags Check tags to add in addition to current check tags
	Addtags *[]string `json:"addtags,omitempty"`

	// Checkids Identifiers of checks to modify in bulk. For example checkids=1234,5678
	Checkids *string `json:"checkids,omitempty"`

	// CustomMessage Custom message that will be added to email and webhook alerts.
	CustomMessage *string `json:"custom_message,omitempty"`

	// Host Target host
	Host *string `json:"host,omitempty"`

	// Integrationids Integration identifiers. For example integrationids:[1,2,3].
	Integrationids *[]int `json:"integrationids,omitempty"`

	// Ipv6 Use ipv6 instead of ipv4, if an IP address is provided as host this will be overrided by the IP address version
	Ipv6 *bool `json:"ipv6,omitempty"`

	// Name Check name
	Name *string `json:"name,omitempty"`

	// Notifyagainevery Notify again every n result. 0 means that no extra notifications will be sent.
	Notifyagainevery *int `json:"notifyagainevery,omitempty"`

	// Notifywhenbackup Notify when back up again
	Notifywhenbackup *bool `json:"notifywhenbackup,omitempty"`
	Paused           *bool `json:"paused,omitempty"`

	// ProbeFilters Filters used for probe selections. Overwrites previous filters for check. To remove all filters from a check, use an empty value. Comma separated key:value pairs. Currently only region is supported. Possible values are 'EU', 'NA', 'APAC' and 'LATAM'. For example, "region: NA".
	ProbeFilters *[]string `json:"probe_filters,omitempty"`

	// Resolution How often should the check be tested? (minutes)
	Resolution *ModifyCheckSettingsResolution `json:"resolution,omitempty"`

	// ResponsetimeThreshold Triggers a down alert if the response time exceeds threshold specified in ms (Not available for Starter and Free plans.)
	ResponsetimeThreshold *int `json:"responsetime_threshold,omitempty"`

	// Sendnotificationwhendown Send notification when down X times
	Sendnotificationwhendown *int `json:"sendnotificationwhendown,omitempty"`

	// Tags List of tags for check. The maximum length of a tag is 64 characters.
	Tags *[]string `json:"tags,omitempty"`

	// Teamids Teams to alert. Comma separated Integers.
	Teamids *string `json:"teamids,omitempty"`

	// Userids User identifiers. For example userids=154325,465231,765871
	Userids *string `json:"userids,omitempty"`
	union   json.RawMessage
}

// ModifyCheckSettingsResolution How often should the check be tested? (minutes)
type ModifyCheckSettingsResolution int

// NumberFormat defines model for NumberFormat.
type NumberFormat struct {
	// Description Number format description
	Description *string `json:"description,omitempty"`

	// Id Number format identifier
	Id *int `json:"id,omitempty"`
}

// POP3 defines model for POP3.
type POP3 struct {
	// Encryption (pop3 specific) Connection encryption
	Encryption *bool `json:"encryption,omitempty"`

	// Host Target host
	Host string `json:"host"`

	// Ipv6 Use ipv6 instead of ipv4
	Ipv6 *bool `json:"ipv6,omitempty"`

	// Port (pop3 specific) Target port
	Port *int `json:"port,omitempty"`

	// ProbeFilters Filters used for probe selections. Comma separated key:value pairs. Currently only region is supported. Possible values are 'EU', 'NA', 'APAC' and 'LATAM'.
	ProbeFilters *int `json:"probe_filters,omitempty"`

	// Probeid Probe identifier
	Probeid *int `json:"probeid,omitempty"`

	// ResponsetimeThreshold Triggers a down alert if the response time exceeds threshold specified in ms (Not available for Starter and Free plans.)
	ResponsetimeThreshold *int `json:"responsetime_threshold,omitempty"`

	// Stringtoexpect (pop3 specific) String to expect in response
	Stringtoexpect *string  `json:"stringtoexpect,omitempty"`
	Type           POP3Type `json:"type"`
}

// POP3Type defines model for POP3.Type.
type POP3Type string

// PhoneCode defines model for PhoneCode.
type PhoneCode struct {
	// Countryid Country id (Can be mapped against countries.id)
	Countryid *int `json:"countryid,omitempty"`

	// Name Country name
	Name *string `json:"name,omitempty"`

	// Phonecode Area phone code
	Phonecode *string `json:"phonecode,omitempty"`
}

// Pop3Attributes defines model for Pop3Attributes.
type Pop3Attributes struct {
	// Port Target port
	Port *int `json:"port,omitempty"`

	// Stringtoexpect String to expect in response
	Stringtoexpect *string `json:"stringtoexpect,omitempty"`
}

// Probe defines model for Probe.
type Probe struct {
	// Active Is the probe currently active?
	Active  *bool   `json:"active,omitempty"`
	City    *string `json:"city,omitempty"`
	Country *string `json:"country,omitempty"`

	// Countryiso Country ISO code
	Countryiso *string `json:"countryiso,omitempty"`

	// Hostname DNS name
	Hostname *string `json:"hostname,omitempty"`
	Id       *int    `json:"id,omitempty"`

	// Ip IPv4 address
	Ip *string `json:"ip,omitempty"`

	// Ipv6 IPv6 address (not all probes have this)
	Ipv6 *string `json:"ipv6,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Probes defines model for Probes.
type Probes struct {
	Probes *[]Probe `json:"probes,omitempty"`
}

// PropertyCheckID ID of the check
type PropertyCheckID = int64

// PropertyCheckName Name of the check
type PropertyCheckName = string

// PropertyFrom Interval start. The format is `RFC 3339`
type PropertyFrom = time.Time

// References defines model for References.
type References struct {
	Countries       *[]Country        `json:"countries,omitempty"`
	Datetimeformats *[]DateTimeFormat `json:"datetimeformats,omitempty"`
	Numberformats   *[]NumberFormat   `json:"numberformats,omitempty"`
	Phonecodes      *[]PhoneCode      `json:"phonecodes,omitempty"`
	Regions         *[]Region         `json:"regions,omitempty"`
	Timezones       *[]Timezone       `json:"timezones,omitempty"`
}

// Region defines model for Region.
type Region struct {
	// Countryid Corresponding country identifier
	Countryid *int `json:"countryid,omitempty"`

	// Datetimeformatid Corresponding datetimeformat identifier
	Datetimeformatid *int `json:"datetimeformatid,omitempty"`

	// Description Region description
	Description *string `json:"description,omitempty"`

	// Id Region identifier
	Id *int `json:"id,omitempty"`

	// Numberformatid Corresponding numberformat identifier
	Numberformatid *int `json:"numberformatid,omitempty"`

	// Timezoneid Corresponding timezon identifier
	Timezoneid *int `json:"timezoneid,omitempty"`
}

// ReportPerformance defines model for ReportPerformance.
type ReportPerformance struct {
	Report *struct {
		// CheckId ID of the check
		CheckId *PropertyCheckID `json:"check_id,omitempty"`

		// Intervals Intervals for which the measurements were performed.
		Intervals *[]struct {
			// AverageResponse Average response times in milliseconds
			AverageResponse *AverageResponse `json:"average_response,omitempty"`

			// Downtime Amount of time when the check was down within given interval (only with the `include_uptime` flag)
			Downtime *Downtime `json:"downtime,omitempty"`

			// From Interval start. The format is `RFC 3339`
			From  *PropertyFrom `json:"from,omitempty"`
			Steps *[]struct {
				// AverageResponse Average response times in milliseconds
				AverageResponse *AverageResponse `json:"average_response,omitempty"`

				// Step Step is a struct describing a single step of a TMS check
				Step *Step `json:"step,omitempty"`
			} `json:"steps,omitempty"`

			// Unmonitored Amount of time when there is no specific data about check status (up/down) within given interval (only with the `include_uptime` flag)
			Unmonitored *Unmonitored `json:"unmonitored,omitempty"`

			// Uptime Amount of time when the check was up within given interval (only with the `include_uptime` flag)
			Uptime *Uptime `json:"uptime,omitempty"`
		} `json:"intervals,omitempty"`

		// Name Name of the check
		Name *PropertyCheckName `json:"name,omitempty"`

		// Resolution Size of a time bucket for which the results are calculated
		Resolution *ReportPerformanceReportResolution `json:"resolution,omitempty"`
	} `json:"report,omitempty"`
}

// ReportPerformanceReportResolution Size of a time bucket for which the results are calculated
type ReportPerformanceReportResolution string

// ReportStatusAll defines model for ReportStatusAll.
type ReportStatusAll struct {
	Report *[]CheckStatusID `json:"report,omitempty"`
}

// ReportStatusSingle defines model for ReportStatusSingle.
type ReportStatusSingle struct {
	CheckStatusID *CheckStatusID `json:"report,omitempty"`
}

// SMSes defines model for SMSes.
type SMSes = []struct {
	// CountryCode Country code
	CountryCode *string `json:"country_code,omitempty"`

	// Number Phone number
	Number *string `json:"number,omitempty"`

	// Provider Provider
	Provider *string `json:"provider,omitempty"`

	// Severity Contact target's severity level
	Severity *string `json:"severity,omitempty"`
}

// SMTP defines model for SMTP.
type SMTP struct {
	// Auth (smtp specific) Username and password for target HTTP authentication.
	Auth *string `json:"auth,omitempty"`

	// Encryption (smtp specific) Connection encryption
	Encryption *bool `json:"encryption,omitempty"`

	// Host Target host
	Host string `json:"host"`

	// Ipv6 Use ipv6 instead of ipv4
	Ipv6 *bool `json:"ipv6,omitempty"`

	// Port (smtp specific) Target port
	Port *int `json:"port,omitempty"`

	// ProbeFilters Filters used for probe selections. Comma separated key:value pairs. Currently only region is supported. Possible values are 'EU', 'NA', 'APAC' and 'LATAM'.
	ProbeFilters *int `json:"probe_filters,omitempty"`

	// Probeid Probe identifier
	Probeid *int `json:"probeid,omitempty"`

	// ResponsetimeThreshold Triggers a down alert if the response time exceeds threshold specified in ms (Not available for Starter and Free plans.)
	ResponsetimeThreshold *int `json:"responsetime_threshold,omitempty"`

	// Stringtoexpect (smtp specific) String to expect in response
	Stringtoexpect *string  `json:"stringtoexpect,omitempty"`
	Type           SMTPType `json:"type"`
}

// SMTPType defines model for SMTP.Type.
type SMTPType string

// SmtpAttributesBase defines model for SmtpAttributesBase.
type SmtpAttributesBase struct {
	// Encryption Connection encryption
	Encryption *bool `json:"encryption,omitempty"`

	// Port Target port
	Port *int `json:"port,omitempty"`

	// Stringtoexpect String to expect in response
	Stringtoexpect *string `json:"stringtoexpect,omitempty"`
}

// SmtpAttributesGet defines model for SmtpAttributesGet.
type SmtpAttributesGet = SmtpAttributesBase

// SmtpAttributesSet defines model for SmtpAttributesSet.
type SmtpAttributesSet = SmtpAttributesBase

// State defines model for State.
type State struct {
	// ErrorInStep Number of step in which an error has occured (only if `status` is `down`)
	ErrorInStep *int `json:"error_in_step,omitempty"`

	// From Interval start. The format is `RFC 3339`
	From *PropertyFrom `json:"from,omitempty"`

	// Message Error message for the step that is failing (only if `status` is `down`)
	Message *string `json:"message,omitempty"`

	// Status Interval status
	Status *StateStatus `json:"status,omitempty"`

	// To Interval end. The format is `RFC 3339`
	To *time.Time `json:"to,omitempty"`
}

// StateStatus Interval status
type StateStatus string

// Step Step is a struct describing a single step of a TMS check
type Step struct {
	// Args Parameters for the operation
	// The actual parameters required depend on the chosen operation
	Parameters *struct {
		Checkbox *string `json:"checkbox,omitempty"`
		Element  *string `json:"element,omitempty"`
		Form     *string `json:"form,omitempty"`
		Input    *string `json:"input,omitempty"`
		Option   *string `json:"option,omitempty"`
		Password *string `json:"password,omitempty"`
		Radio    *string `json:"radio,omitempty"`
		Seconds  *string `json:"seconds,omitempty"`
		Select   *string `json:"select,omitempty"`
		URL      *string `json:"url,omitempty"`
		Username *string `json:"username,omitempty"`
		Value    *string `json:"value,omitempty"`
	} `json:"args,omitempty"`

	// Fn Operation to be done
	Function *string `json:"fn,omitempty"`
}

// TCP defines model for TCP.
type TCP struct {
	// Host Target host
	Host string `json:"host"`

	// Ipv6 Use ipv6 instead of ipv4
	Ipv6 *bool `json:"ipv6,omitempty"`

	// Port (tcp specific) Target port
	Port int `json:"port"`

	// ProbeFilters Filters used for probe selections. Comma separated key:value pairs. Currently only region is supported. Possible values are 'EU', 'NA', 'APAC' and 'LATAM'.
	ProbeFilters *int `json:"probe_filters,omitempty"`

	// Probeid Probe identifier
	Probeid *int `json:"probeid,omitempty"`

	// ResponsetimeThreshold Triggers a down alert if the response time exceeds threshold specified in ms (Not available for Starter and Free plans.)
	ResponsetimeThreshold *int `json:"responsetime_threshold,omitempty"`

	// Stringtoexpect (tcp specific) String to expect in response
	Stringtoexpect *string `json:"stringtoexpect,omitempty"`

	// Stringtosend (tcp specific) String to send
	Stringtosend *string `json:"stringtosend,omitempty"`
	Type         TCPType `json:"type"`
}

// TCPType defines model for TCP.Type.
type TCPType string

// Tag defines model for Tag.
type Tag struct {
	Count *int    `json:"count,omitempty"`
	Name  *string `json:"name,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// TcpAttributes defines model for TcpAttributes.
type TcpAttributes struct {
	// Port Target port
	Port int `json:"port"`

	// Stringtoexpect String to expect in response
	Stringtoexpect *string `json:"stringtoexpect,omitempty"`

	// Stringtosend String to send
	Stringtosend *string `json:"stringtosend,omitempty"`
}

// TeamID defines model for Team_ID.
type TeamID struct {
	Team *AlertingTeamID `json:"team,omitempty"`
}

// Teams defines model for Teams.
type Teams struct {
	Teams *[]AlertingTeams `json:"teams,omitempty"`
}

// Timezone defines model for Timezone.
type Timezone struct {
	// Description Time zone description
	Description *string `json:"description,omitempty"`

	// Id Time zone identifier
	Id *int `json:"id,omitempty"`
}

// Traceroute defines model for Traceroute.
type Traceroute struct {
	Traceroute *TracerouteData `json:"traceroute,omitempty"`
}

// TracerouteData defines model for TracerouteData.
type TracerouteData struct {
	// Probedescription Probe description
	Probedescription *string `json:"probedescription,omitempty"`

	// Probeid Probe identifier
	Probeid *int `json:"probeid,omitempty"`

	// Result Traceroute output
	Result *string `json:"result,omitempty"`
}

// UDP defines model for UDP.
type UDP struct {
	// Host Target host
	Host string `json:"host"`

	// Ipv6 Use ipv6 instead of ipv4
	Ipv6 *bool `json:"ipv6,omitempty"`

	// Port (udp specific) Target port
	Port int `json:"port"`

	// ProbeFilters Filters used for probe selections. Comma separated key:value pairs. Currently only region is supported. Possible values are 'EU', 'NA', 'APAC' and 'LATAM'.
	ProbeFilters *int `json:"probe_filters,omitempty"`

	// Probeid Probe identifier
	Probeid *int `json:"probeid,omitempty"`

	// ResponsetimeThreshold Triggers a down alert if the response time exceeds threshold specified in ms (Not available for Starter and Free plans.)
	ResponsetimeThreshold *int `json:"responsetime_threshold,omitempty"`

	// Stringtoexpect (udp specific) String to expect in response
	Stringtoexpect *string `json:"stringtoexpect,omitempty"`

	// Stringtosend (udp specific) String to send
	Stringtosend *string `json:"stringtosend,omitempty"`
	Type         UDPType `json:"type"`
}

// UDPType defines model for UDP.Type.
type UDPType string

// UdpAttributes defines model for UdpAttributes.
type UdpAttributes struct {
	// Port Target port
	Port int `json:"port"`

	// Stringtoexpect String to expect in response
	Stringtoexpect string `json:"stringtoexpect"`

	// Stringtosend String to send
	Stringtosend string `json:"stringtosend"`
}

// Unmonitored Amount of time when there is no specific data about check status (up/down) within given interval (only with the `include_uptime` flag)
type Unmonitored = int64

// UpdateContact defines model for UpdateContact.
type UpdateContact struct {
	// Name Contact name
	Name                string                            `json:"name"`
	NotificationTargets UpdateContact_NotificationTargets `json:"notification_targets"`

	// Paused Pause contact
	Paused UpdateContactPaused `json:"paused"`
}

// UpdateContact_NotificationTargets defines model for UpdateContact.NotificationTargets.
type UpdateContact_NotificationTargets struct {
	union json.RawMessage
}

// UpdateContactPaused Pause contact
type UpdateContactPaused bool

// UpdateTeam defines model for UpdateTeam.
type UpdateTeam struct {
	// MemberIds IDs of contacts to be the members of this team
	MemberIds []int64 `json:"member_ids"`

	// Name Team name
	Name string `json:"name"`
}

// Uptime Amount of time when the check was up within given interval (only with the `include_uptime` flag)
type Uptime = int64

// Weeks defines model for Weeks.
type Weeks struct {
	Weeks *SummaryPerformanceResults `json:"weeks,omitempty"`
}

// ActionsAlertsEntry defines model for actions_alerts_entry.
type ActionsAlertsEntry struct {
	Actions *struct {
		// Alerts Alert entry
		Alerts *[]struct {
			// Charged True if your account was charged for this message
			Charged *string `json:"charged,omitempty"`

			// Checkid Identifier of alerted user
			Checkid *string `json:"checkid,omitempty"`

			// Messagefull Full message body
			Messagefull *string `json:"messagefull,omitempty"`

			// Messageshort Short description of message
			Messageshort *string `json:"messageshort,omitempty"`

			// Sentto Target address, phone number etc
			Sentto *string `json:"sentto,omitempty"`

			// Status Alert status
			Status *ActionsAlertsEntryActionsAlertsStatus `json:"status,omitempty"`

			// Time Time of alert generation. Format UNIX time
			Time *string `json:"time,omitempty"`

			// Userid Identifier of alerted user
			Userid *string `json:"userid,omitempty"`

			// Username Name of alerted user
			Username *string `json:"username,omitempty"`

			// Via Alert medium. apns - iphone, agcm - android
			Via *ActionsAlertsEntryActionsAlertsVia `json:"via,omitempty"`
		} `json:"alerts,omitempty"`
	} `json:"actions,omitempty"`
}

// ActionsAlertsEntryActionsAlertsStatus Alert status
type ActionsAlertsEntryActionsAlertsStatus string

// ActionsAlertsEntryActionsAlertsVia Alert medium. apns - iphone, agcm - android
type ActionsAlertsEntryActionsAlertsVia string

// ActionsCheckids defines model for actions_checkids.
type ActionsCheckids = string

// ActionsFrom defines model for actions_from.
type ActionsFrom = int

// ActionsLimit defines model for actions_limit.
type ActionsLimit = int

// ActionsOffset defines model for actions_offset.
type ActionsOffset = int

// ActionsStatus defines model for actions_status.
type ActionsStatus = string

// ActionsTo defines model for actions_to.
type ActionsTo = int

// ActionsUserids defines model for actions_userids.
type ActionsUserids = string

// ActionsVia defines model for actions_via.
type ActionsVia = string

// AnalysisAnalysisid defines model for analysis_analysisid.
type AnalysisAnalysisid = int

// AnalysisCheckid defines model for analysis_checkid.
type AnalysisCheckid = int

// AnalysisFrom defines model for analysis_from.
type AnalysisFrom = int

// AnalysisLimit defines model for analysis_limit.
type AnalysisLimit = int

// AnalysisOffset defines model for analysis_offset.
type AnalysisOffset = int

// AnalysisRespAttrs defines model for analysis_resp_attrs.
type AnalysisRespAttrs struct {
	Analysis *[]struct {
		// Id Analysis id
		Id *int `json:"id,omitempty"`

		// Timeconfirmtest Time of the confirmation test that performed the error analysis
		Timeconfirmtest *int `json:"timeconfirmtest,omitempty"`

		// Timefirsttest Time of test that initiated the confirmation test
		Timefirsttest *int `json:"timefirsttest,omitempty"`
	} `json:"analysis,omitempty"`
}

// AnalysisTo defines model for analysis_to.
type AnalysisTo = int

// CreditsRespAttrs defines model for credits_resp_attrs.
type CreditsRespAttrs struct {
	Credits *struct {
		// Autofillsms Auto fill SMS
		Autofillsms *bool `json:"autofillsms,omitempty"`

		// AutofillsmsAmount The amount of sms to purchase when "autofillsms_when_left" is triggered
		AutofillsmsAmount *int `json:"autofillsms_amount,omitempty"`

		// AutofillsmsWhenLeft The amount of sms left that is going to trigger purchase of sms
		AutofillsmsWhenLeft *int `json:"autofillsms_when_left,omitempty"`

		// Availablechecks Free check slots available for new checks
		Availablechecks *int `json:"availablechecks,omitempty"`

		// Availablerumsites Open RUM site slots available
		Availablerumsites *int `json:"availablerumsites,omitempty"`

		// Availablesms SMS credits remaining on this account
		Availablesms *int `json:"availablesms,omitempty"`

		// Availablesmstests SMS provider tests remaining on this account
		Availablesmstests *int `json:"availablesmstests,omitempty"`

		// Checklimit Total number of check slots on this account
		Checklimit *int `json:"checklimit,omitempty"`

		// MaxSmsOverage The amount of overage SMSes that may be used, or null if SMS overage is not enabled.
		MaxSmsOverage *int `json:"max_sms_overage,omitempty"`

		// Maxrumfilters Number of maximum rum filters
		Maxrumfilters *int `json:"maxrumfilters,omitempty"`

		// Maxrumpageviews Number of maximum pageviews per month
		Maxrumpageviews *int `json:"maxrumpageviews,omitempty"`

		// Useddefault Total number of default check slots
		Useddefault *int `json:"useddefault,omitempty"`

		// Usedrumsites Number of used RUM sites
		Usedrumsites *int `json:"usedrumsites,omitempty"`

		// Usedtransaction Total number of transaction check slots
		Usedtransaction *int `json:"usedtransaction,omitempty"`
	} `json:"credits,omitempty"`
}

// MaintenanceOccurrencesDelete defines model for maintenance.occurrences_delete.
type MaintenanceOccurrencesDelete struct {
	// Occurrenceids Comma-separated list of identifiers of maintenance occurrences to delete.
	Occurrenceids []int `json:"occurrenceids"`
}

// MaintenanceOccurrencesDeleteRespAttrs defines model for maintenance.occurrences_delete_resp_attrs.
type MaintenanceOccurrencesDeleteRespAttrs struct {
	// Message Result description
	Message *string `json:"message,omitempty"`
}

// MaintenanceOccurrencesFrom defines model for maintenance.occurrences_from.
type MaintenanceOccurrencesFrom = int

// MaintenanceOccurrencesId defines model for maintenance.occurrences_id.
type MaintenanceOccurrencesId = int

// MaintenanceOccurrencesIdDeleteRespAttrs defines model for maintenance.occurrences_id_delete_resp_attrs.
type MaintenanceOccurrencesIdDeleteRespAttrs struct {
	// Message Result description
	Message *string `json:"message,omitempty"`
}

// MaintenanceOccurrencesIdPut defines model for maintenance.occurrences_id_put.
type MaintenanceOccurrencesIdPut struct {
	// From Beginning of the maintenance occurrence. Format UNIX time. (Only future allowed. Use 1 for the current timestamp.)
	From *int `json:"from,omitempty"`

	// To End of the maintenance occurrence. Format UNIX time. (Only future allowed. Use 1 for the current timestamp.)
	To *int `json:"to,omitempty"`
}

// MaintenanceOccurrencesIdPutRespAttrs defines model for maintenance.occurrences_id_put_resp_attrs.
type MaintenanceOccurrencesIdPutRespAttrs struct {
	// Message Modification result description
	Message *string `json:"message,omitempty"`
}

// MaintenanceOccurrencesIdRespAttrs defines model for maintenance.occurrences_id_resp_attrs.
type MaintenanceOccurrencesIdRespAttrs struct {
	Occurrence *struct {
		// From Beginning of the occurrence. Format UNIX timestamp.
		From *float32 `json:"from,omitempty"`

		// Id Identifier of an occurence.
		Id *float32 `json:"id,omitempty"`

		// Maintenanceid Identifier of the related maintenance window.
		Maintenanceid *float32 `json:"maintenanceid,omitempty"`

		// To The end of the occurrence. Format UNIX timestamp.
		To *float32 `json:"to,omitempty"`
	} `json:"occurrence,omitempty"`
}

// MaintenanceOccurrencesMaintenanceid defines model for maintenance.occurrences_maintenanceid.
type MaintenanceOccurrencesMaintenanceid = int

// MaintenanceOccurrencesRespAttrs defines model for maintenance.occurrences_resp_attrs.
type MaintenanceOccurrencesRespAttrs struct {
	// Occurrences A list of maintenance occurrences.
	Occurrences *[]struct {
		// From Beginning of the occurrence. Format UNIX timestamp.
		From *float32 `json:"from,omitempty"`

		// Id Identifier of an occurence.
		Id *float32 `json:"id,omitempty"`

		// Maintenanceid Identifier of the related maintenance window.
		Maintenanceid *float32 `json:"maintenanceid,omitempty"`

		// To The end of the occurrence. Format UNIX timestamp.
		To *float32 `json:"to,omitempty"`
	} `json:"occurrences,omitempty"`
}

// MaintenanceOccurrencesTo defines model for maintenance.occurrences_to.
type MaintenanceOccurrencesTo = int

// MaintenanceDeleteRespAttrs defines model for maintenance_delete_resp_attrs.
type MaintenanceDeleteRespAttrs struct {
	// Message Result description
	Message *string `json:"message,omitempty"`
}

// MaintenanceId defines model for maintenance_id.
type MaintenanceId = int

// MaintenanceIdDeleteRespAttrs defines model for maintenance_id_delete_resp_attrs.
type MaintenanceIdDeleteRespAttrs struct {
	// Message Result description
	Message *string `json:"message,omitempty"`
}

// MaintenanceIdPut defines model for maintenance_id_put.
type MaintenanceIdPut struct {
	// Description Description
	Description *string `json:"description,omitempty"`

	// Effectiveto Recurrence end. Format UNIX time. Default: equal to `to`. (Only future allowed. Use 1 for the current timestamp.)
	Effectiveto *int `json:"effectiveto,omitempty"`

	// From Initial maintenance window start. Format UNIX time. (Only future allowed. Use 1 for the current timestamp.)
	From *int `json:"from,omitempty"`

	// Recurrencetype Type of recurrence
	Recurrencetype *MaintenanceIdPutRecurrencetype `json:"recurrencetype,omitempty"`

	// Repeatevery Repeat every n-th day/week/month
	Repeatevery *int `json:"repeatevery,omitempty"`

	// Tmsids Identifiers of transaction checks to assign to the maintenance window - Comma separated Integers
	Tmsids *[]int `json:"tmsids,omitempty"`

	// To Initial maintenance window end. Format UNIX time. (Only future allowed. Use 1 for the current timestamp.)
	To *int `json:"to,omitempty"`

	// Uptimeids Identifiers of uptime checks to assign to the maintenance window - Comma separated Integers
	Uptimeids *[]int `json:"uptimeids,omitempty"`
}

// MaintenanceIdPutRecurrencetype Type of recurrence
type MaintenanceIdPutRecurrencetype string

// MaintenanceIdPutRespAttrs defines model for maintenance_id_put_resp_attrs.
type MaintenanceIdPutRespAttrs struct {
	// Message Modification result description
	Message *string `json:"message,omitempty"`
}

// MaintenanceIdRespAttrs defines model for maintenance_id_resp_attrs.
type MaintenanceIdRespAttrs struct {
	Maintenance *struct {
		// Checks Connected checks
		Checks *struct {
			// Tms Id of connected TMS check
			Tms *[]float32 `json:"tms,omitempty"`

			// Uptime Id of connected Uptime check
			Uptime *[]float32 `json:"uptime,omitempty"`
		} `json:"checks,omitempty"`

		// Description Description
		Description *string `json:"description,omitempty"`

		// Effectiveto Recurrence end. Format UNIX time.
		Effectiveto *float32 `json:"effectiveto,omitempty"`

		// From Initial maintenance window start. Format UNIX time.
		From *float32 `json:"from,omitempty"`

		// Id Maintenance window identifier
		Id *float32 `json:"id,omitempty"`

		// Recurrencetype Type of recurrence.
		Recurrencetype *string `json:"recurrencetype,omitempty"`

		// Repeatevery Repeat every n-th day/week/month
		Repeatevery *float32 `json:"repeatevery,omitempty"`

		// To Initial maintenance window end. Format UNIX time.
		To *float32 `json:"to,omitempty"`
	} `json:"maintenance,omitempty"`
}

// MaintenanceLimit defines model for maintenance_limit.
type MaintenanceLimit = int

// MaintenanceOffset defines model for maintenance_offset.
type MaintenanceOffset = int

// MaintenanceOrder defines model for maintenance_order.
type MaintenanceOrder string

// MaintenanceOrderby defines model for maintenance_orderby.
type MaintenanceOrderby string

// MaintenancePost defines model for maintenance_post.
type MaintenancePost struct {
	// Description Description
	Description string `json:"description"`

	// Effectiveto Recurrence end. Format UNIX time. Default: equal to `to`. (Only future allowed. Use 1 for the current timestamp.)
	Effectiveto *int `json:"effectiveto,omitempty"`

	// From Initial maintenance window start. Format UNIX time. (Only future allowed. Use 1 for the current timestamp.)
	From int `json:"from"`

	// Recurrencetype Type of recurrence.
	Recurrencetype *MaintenancePostRecurrencetype `json:"recurrencetype,omitempty"`

	// Repeatevery Repeat every n-th day/week/month
	Repeatevery *int `json:"repeatevery,omitempty"`

	// Tmsids Identifiers of transaction checks to assign to the maintenance window - Comma separated Integers
	Tmsids *[]int `json:"tmsids,omitempty"`

	// To Initial maintenance window end. Format UNIX time. (Only future allowed. Use 1 for the current timestamp.)
	To int `json:"to"`

	// Uptimeids Identifiers of uptime checks to assign to the maintenance window - Comma separated Integers
	Uptimeids *[]int `json:"uptimeids,omitempty"`
}

// MaintenancePostRecurrencetype Type of recurrence.
type MaintenancePostRecurrencetype string

// MaintenancePostRespAttrs defines model for maintenance_post_resp_attrs.
type MaintenancePostRespAttrs struct {
	Maintenance *struct {
		// Id Unique id of the new maintenance window
		Id *int `json:"id,omitempty"`
	} `json:"maintenance,omitempty"`
}

// MaintenanceRespAttrs defines model for maintenance_resp_attrs.
type MaintenanceRespAttrs struct {
	// Maintenance A list of maintenance windows
	Maintenance *[]struct {
		// Checks Connected checks
		Checks *struct {
			// Tms List of connected Transaction checks
			Tms *[]int `json:"tms,omitempty"`

			// Uptime List of connected Uptime checks
			Uptime *[]int `json:"uptime,omitempty"`
		} `json:"checks,omitempty"`

		// Description Description
		Description *string `json:"description,omitempty"`

		// Effectiveto Recurrence end. Format UNIX time.
		Effectiveto *int `json:"effectiveto,omitempty"`

		// From Initial maintenance window start. Format UNIX time.
		From *int `json:"from,omitempty"`

		// Id Maintenance window identifier
		Id *int `json:"id,omitempty"`

		// Recurrencetype Type of recurrence.
		Recurrencetype *MaintenanceRespAttrsMaintenanceRecurrencetype `json:"recurrencetype,omitempty"`

		// Repeatevery Repeat every n-th day/week/month
		Repeatevery *int `json:"repeatevery,omitempty"`

		// To Initial maintenance window end. Format UNIX time.
		To *int `json:"to,omitempty"`
	} `json:"maintenance,omitempty"`
}

// MaintenanceRespAttrsMaintenanceRecurrencetype Type of recurrence.
type MaintenanceRespAttrsMaintenanceRecurrencetype string

// ResultsCheckid defines model for results_checkid.
type ResultsCheckid = int

// ResultsFrom defines model for results_from.
type ResultsFrom = int

// ResultsIncludeanalysis defines model for results_includeanalysis.
type ResultsIncludeanalysis = bool

// ResultsLimit defines model for results_limit.
type ResultsLimit = int

// ResultsMaxresponse defines model for results_maxresponse.
type ResultsMaxresponse = int

// ResultsMinresponse defines model for results_minresponse.
type ResultsMinresponse = int

// ResultsOffset defines model for results_offset.
type ResultsOffset = int

// ResultsProbes Default: all probes
type ResultsProbes = string

// ResultsRespAttrs defines model for results_resp_attrs.
type ResultsRespAttrs struct {
	// Activeprobes For your convenience, a list of used probes that produced the showed results
	Activeprobes *[]float32 `json:"activeprobes,omitempty"`
	Results      *[]struct {
		// Probeid Probe identifier
		Probeid *float32 `json:"probeid,omitempty"`

		// Responsetime Response time (in milliseconds) (Will be 0 if no response was received)
		Responsetime *float32 `json:"responsetime,omitempty"`

		// Status Result status
		Status *ResultsRespAttrsResultsStatus `json:"status,omitempty"`

		// Statusdesc Short status description
		Statusdesc *string `json:"statusdesc,omitempty"`

		// Statusdesclong Long status description
		Statusdesclong *string `json:"statusdesclong,omitempty"`

		// Time Time when test was performed. Format is UNIX timestamp
		Time *float32 `json:"time,omitempty"`
	} `json:"results,omitempty"`
}

// ResultsRespAttrsResultsStatus Result status
type ResultsRespAttrsResultsStatus string

// ResultsStatus Default: all statuses
type ResultsStatus = string

// ResultsTo defines model for results_to.
type ResultsTo = int

// SingleResp defines model for single_resp.
type SingleResp struct {
	Result *struct {
		// Probedesc Probe description
		Probedesc *string `json:"probedesc,omitempty"`

		// Probeid Probe identifier
		Probeid *int `json:"probeid,omitempty"`

		// Responsetime Response time in milliseconds
		Responsetime *int `json:"responsetime,omitempty"`

		// Status Test result status (up, down)
		Status *string `json:"status,omitempty"`

		// Statusdesc Short status description
		Statusdesc *string `json:"statusdesc,omitempty"`

		// Statusdesclong Long status description
		Statusdesclong *string `json:"statusdesclong,omitempty"`
	} `json:"result,omitempty"`
}

// SummaryAverageBycountry defines model for summary.average_bycountry.
type SummaryAverageBycountry = bool

// SummaryAverageByprobe defines model for summary.average_byprobe.
type SummaryAverageByprobe = bool

// SummaryAverageCheckid defines model for summary.average_checkid.
type SummaryAverageCheckid = int

// SummaryAverageFrom defines model for summary.average_from.
type SummaryAverageFrom = int

// SummaryAverageIncludeuptime defines model for summary.average_includeuptime.
type SummaryAverageIncludeuptime = bool

// SummaryAverageProbes defines model for summary.average_probes.
type SummaryAverageProbes = string

// SummaryAverageTo defines model for summary.average_to.
type SummaryAverageTo = int

// SummaryHoursofdayCheckid defines model for summary.hoursofday_checkid.
type SummaryHoursofdayCheckid = int

// SummaryHoursofdayFrom defines model for summary.hoursofday_from.
type SummaryHoursofdayFrom = int

// SummaryHoursofdayProbes defines model for summary.hoursofday_probes.
type SummaryHoursofdayProbes = string

// SummaryHoursofdayRespAttrs defines model for summary.hoursofday_resp_attrs.
type SummaryHoursofdayRespAttrs struct {
	Hoursofday *[]struct {
		// Avgresponse Average response time (in milliseconds) for this hour of the day
		Avgresponse *float32 `json:"avgresponse,omitempty"`

		// Hour Hour of day (0-23). Please note that if data is missing for an individual hour, it's entry will not be included in the result.
		Hour *float32 `json:"hour,omitempty"`
	} `json:"hoursofday,omitempty"`
}

// SummaryHoursofdayTo defines model for summary.hoursofday_to.
type SummaryHoursofdayTo = int

// SummaryHoursofdayUselocaltime defines model for summary.hoursofday_uselocaltime.
type SummaryHoursofdayUselocaltime = bool

// SummaryOutageCheckid defines model for summary.outage_checkid.
type SummaryOutageCheckid = int

// SummaryOutageFrom defines model for summary.outage_from.
type SummaryOutageFrom = int

// SummaryOutageOrder defines model for summary.outage_order.
type SummaryOutageOrder string

// SummaryOutageRespAttrs defines model for summary.outage_resp_attrs.
type SummaryOutageRespAttrs struct {
	Summary *struct {
		States *[]struct {
			// Status Interval status
			Status *SummaryOutageRespAttrsSummaryStatesStatus `json:"status,omitempty"`

			// Timefrom Interval start. Format UNIX timestamp
			Timefrom *float32 `json:"timefrom,omitempty"`

			// Timeto Interval end. Format UNIX timestamp
			Timeto *float32 `json:"timeto,omitempty"`
		} `json:"states,omitempty"`
	} `json:"summary,omitempty"`
}

// SummaryOutageRespAttrsSummaryStatesStatus Interval status
type SummaryOutageRespAttrsSummaryStatesStatus string

// SummaryOutageTo defines model for summary.outage_to.
type SummaryOutageTo = int

// SummaryPerformanceCheckid defines model for summary.performance_checkid.
type SummaryPerformanceCheckid = int

// SummaryPerformanceFrom defines model for summary.performance_from.
type SummaryPerformanceFrom = int

// SummaryPerformanceIncludeuptime defines model for summary.performance_includeuptime.
type SummaryPerformanceIncludeuptime = bool

// SummaryPerformanceOrder defines model for summary.performance_order.
type SummaryPerformanceOrder string

// SummaryPerformanceProbes defines model for summary.performance_probes.
type SummaryPerformanceProbes = string

// SummaryPerformanceResolution defines model for summary.performance_resolution.
type SummaryPerformanceResolution string

// SummaryPerformanceRespAttrs defines model for summary.performance_resp_attrs.
type SummaryPerformanceRespAttrs struct {
	Summary *SummaryPerformanceRespAttrs_Summary `json:"summary,omitempty"`
}

// SummaryPerformanceRespAttrs_Summary defines model for SummaryPerformanceRespAttrs.Summary.
type SummaryPerformanceRespAttrs_Summary struct {
	union json.RawMessage
}

// SummaryPerformanceResults defines model for summary.performance_results.
type SummaryPerformanceResults = []struct {
	// Avgresponse Average response time for this interval in milliseconds
	Avgresponse *float32 `json:"avgresponse,omitempty"`

	// Downtime Total downtime for this interval in seconds
	Downtime *float32 `json:"downtime,omitempty"`

	// Starttime Interval start. Format UNIX timestamp
	Starttime *float32 `json:"starttime,omitempty"`

	// Unmonitored Total unmonitored time for this interval in seconds
	Unmonitored *float32 `json:"unmonitored,omitempty"`

	// Uptime Total uptime for this interval in seconds
	Uptime *float32 `json:"uptime,omitempty"`
}

// SummaryPerformanceTo defines model for summary.performance_to.
type SummaryPerformanceTo = int

// SummaryProbesCheckid defines model for summary.probes_checkid.
type SummaryProbesCheckid = int

// SummaryProbesFrom defines model for summary.probes_from.
type SummaryProbesFrom = int

// SummaryProbesRespAttrs defines model for summary.probes_resp_attrs.
type SummaryProbesRespAttrs struct {
	Probes *[]int `json:"probes,omitempty"`
}

// SummaryProbesTo defines model for summary.probes_to.
type SummaryProbesTo = int

// SummaryRespAttrs defines model for summary_resp_attrs.
type SummaryRespAttrs struct {
	Summary *struct {
		Responsetime *struct {
			Avgresponse *SummaryRespAttrs_Summary_Responsetime_Avgresponse `json:"avgresponse,omitempty"`

			// From Start time of period
			From *float32 `json:"from,omitempty"`

			// To End time of period
			To *float32 `json:"to,omitempty"`
		} `json:"responsetime,omitempty"`
		Status *struct {
			// Totaldown Total downtime in seconds (Please note that the accuracy of this value is depending on your check resolution).
			Totaldown *int `json:"totaldown,omitempty"`

			// Totalunknown Total unknown/unmonitored/paused in seconds (Please note that the accuracy of this value is depending on your check resolution. Also note that time before the check was created counts as unknown).
			Totalunknown *int `json:"totalunknown,omitempty"`

			// Totalup Total uptime in seconds (Please note that the accuracy of this value is depending on your check resolution).
			Totalup *int `json:"totalup,omitempty"`
		} `json:"status,omitempty"`
	} `json:"summary,omitempty"`
}

// SummaryRespAttrsSummaryResponsetimeAvgresponse0 Total average response time in milliseconds
type SummaryRespAttrsSummaryResponsetimeAvgresponse0 = int

// SummaryRespAttrsSummaryResponsetimeAvgresponse1 defines model for .
type SummaryRespAttrsSummaryResponsetimeAvgresponse1 = []struct {
	// Avgresponse Group average response time in milliseconds
	Avgresponse *int `json:"avgresponse,omitempty"`

	// Countryiso Country group ISO code
	Countryiso *string `json:"countryiso,omitempty"`

	// Probeid Probe group probe identifier
	Probeid *int `json:"probeid,omitempty"`
}

// SummaryRespAttrs_Summary_Responsetime_Avgresponse defines model for SummaryRespAttrs.Summary.Responsetime.Avgresponse.
type SummaryRespAttrs_Summary_Responsetime_Avgresponse struct {
	union json.RawMessage
}

// CheckAddedResponse defines model for checkAddedResponse.
type CheckAddedResponse = CheckSimple

// CheckDeletedResponse defines model for checkDeletedResponse.
type CheckDeletedResponse struct {
	Message *string `json:"message,omitempty"`
}

// CheckDetailed CheckWithoutIDGET is a struct describing a TMS check data common for displaying a check
type CheckDetailed = CheckWithoutIDGET

// CheckModifiedResponse CheckWithoutIDGET is a struct describing a TMS check data common for displaying a check
type CheckModifiedResponse = CheckWithoutIDGET

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {
	// From Only include actions generated later than this timestamp. Format is UNIX time.
	From *ActionsFrom `form:"from,omitempty" json:"from,omitempty"`

	// To Only include actions generated prior to this timestamp. Format is UNIX time.
	To *ActionsTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Limits the number of returned results to the specified quantity.
	Limit *ActionsLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset for listing.
	Offset *ActionsOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Checkids Comma-separated list of check identifiers. Limit results to actions generated from these checks. Default: all checks.
	Checkids *ActionsCheckids `form:"checkids,omitempty" json:"checkids,omitempty"`

	// Userids Comma-separated list of user identifiers. Limit results to actions sent to these users. Default: all users.
	Userids *ActionsUserids `form:"userids,omitempty" json:"userids,omitempty"`

	// Status Comma-separated list of statuses. Limit results to actions with these statuses. Default: all statuses.
	Status *ActionsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Via Comma-separated list of via mediums. Limit results to actions with these mediums. Default: all mediums.
	Via *ActionsVia `form:"via,omitempty" json:"via,omitempty"`
}

// GetAnalysisCheckidParams defines parameters for GetAnalysisCheckid.
type GetAnalysisCheckidParams struct {
	// Limit Limits the number of returned results to the specified quantity.
	Limit *AnalysisLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset for listing. (Requires limit.)
	Offset *AnalysisOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// From Return only results with timestamp of first test greater or equal to this value. Format is UNIX timestamp.
	From *AnalysisFrom `form:"from,omitempty" json:"from,omitempty"`

	// To Return only results with timestamp of first test less or equal to this value. Format is UNIX timestamp. Default: current timestamp
	To *AnalysisTo `form:"to,omitempty" json:"to,omitempty"`
}

// DeleteChecksJSONBody defines parameters for DeleteChecks.
type DeleteChecksJSONBody = string

// DeleteChecksParams defines parameters for DeleteChecks.
type DeleteChecksParams struct {
	// Delcheckids Comma-separated list of identifiers for checks to be deleted.
	Delcheckids []int `form:"delcheckids" json:"delcheckids"`
}

// GetChecksParams defines parameters for GetChecks.
type GetChecksParams struct {
	// Limit Limits the number of returned probes to the specified quantity. (Max value is 25000)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset for listing. (Requires limit.)
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Showencryption If set, show encryption setting for each check
	Showencryption *bool `form:"showencryption,omitempty" json:"showencryption,omitempty"`

	// IncludeTags Include tag list for each check. Tags can be marked as "a" or "u", for auto tagged or user tagged.
	IncludeTags *bool `form:"include_tags,omitempty" json:"include_tags,omitempty"`

	// IncludeSeverity Include severity level for each check.
	IncludeSeverity *bool `form:"include_severity,omitempty" json:"include_severity,omitempty"`

	// Tags Tag list separated by commas. As an example "nginx,apache" would filter out all responses except those tagged nginx or apache
	Tags *string `form:"tags,omitempty" json:"tags,omitempty"`
}

// PutChecksJSONBody defines parameters for PutChecks.
type PutChecksJSONBody struct {
	// Checkids Comma-separated list of identifiers for checks to be modified. Invalid check identifiers will be ignored. Default: all checks
	Checkids *string `json:"checkids,omitempty"`

	// Paused Use value: true to pause the check(s) and value: false to unpause it(them).
	Paused     *bool                        `json:"paused,omitempty"`
	Resolution *PutChecksJSONBodyResolution `json:"resolution,omitempty"`
}

// PutChecksFormdataBody defines parameters for PutChecks.
type PutChecksFormdataBody struct {
	// Checkids Comma-separated list of identifiers for checks to be modified. Invalid check identifiers will be ignored. Default: all checks
	Checkids *string `form:"checkids,omitempty" json:"checkids,omitempty"`

	// Paused Use value: true to pause the check(s) and value: false to unpause it(them).
	Paused     *bool                            `form:"paused,omitempty" json:"paused,omitempty"`
	Resolution *PutChecksFormdataBodyResolution `form:"resolution,omitempty" json:"resolution,omitempty"`
}

// PutChecksJSONBodyResolution defines parameters for PutChecks.
type PutChecksJSONBodyResolution int

// PutChecksFormdataBodyResolution defines parameters for PutChecks.
type PutChecksFormdataBodyResolution int

// GetChecksCheckidParams defines parameters for GetChecksCheckid.
type GetChecksCheckidParams struct {
	// IncludeTeams Include team connections for check.
	IncludeTeams *bool `form:"include_teams,omitempty" json:"include_teams,omitempty"`
}

// DeleteMaintenanceParams defines parameters for DeleteMaintenance.
type DeleteMaintenanceParams struct {
	// Maintenanceids Comma-separated list of identifiers of maintenance windows to be deleted.
	Maintenanceids []int `form:"maintenanceids" json:"maintenanceids"`
}

// GetMaintenanceParams defines parameters for GetMaintenance.
type GetMaintenanceParams struct {
	// Limit Count of items to list.
	Limit *MaintenanceLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset of the list.
	Offset *MaintenanceOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Orderby Order by the specific property of the maintenance window.
	Orderby *MaintenanceOrderby `form:"orderby,omitempty" json:"orderby,omitempty"`

	// Order Order a-z for asc z-a for desc. Works only if orderby is specified.
	Order *MaintenanceOrder `form:"order,omitempty" json:"order,omitempty"`
}

// DeleteMaintenanceOccurrencesParams defines parameters for DeleteMaintenanceOccurrences.
type DeleteMaintenanceOccurrencesParams struct {
	Occurenceids MaintenanceOccurrencesDelete `form:"occurenceids" json:"occurenceids"`
}

// GetMaintenanceOccurrencesParams defines parameters for GetMaintenanceOccurrences.
type GetMaintenanceOccurrencesParams struct {
	// Maintenanceid Maintenance window identifier. (List only occurrences of a specific maintenance window.)
	Maintenanceid *MaintenanceOccurrencesMaintenanceid `form:"maintenanceid,omitempty" json:"maintenanceid,omitempty"`

	// From Effective from (unix timestamp). (List occurrences which are effective from the specified unix timestamp. If not specified, current timestamp is used.)
	From *MaintenanceOccurrencesFrom `form:"from,omitempty" json:"from,omitempty"`

	// To Effective to (unix timestamp). (List occurrences which are effective to the specified unix timestamp.)
	To *MaintenanceOccurrencesTo `form:"to,omitempty" json:"to,omitempty"`
}

// GetProbesParams defines parameters for GetProbes.
type GetProbesParams struct {
	// Limit Limits the number of returned probes to the specified quantity.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset for listing. (Requires limit.)
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Onlyactive Return only active probes.
	Onlyactive *bool `form:"onlyactive,omitempty" json:"onlyactive,omitempty"`

	// Includedeleted Include old probes that are no longer in use.
	Includedeleted *bool `form:"includedeleted,omitempty" json:"includedeleted,omitempty"`
}

// GetResultsCheckidParams defines parameters for GetResultsCheckid.
type GetResultsCheckidParams struct {
	// To End of period. Format is UNIX timestamp. Default value is current timestamp.
	To *ResultsTo `form:"to,omitempty" json:"to,omitempty"`

	// From Start of period. Format is UNIX timestamp. Default value is 1 day prior to `to`.
	From *ResultsFrom `form:"from,omitempty" json:"from,omitempty"`

	// Probes Filter to only show results from a list of probes. Format is a comma separated list of probe identifiers
	Probes *ResultsProbes `form:"probes,omitempty" json:"probes,omitempty"`

	// Status Filter to only show results with specified statuses. Format is a comma separated list of (`down`, `up`, `unconfirmed`, `unknown`)
	Status *ResultsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Limit Number of results to show (Will be set to 1000 if the provided value is greater than 1000)
	Limit *ResultsLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip (Max value is `43200`)
	Offset *ResultsOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Includeanalysis Attach available root cause analysis identifiers to corresponding results
	Includeanalysis *ResultsIncludeanalysis `form:"includeanalysis,omitempty" json:"includeanalysis,omitempty"`

	// Maxresponse Maximum response time (ms). If set, specified interval must not be larger than 31 days.
	Maxresponse *ResultsMaxresponse `form:"maxresponse,omitempty" json:"maxresponse,omitempty"`

	// Minresponse Minimum response time (ms). If set, specified interval must not be larger than 31 days.
	Minresponse *ResultsMinresponse `form:"minresponse,omitempty" json:"minresponse,omitempty"`
}

// GetSingleParams defines parameters for GetSingle.
type GetSingleParams struct {
	// QueryParameters Query Parameters to chose
	QueryParameters *struct {
		union json.RawMessage
	} `form:"Query Parameters,omitempty" json:"Query Parameters,omitempty"`
}

// GetSummaryAverageCheckidParams defines parameters for GetSummaryAverageCheckid.
type GetSummaryAverageCheckidParams struct {
	// From Start time of period. Format is UNIX timestamp
	From *SummaryAverageFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End time of period. Format is UNIX timestamp. Default is the current time
	To *SummaryAverageTo `form:"to,omitempty" json:"to,omitempty"`

	// Probes Filter to only use results from a list of probes. Format is a comma separated list of probe identifiers. By default result from all probes are shown.
	Probes *SummaryAverageProbes `form:"probes,omitempty" json:"probes,omitempty"`

	// Includeuptime Include uptime information
	Includeuptime *SummaryAverageIncludeuptime `form:"includeuptime,omitempty" json:"includeuptime,omitempty"`

	// Bycountry Split response times into country groups
	Bycountry *SummaryAverageBycountry `form:"bycountry,omitempty" json:"bycountry,omitempty"`

	// Byprobe Split response times into probe groups
	Byprobe *SummaryAverageByprobe `form:"byprobe,omitempty" json:"byprobe,omitempty"`
}

// GetSummaryHoursofdayCheckidParams defines parameters for GetSummaryHoursofdayCheckid.
type GetSummaryHoursofdayCheckidParams struct {
	// From Start time of period. Format is UNIX timestamp. Default value is one week eariler than `to`.
	From *SummaryHoursofdayFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End time of period. Format is UNIX timestamp. Default value is current time.
	To *SummaryHoursofdayTo `form:"to,omitempty" json:"to,omitempty"`

	// Probes Filter to only use results from a list of probes. Format is a comma separated list of probe identifiers. By default all probes results are returned.
	Probes *SummaryHoursofdayProbes `form:"probes,omitempty" json:"probes,omitempty"`

	// Uselocaltime If true, use the user's local time zone for results (from and to parameters should still be specified in UTC). If false, use UTC for results.
	Uselocaltime *SummaryHoursofdayUselocaltime `form:"uselocaltime,omitempty" json:"uselocaltime,omitempty"`
}

// GetSummaryOutageCheckidParams defines parameters for GetSummaryOutageCheckid.
type GetSummaryOutageCheckidParams struct {
	// From Start time of period. Format is UNIX timestamp. Default value is one week earlier than `to`.
	From *SummaryOutageFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End time of period. Format is UNIX timestamp. Default value is the current time.
	To *SummaryOutageTo `form:"to,omitempty" json:"to,omitempty"`

	// Order Sorting order of outages. Ascending or descending.
	Order *SummaryOutageOrder `form:"order,omitempty" json:"order,omitempty"`
}

// GetSummaryPerformanceCheckidParams defines parameters for GetSummaryPerformanceCheckid.
type GetSummaryPerformanceCheckidParams struct {
	// From Start time of period. Format is UNIX timestamp. Default value is 10 intervals earlier than `to`.
	From *SummaryPerformanceFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End time of period. Format is UNIX timestamp. Default value is the current time.
	To *SummaryPerformanceTo `form:"to,omitempty" json:"to,omitempty"`

	// Resolution Interval size
	Resolution *SummaryPerformanceResolution `form:"resolution,omitempty" json:"resolution,omitempty"`

	// Includeuptime Include uptime information.
	Includeuptime *SummaryPerformanceIncludeuptime `form:"includeuptime,omitempty" json:"includeuptime,omitempty"`

	// Probes Filter to only use results from a list of probes. Format is a comma separated list of probe identifiers. Can not be used if includeuptime is set to true. Also note that this can cause intervals to be omitted, since there may be no results from the desired probes in them. By deafult results from all probes are returned.
	Probes *SummaryPerformanceProbes `form:"probes,omitempty" json:"probes,omitempty"`

	// Order Sorting order of sub intervals. Ascending or descending.
	Order *SummaryPerformanceOrder `form:"order,omitempty" json:"order,omitempty"`
}

// GetSummaryProbesCheckidParams defines parameters for GetSummaryProbesCheckid.
type GetSummaryProbesCheckidParams struct {
	// From Start time of period. Format is UNIX timestamp
	From SummaryProbesFrom `form:"from" json:"from"`

	// To End time of period. Format is UNIX timestamp. The defualt value is current time.
	To *SummaryProbesTo `form:"to,omitempty" json:"to,omitempty"`
}

// GetAllChecksParams defines parameters for GetAllChecks.
type GetAllChecksParams struct {
	// ExtendedTags Specifies whether to return an extended tags representation in the response (with type and count).
	ExtendedTags *bool `form:"extended_tags,omitempty" json:"extended_tags,omitempty"`

	// Tags Tag list separated by commas. As an example "nginx,apache" would filter out all responses except those tagged nginx or apache
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// Type Filter to return only checks of a given type (a TMS `script` or a WPM `recording`). If not provided, all checks are returned.
	Type *GetAllChecksParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Limit Limit of returned checks
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset of returned checks
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetAllChecksParamsType defines parameters for GetAllChecks.
type GetAllChecksParamsType string

// GetCheckReportStatusAllParams defines parameters for GetCheckReportStatusAll.
type GetCheckReportStatusAllParams struct {
	// From Start time of period. The format is `RFC 3339` (properly URL-encoded!). The default value is one week earlier than `to`
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End time of period. The format is `RFC 3339` (properly URL-encoded!). The default value is the current time
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// Order Sorting order of outages. Ascending or descending
	Order *GetCheckReportStatusAllParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Limit Limit of returned checks
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Offset of returned checks
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`

	// OmitEmpty Omits checks without any results within specified time
	OmitEmpty *bool `form:"omit_empty,omitempty" json:"omit_empty,omitempty"`
}

// GetCheckReportStatusAllParamsOrder defines parameters for GetCheckReportStatusAll.
type GetCheckReportStatusAllParamsOrder string

// GetCheckReportPerformanceParams defines parameters for GetCheckReportPerformance.
type GetCheckReportPerformanceParams struct {
	// From Start time of period. The format is `RFC 3339` (properly URL-encoded!). The default value is 10 times the resolution (10 hours, 10 day, 10 weeks) earlier than `to`. The value is extended to the nearest hour, day or week, depending on the 'resolution' parameter and configured time zone of the account.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End time of period. The format is `RFC 3339` (properly URL-encoded!). The default value is the current time. The value is extended to the nearest hour, day or week, depending on the 'resolution' parameter and configured time zone of the account.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// Order Sorting order of outages. Ascending or descending
	Order *GetCheckReportPerformanceParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Resolution Size of an interval for which the results are calculated. For the `hour` resolution, the max allowed period is one week and 1 day. For the `day` resolution, the max allowed period is 6 months and 1 day.
	Resolution *GetCheckReportPerformanceParamsResolution `form:"resolution,omitempty" json:"resolution,omitempty"`

	// IncludeUptime Include uptime information. Adds field downtime, uptime, and unmonitored to the interval array objects.
	IncludeUptime *bool `form:"include_uptime,omitempty" json:"include_uptime,omitempty"`
}

// GetCheckReportPerformanceParamsOrder defines parameters for GetCheckReportPerformance.
type GetCheckReportPerformanceParamsOrder string

// GetCheckReportPerformanceParamsResolution defines parameters for GetCheckReportPerformance.
type GetCheckReportPerformanceParamsResolution string

// GetCheckReportStatusParams defines parameters for GetCheckReportStatus.
type GetCheckReportStatusParams struct {
	// From Start time of period. The format is `RFC 3339` (properly URL-encoded!). The default value is one week earlier than `to`
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End time of period. The format is `RFC 3339` (properly URL-encoded!). The default value is the current time
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// Order Sorting order of outages. Ascending or descending
	Order *GetCheckReportStatusParamsOrder `form:"order,omitempty" json:"order,omitempty"`
}

// GetCheckReportStatusParamsOrder defines parameters for GetCheckReportStatus.
type GetCheckReportStatusParamsOrder string

// GetCheckParams defines parameters for GetCheck.
type GetCheckParams struct {
	// ExtendedTags Specifies whether to return an extended tags representation in the response (with type and count).
	ExtendedTags *bool `form:"extended_tags,omitempty" json:"extended_tags,omitempty"`
}

// GetTracerouteParams defines parameters for GetTraceroute.
type GetTracerouteParams struct {
	// Host Target host.
	Host string `form:"host" json:"host"`

	// Probeid Probe identifier.
	Probeid *int `form:"probeid,omitempty" json:"probeid,omitempty"`
}

// PostAlertingContactsJSONRequestBody defines body for PostAlertingContacts for application/json ContentType.
type PostAlertingContactsJSONRequestBody = CreateContact

// PutAlertingContactsContactidJSONRequestBody defines body for PutAlertingContactsContactid for application/json ContentType.
type PutAlertingContactsContactidJSONRequestBody = UpdateContact

// PostAlertingTeamsJSONRequestBody defines body for PostAlertingTeams for application/json ContentType.
type PostAlertingTeamsJSONRequestBody = CreateTeam

// PutAlertingTeamsTeamidJSONRequestBody defines body for PutAlertingTeamsTeamid for application/json ContentType.
type PutAlertingTeamsTeamidJSONRequestBody = UpdateTeam

// DeleteChecksJSONRequestBody defines body for DeleteChecks for application/json ContentType.
type DeleteChecksJSONRequestBody = DeleteChecksJSONBody

// PostChecksJSONRequestBody defines body for PostChecks for application/json ContentType.
type PostChecksJSONRequestBody = CreateCheck

// PostChecksFormdataRequestBody defines body for PostChecks for application/x-www-form-urlencoded ContentType.
type PostChecksFormdataRequestBody = CreateCheck

// PutChecksJSONRequestBody defines body for PutChecks for application/json ContentType.
type PutChecksJSONRequestBody PutChecksJSONBody

// PutChecksFormdataRequestBody defines body for PutChecks for application/x-www-form-urlencoded ContentType.
type PutChecksFormdataRequestBody PutChecksFormdataBody

// PutChecksCheckidJSONRequestBody defines body for PutChecksCheckid for application/json ContentType.
type PutChecksCheckidJSONRequestBody = ModifyCheckSettings

// PutChecksCheckidFormdataRequestBody defines body for PutChecksCheckid for application/x-www-form-urlencoded ContentType.
type PutChecksCheckidFormdataRequestBody = ModifyCheckSettings

// PostMaintenanceJSONRequestBody defines body for PostMaintenance for application/json ContentType.
type PostMaintenanceJSONRequestBody = MaintenancePost

// PostMaintenanceFormdataRequestBody defines body for PostMaintenance for application/x-www-form-urlencoded ContentType.
type PostMaintenanceFormdataRequestBody = MaintenancePost

// PutMaintenanceOccurrencesIdJSONRequestBody defines body for PutMaintenanceOccurrencesId for application/json ContentType.
type PutMaintenanceOccurrencesIdJSONRequestBody = MaintenanceOccurrencesIdPut

// PutMaintenanceOccurrencesIdFormdataRequestBody defines body for PutMaintenanceOccurrencesId for application/x-www-form-urlencoded ContentType.
type PutMaintenanceOccurrencesIdFormdataRequestBody = MaintenanceOccurrencesIdPut

// PutMaintenanceIdJSONRequestBody defines body for PutMaintenanceId for application/json ContentType.
type PutMaintenanceIdJSONRequestBody = MaintenanceIdPut

// PutMaintenanceIdFormdataRequestBody defines body for PutMaintenanceId for application/x-www-form-urlencoded ContentType.
type PutMaintenanceIdFormdataRequestBody = MaintenanceIdPut

// AddCheckJSONRequestBody defines body for AddCheck for application/json ContentType.
type AddCheckJSONRequestBody = CheckWithoutID

// ModifyCheckJSONRequestBody defines body for ModifyCheck for application/json ContentType.
type ModifyCheckJSONRequestBody = CheckWithoutIDPUT

// AsSMSes returns the union data inside the ContactTargets_NotificationTargets as a SMSes
func (t ContactTargets_NotificationTargets) AsSMSes() (SMSes, error) {
	var body SMSes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSes overwrites any union data inside the ContactTargets_NotificationTargets as the provided SMSes
func (t *ContactTargets_NotificationTargets) FromSMSes(v SMSes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSes performs a merge with any union data inside the ContactTargets_NotificationTargets, using the provided SMSes
func (t *ContactTargets_NotificationTargets) MergeSMSes(v SMSes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsEmails returns the union data inside the ContactTargets_NotificationTargets as a Emails
func (t ContactTargets_NotificationTargets) AsEmails() (Emails, error) {
	var body Emails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmails overwrites any union data inside the ContactTargets_NotificationTargets as the provided Emails
func (t *ContactTargets_NotificationTargets) FromEmails(v Emails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmails performs a merge with any union data inside the ContactTargets_NotificationTargets, using the provided Emails
func (t *ContactTargets_NotificationTargets) MergeEmails(v Emails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAPNS returns the union data inside the ContactTargets_NotificationTargets as a APNS
func (t ContactTargets_NotificationTargets) AsAPNS() (APNS, error) {
	var body APNS
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAPNS overwrites any union data inside the ContactTargets_NotificationTargets as the provided APNS
func (t *ContactTargets_NotificationTargets) FromAPNS(v APNS) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAPNS performs a merge with any union data inside the ContactTargets_NotificationTargets, using the provided APNS
func (t *ContactTargets_NotificationTargets) MergeAPNS(v APNS) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAGCM returns the union data inside the ContactTargets_NotificationTargets as a AGCM
func (t ContactTargets_NotificationTargets) AsAGCM() (AGCM, error) {
	var body AGCM
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAGCM overwrites any union data inside the ContactTargets_NotificationTargets as the provided AGCM
func (t *ContactTargets_NotificationTargets) FromAGCM(v AGCM) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAGCM performs a merge with any union data inside the ContactTargets_NotificationTargets, using the provided AGCM
func (t *ContactTargets_NotificationTargets) MergeAGCM(v AGCM) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ContactTargets_NotificationTargets) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ContactTargets_NotificationTargets) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHttpAttributesSet returns the union data inside the CreateCheck as a HttpAttributesSet
func (t CreateCheck) AsHttpAttributesSet() (HttpAttributesSet, error) {
	var body HttpAttributesSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpAttributesSet overwrites any union data inside the CreateCheck as the provided HttpAttributesSet
func (t *CreateCheck) FromHttpAttributesSet(v HttpAttributesSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpAttributesSet performs a merge with any union data inside the CreateCheck, using the provided HttpAttributesSet
func (t *CreateCheck) MergeHttpAttributesSet(v HttpAttributesSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsHttpCustomAttributes returns the union data inside the CreateCheck as a HttpCustomAttributes
func (t CreateCheck) AsHttpCustomAttributes() (HttpCustomAttributes, error) {
	var body HttpCustomAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpCustomAttributes overwrites any union data inside the CreateCheck as the provided HttpCustomAttributes
func (t *CreateCheck) FromHttpCustomAttributes(v HttpCustomAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpCustomAttributes performs a merge with any union data inside the CreateCheck, using the provided HttpCustomAttributes
func (t *CreateCheck) MergeHttpCustomAttributes(v HttpCustomAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsTcpAttributes returns the union data inside the CreateCheck as a TcpAttributes
func (t CreateCheck) AsTcpAttributes() (TcpAttributes, error) {
	var body TcpAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTcpAttributes overwrites any union data inside the CreateCheck as the provided TcpAttributes
func (t *CreateCheck) FromTcpAttributes(v TcpAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTcpAttributes performs a merge with any union data inside the CreateCheck, using the provided TcpAttributes
func (t *CreateCheck) MergeTcpAttributes(v TcpAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDnsAttributes returns the union data inside the CreateCheck as a DnsAttributes
func (t CreateCheck) AsDnsAttributes() (DnsAttributes, error) {
	var body DnsAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDnsAttributes overwrites any union data inside the CreateCheck as the provided DnsAttributes
func (t *CreateCheck) FromDnsAttributes(v DnsAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDnsAttributes performs a merge with any union data inside the CreateCheck, using the provided DnsAttributes
func (t *CreateCheck) MergeDnsAttributes(v DnsAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsUdpAttributes returns the union data inside the CreateCheck as a UdpAttributes
func (t CreateCheck) AsUdpAttributes() (UdpAttributes, error) {
	var body UdpAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUdpAttributes overwrites any union data inside the CreateCheck as the provided UdpAttributes
func (t *CreateCheck) FromUdpAttributes(v UdpAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUdpAttributes performs a merge with any union data inside the CreateCheck, using the provided UdpAttributes
func (t *CreateCheck) MergeUdpAttributes(v UdpAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSmtpAttributesSet returns the union data inside the CreateCheck as a SmtpAttributesSet
func (t CreateCheck) AsSmtpAttributesSet() (SmtpAttributesSet, error) {
	var body SmtpAttributesSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSmtpAttributesSet overwrites any union data inside the CreateCheck as the provided SmtpAttributesSet
func (t *CreateCheck) FromSmtpAttributesSet(v SmtpAttributesSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSmtpAttributesSet performs a merge with any union data inside the CreateCheck, using the provided SmtpAttributesSet
func (t *CreateCheck) MergeSmtpAttributesSet(v SmtpAttributesSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPop3Attributes returns the union data inside the CreateCheck as a Pop3Attributes
func (t CreateCheck) AsPop3Attributes() (Pop3Attributes, error) {
	var body Pop3Attributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPop3Attributes overwrites any union data inside the CreateCheck as the provided Pop3Attributes
func (t *CreateCheck) FromPop3Attributes(v Pop3Attributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePop3Attributes performs a merge with any union data inside the CreateCheck, using the provided Pop3Attributes
func (t *CreateCheck) MergePop3Attributes(v Pop3Attributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsImapAttributes returns the union data inside the CreateCheck as a ImapAttributes
func (t CreateCheck) AsImapAttributes() (ImapAttributes, error) {
	var body ImapAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromImapAttributes overwrites any union data inside the CreateCheck as the provided ImapAttributes
func (t *CreateCheck) FromImapAttributes(v ImapAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeImapAttributes performs a merge with any union data inside the CreateCheck, using the provided ImapAttributes
func (t *CreateCheck) MergeImapAttributes(v ImapAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateCheck) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.CustomMessage != nil {
		object["custom_message"], err = json.Marshal(t.CustomMessage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'custom_message': %w", err)
		}
	}

	object["host"], err = json.Marshal(t.Host)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'host': %w", err)
	}

	if t.Integrationids != nil {
		object["integrationids"], err = json.Marshal(t.Integrationids)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'integrationids': %w", err)
		}
	}

	if t.Ipv6 != nil {
		object["ipv6"], err = json.Marshal(t.Ipv6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6': %w", err)
		}
	}

	object["name"], err = json.Marshal(t.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	if t.Notifyagainevery != nil {
		object["notifyagainevery"], err = json.Marshal(t.Notifyagainevery)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyagainevery': %w", err)
		}
	}

	if t.Notifywhenbackup != nil {
		object["notifywhenbackup"], err = json.Marshal(t.Notifywhenbackup)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifywhenbackup': %w", err)
		}
	}

	if t.Paused != nil {
		object["paused"], err = json.Marshal(t.Paused)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'paused': %w", err)
		}
	}

	if t.ProbeFilters != nil {
		object["probe_filters"], err = json.Marshal(t.ProbeFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'probe_filters': %w", err)
		}
	}

	if t.Resolution != nil {
		object["resolution"], err = json.Marshal(t.Resolution)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resolution': %w", err)
		}
	}

	if t.ResponsetimeThreshold != nil {
		object["responsetime_threshold"], err = json.Marshal(t.ResponsetimeThreshold)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'responsetime_threshold': %w", err)
		}
	}

	if t.Sendnotificationwhendown != nil {
		object["sendnotificationwhendown"], err = json.Marshal(t.Sendnotificationwhendown)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sendnotificationwhendown': %w", err)
		}
	}

	if t.Tags != nil {
		object["tags"], err = json.Marshal(t.Tags)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tags': %w", err)
		}
	}

	if t.Teamids != nil {
		object["teamids"], err = json.Marshal(t.Teamids)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'teamids': %w", err)
		}
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if t.Userids != nil {
		object["userids"], err = json.Marshal(t.Userids)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userids': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CreateCheck) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["custom_message"]; found {
		err = json.Unmarshal(raw, &t.CustomMessage)
		if err != nil {
			return fmt.Errorf("error reading 'custom_message': %w", err)
		}
	}

	if raw, found := object["host"]; found {
		err = json.Unmarshal(raw, &t.Host)
		if err != nil {
			return fmt.Errorf("error reading 'host': %w", err)
		}
	}

	if raw, found := object["integrationids"]; found {
		err = json.Unmarshal(raw, &t.Integrationids)
		if err != nil {
			return fmt.Errorf("error reading 'integrationids': %w", err)
		}
	}

	if raw, found := object["ipv6"]; found {
		err = json.Unmarshal(raw, &t.Ipv6)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["notifyagainevery"]; found {
		err = json.Unmarshal(raw, &t.Notifyagainevery)
		if err != nil {
			return fmt.Errorf("error reading 'notifyagainevery': %w", err)
		}
	}

	if raw, found := object["notifywhenbackup"]; found {
		err = json.Unmarshal(raw, &t.Notifywhenbackup)
		if err != nil {
			return fmt.Errorf("error reading 'notifywhenbackup': %w", err)
		}
	}

	if raw, found := object["paused"]; found {
		err = json.Unmarshal(raw, &t.Paused)
		if err != nil {
			return fmt.Errorf("error reading 'paused': %w", err)
		}
	}

	if raw, found := object["probe_filters"]; found {
		err = json.Unmarshal(raw, &t.ProbeFilters)
		if err != nil {
			return fmt.Errorf("error reading 'probe_filters': %w", err)
		}
	}

	if raw, found := object["resolution"]; found {
		err = json.Unmarshal(raw, &t.Resolution)
		if err != nil {
			return fmt.Errorf("error reading 'resolution': %w", err)
		}
	}

	if raw, found := object["responsetime_threshold"]; found {
		err = json.Unmarshal(raw, &t.ResponsetimeThreshold)
		if err != nil {
			return fmt.Errorf("error reading 'responsetime_threshold': %w", err)
		}
	}

	if raw, found := object["sendnotificationwhendown"]; found {
		err = json.Unmarshal(raw, &t.Sendnotificationwhendown)
		if err != nil {
			return fmt.Errorf("error reading 'sendnotificationwhendown': %w", err)
		}
	}

	if raw, found := object["tags"]; found {
		err = json.Unmarshal(raw, &t.Tags)
		if err != nil {
			return fmt.Errorf("error reading 'tags': %w", err)
		}
	}

	if raw, found := object["teamids"]; found {
		err = json.Unmarshal(raw, &t.Teamids)
		if err != nil {
			return fmt.Errorf("error reading 'teamids': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	if raw, found := object["userids"]; found {
		err = json.Unmarshal(raw, &t.Userids)
		if err != nil {
			return fmt.Errorf("error reading 'userids': %w", err)
		}
	}

	return err
}

// AsSMSes returns the union data inside the CreateContact_NotificationTargets as a SMSes
func (t CreateContact_NotificationTargets) AsSMSes() (SMSes, error) {
	var body SMSes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSes overwrites any union data inside the CreateContact_NotificationTargets as the provided SMSes
func (t *CreateContact_NotificationTargets) FromSMSes(v SMSes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSes performs a merge with any union data inside the CreateContact_NotificationTargets, using the provided SMSes
func (t *CreateContact_NotificationTargets) MergeSMSes(v SMSes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsEmails returns the union data inside the CreateContact_NotificationTargets as a Emails
func (t CreateContact_NotificationTargets) AsEmails() (Emails, error) {
	var body Emails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmails overwrites any union data inside the CreateContact_NotificationTargets as the provided Emails
func (t *CreateContact_NotificationTargets) FromEmails(v Emails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmails performs a merge with any union data inside the CreateContact_NotificationTargets, using the provided Emails
func (t *CreateContact_NotificationTargets) MergeEmails(v Emails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateContact_NotificationTargets) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateContact_NotificationTargets) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDetailedCheckHttp returns the union data inside the DetailedCheck as a DetailedCheckHttp
func (t DetailedCheck) AsDetailedCheckHttp() (DetailedCheckHttp, error) {
	var body DetailedCheckHttp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckHttp overwrites any union data inside the DetailedCheck as the provided DetailedCheckHttp
func (t *DetailedCheck) FromDetailedCheckHttp(v DetailedCheckHttp) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckHttp performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckHttp
func (t *DetailedCheck) MergeDetailedCheckHttp(v DetailedCheckHttp) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDetailedCheckHttpCustom returns the union data inside the DetailedCheck as a DetailedCheckHttpCustom
func (t DetailedCheck) AsDetailedCheckHttpCustom() (DetailedCheckHttpCustom, error) {
	var body DetailedCheckHttpCustom
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckHttpCustom overwrites any union data inside the DetailedCheck as the provided DetailedCheckHttpCustom
func (t *DetailedCheck) FromDetailedCheckHttpCustom(v DetailedCheckHttpCustom) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckHttpCustom performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckHttpCustom
func (t *DetailedCheck) MergeDetailedCheckHttpCustom(v DetailedCheckHttpCustom) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDetailedCheckTcp returns the union data inside the DetailedCheck as a DetailedCheckTcp
func (t DetailedCheck) AsDetailedCheckTcp() (DetailedCheckTcp, error) {
	var body DetailedCheckTcp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckTcp overwrites any union data inside the DetailedCheck as the provided DetailedCheckTcp
func (t *DetailedCheck) FromDetailedCheckTcp(v DetailedCheckTcp) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckTcp performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckTcp
func (t *DetailedCheck) MergeDetailedCheckTcp(v DetailedCheckTcp) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDetailedCheckDns returns the union data inside the DetailedCheck as a DetailedCheckDns
func (t DetailedCheck) AsDetailedCheckDns() (DetailedCheckDns, error) {
	var body DetailedCheckDns
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckDns overwrites any union data inside the DetailedCheck as the provided DetailedCheckDns
func (t *DetailedCheck) FromDetailedCheckDns(v DetailedCheckDns) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckDns performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckDns
func (t *DetailedCheck) MergeDetailedCheckDns(v DetailedCheckDns) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDetailedCheckUdp returns the union data inside the DetailedCheck as a DetailedCheckUdp
func (t DetailedCheck) AsDetailedCheckUdp() (DetailedCheckUdp, error) {
	var body DetailedCheckUdp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckUdp overwrites any union data inside the DetailedCheck as the provided DetailedCheckUdp
func (t *DetailedCheck) FromDetailedCheckUdp(v DetailedCheckUdp) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckUdp performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckUdp
func (t *DetailedCheck) MergeDetailedCheckUdp(v DetailedCheckUdp) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDetailedCheckSmtp returns the union data inside the DetailedCheck as a DetailedCheckSmtp
func (t DetailedCheck) AsDetailedCheckSmtp() (DetailedCheckSmtp, error) {
	var body DetailedCheckSmtp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckSmtp overwrites any union data inside the DetailedCheck as the provided DetailedCheckSmtp
func (t *DetailedCheck) FromDetailedCheckSmtp(v DetailedCheckSmtp) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckSmtp performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckSmtp
func (t *DetailedCheck) MergeDetailedCheckSmtp(v DetailedCheckSmtp) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDetailedCheckPop3 returns the union data inside the DetailedCheck as a DetailedCheckPop3
func (t DetailedCheck) AsDetailedCheckPop3() (DetailedCheckPop3, error) {
	var body DetailedCheckPop3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckPop3 overwrites any union data inside the DetailedCheck as the provided DetailedCheckPop3
func (t *DetailedCheck) FromDetailedCheckPop3(v DetailedCheckPop3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckPop3 performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckPop3
func (t *DetailedCheck) MergeDetailedCheckPop3(v DetailedCheckPop3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDetailedCheckImap returns the union data inside the DetailedCheck as a DetailedCheckImap
func (t DetailedCheck) AsDetailedCheckImap() (DetailedCheckImap, error) {
	var body DetailedCheckImap
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDetailedCheckImap overwrites any union data inside the DetailedCheck as the provided DetailedCheckImap
func (t *DetailedCheck) FromDetailedCheckImap(v DetailedCheckImap) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDetailedCheckImap performs a merge with any union data inside the DetailedCheck, using the provided DetailedCheckImap
func (t *DetailedCheck) MergeDetailedCheckImap(v DetailedCheckImap) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DetailedCheck) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DetailedCheck) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHttpAttributesSet returns the union data inside the ModifyCheckSettings as a HttpAttributesSet
func (t ModifyCheckSettings) AsHttpAttributesSet() (HttpAttributesSet, error) {
	var body HttpAttributesSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpAttributesSet overwrites any union data inside the ModifyCheckSettings as the provided HttpAttributesSet
func (t *ModifyCheckSettings) FromHttpAttributesSet(v HttpAttributesSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpAttributesSet performs a merge with any union data inside the ModifyCheckSettings, using the provided HttpAttributesSet
func (t *ModifyCheckSettings) MergeHttpAttributesSet(v HttpAttributesSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsHttpCustomAttributes returns the union data inside the ModifyCheckSettings as a HttpCustomAttributes
func (t ModifyCheckSettings) AsHttpCustomAttributes() (HttpCustomAttributes, error) {
	var body HttpCustomAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpCustomAttributes overwrites any union data inside the ModifyCheckSettings as the provided HttpCustomAttributes
func (t *ModifyCheckSettings) FromHttpCustomAttributes(v HttpCustomAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpCustomAttributes performs a merge with any union data inside the ModifyCheckSettings, using the provided HttpCustomAttributes
func (t *ModifyCheckSettings) MergeHttpCustomAttributes(v HttpCustomAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsTcpAttributes returns the union data inside the ModifyCheckSettings as a TcpAttributes
func (t ModifyCheckSettings) AsTcpAttributes() (TcpAttributes, error) {
	var body TcpAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTcpAttributes overwrites any union data inside the ModifyCheckSettings as the provided TcpAttributes
func (t *ModifyCheckSettings) FromTcpAttributes(v TcpAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTcpAttributes performs a merge with any union data inside the ModifyCheckSettings, using the provided TcpAttributes
func (t *ModifyCheckSettings) MergeTcpAttributes(v TcpAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDnsAttributes returns the union data inside the ModifyCheckSettings as a DnsAttributes
func (t ModifyCheckSettings) AsDnsAttributes() (DnsAttributes, error) {
	var body DnsAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDnsAttributes overwrites any union data inside the ModifyCheckSettings as the provided DnsAttributes
func (t *ModifyCheckSettings) FromDnsAttributes(v DnsAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDnsAttributes performs a merge with any union data inside the ModifyCheckSettings, using the provided DnsAttributes
func (t *ModifyCheckSettings) MergeDnsAttributes(v DnsAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsUdpAttributes returns the union data inside the ModifyCheckSettings as a UdpAttributes
func (t ModifyCheckSettings) AsUdpAttributes() (UdpAttributes, error) {
	var body UdpAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUdpAttributes overwrites any union data inside the ModifyCheckSettings as the provided UdpAttributes
func (t *ModifyCheckSettings) FromUdpAttributes(v UdpAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUdpAttributes performs a merge with any union data inside the ModifyCheckSettings, using the provided UdpAttributes
func (t *ModifyCheckSettings) MergeUdpAttributes(v UdpAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSmtpAttributesSet returns the union data inside the ModifyCheckSettings as a SmtpAttributesSet
func (t ModifyCheckSettings) AsSmtpAttributesSet() (SmtpAttributesSet, error) {
	var body SmtpAttributesSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSmtpAttributesSet overwrites any union data inside the ModifyCheckSettings as the provided SmtpAttributesSet
func (t *ModifyCheckSettings) FromSmtpAttributesSet(v SmtpAttributesSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSmtpAttributesSet performs a merge with any union data inside the ModifyCheckSettings, using the provided SmtpAttributesSet
func (t *ModifyCheckSettings) MergeSmtpAttributesSet(v SmtpAttributesSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPop3Attributes returns the union data inside the ModifyCheckSettings as a Pop3Attributes
func (t ModifyCheckSettings) AsPop3Attributes() (Pop3Attributes, error) {
	var body Pop3Attributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPop3Attributes overwrites any union data inside the ModifyCheckSettings as the provided Pop3Attributes
func (t *ModifyCheckSettings) FromPop3Attributes(v Pop3Attributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePop3Attributes performs a merge with any union data inside the ModifyCheckSettings, using the provided Pop3Attributes
func (t *ModifyCheckSettings) MergePop3Attributes(v Pop3Attributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsImapAttributes returns the union data inside the ModifyCheckSettings as a ImapAttributes
func (t ModifyCheckSettings) AsImapAttributes() (ImapAttributes, error) {
	var body ImapAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromImapAttributes overwrites any union data inside the ModifyCheckSettings as the provided ImapAttributes
func (t *ModifyCheckSettings) FromImapAttributes(v ImapAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeImapAttributes performs a merge with any union data inside the ModifyCheckSettings, using the provided ImapAttributes
func (t *ModifyCheckSettings) MergeImapAttributes(v ImapAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ModifyCheckSettings) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Addtags != nil {
		object["addtags"], err = json.Marshal(t.Addtags)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'addtags': %w", err)
		}
	}

	if t.Checkids != nil {
		object["checkids"], err = json.Marshal(t.Checkids)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'checkids': %w", err)
		}
	}

	if t.CustomMessage != nil {
		object["custom_message"], err = json.Marshal(t.CustomMessage)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'custom_message': %w", err)
		}
	}

	if t.Host != nil {
		object["host"], err = json.Marshal(t.Host)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'host': %w", err)
		}
	}

	if t.Integrationids != nil {
		object["integrationids"], err = json.Marshal(t.Integrationids)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'integrationids': %w", err)
		}
	}

	if t.Ipv6 != nil {
		object["ipv6"], err = json.Marshal(t.Ipv6)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ipv6': %w", err)
		}
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if t.Notifyagainevery != nil {
		object["notifyagainevery"], err = json.Marshal(t.Notifyagainevery)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifyagainevery': %w", err)
		}
	}

	if t.Notifywhenbackup != nil {
		object["notifywhenbackup"], err = json.Marshal(t.Notifywhenbackup)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'notifywhenbackup': %w", err)
		}
	}

	if t.Paused != nil {
		object["paused"], err = json.Marshal(t.Paused)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'paused': %w", err)
		}
	}

	if t.ProbeFilters != nil {
		object["probe_filters"], err = json.Marshal(t.ProbeFilters)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'probe_filters': %w", err)
		}
	}

	if t.Resolution != nil {
		object["resolution"], err = json.Marshal(t.Resolution)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resolution': %w", err)
		}
	}

	if t.ResponsetimeThreshold != nil {
		object["responsetime_threshold"], err = json.Marshal(t.ResponsetimeThreshold)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'responsetime_threshold': %w", err)
		}
	}

	if t.Sendnotificationwhendown != nil {
		object["sendnotificationwhendown"], err = json.Marshal(t.Sendnotificationwhendown)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sendnotificationwhendown': %w", err)
		}
	}

	if t.Tags != nil {
		object["tags"], err = json.Marshal(t.Tags)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tags': %w", err)
		}
	}

	if t.Teamids != nil {
		object["teamids"], err = json.Marshal(t.Teamids)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'teamids': %w", err)
		}
	}

	if t.Userids != nil {
		object["userids"], err = json.Marshal(t.Userids)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userids': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *ModifyCheckSettings) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["addtags"]; found {
		err = json.Unmarshal(raw, &t.Addtags)
		if err != nil {
			return fmt.Errorf("error reading 'addtags': %w", err)
		}
	}

	if raw, found := object["checkids"]; found {
		err = json.Unmarshal(raw, &t.Checkids)
		if err != nil {
			return fmt.Errorf("error reading 'checkids': %w", err)
		}
	}

	if raw, found := object["custom_message"]; found {
		err = json.Unmarshal(raw, &t.CustomMessage)
		if err != nil {
			return fmt.Errorf("error reading 'custom_message': %w", err)
		}
	}

	if raw, found := object["host"]; found {
		err = json.Unmarshal(raw, &t.Host)
		if err != nil {
			return fmt.Errorf("error reading 'host': %w", err)
		}
	}

	if raw, found := object["integrationids"]; found {
		err = json.Unmarshal(raw, &t.Integrationids)
		if err != nil {
			return fmt.Errorf("error reading 'integrationids': %w", err)
		}
	}

	if raw, found := object["ipv6"]; found {
		err = json.Unmarshal(raw, &t.Ipv6)
		if err != nil {
			return fmt.Errorf("error reading 'ipv6': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["notifyagainevery"]; found {
		err = json.Unmarshal(raw, &t.Notifyagainevery)
		if err != nil {
			return fmt.Errorf("error reading 'notifyagainevery': %w", err)
		}
	}

	if raw, found := object["notifywhenbackup"]; found {
		err = json.Unmarshal(raw, &t.Notifywhenbackup)
		if err != nil {
			return fmt.Errorf("error reading 'notifywhenbackup': %w", err)
		}
	}

	if raw, found := object["paused"]; found {
		err = json.Unmarshal(raw, &t.Paused)
		if err != nil {
			return fmt.Errorf("error reading 'paused': %w", err)
		}
	}

	if raw, found := object["probe_filters"]; found {
		err = json.Unmarshal(raw, &t.ProbeFilters)
		if err != nil {
			return fmt.Errorf("error reading 'probe_filters': %w", err)
		}
	}

	if raw, found := object["resolution"]; found {
		err = json.Unmarshal(raw, &t.Resolution)
		if err != nil {
			return fmt.Errorf("error reading 'resolution': %w", err)
		}
	}

	if raw, found := object["responsetime_threshold"]; found {
		err = json.Unmarshal(raw, &t.ResponsetimeThreshold)
		if err != nil {
			return fmt.Errorf("error reading 'responsetime_threshold': %w", err)
		}
	}

	if raw, found := object["sendnotificationwhendown"]; found {
		err = json.Unmarshal(raw, &t.Sendnotificationwhendown)
		if err != nil {
			return fmt.Errorf("error reading 'sendnotificationwhendown': %w", err)
		}
	}

	if raw, found := object["tags"]; found {
		err = json.Unmarshal(raw, &t.Tags)
		if err != nil {
			return fmt.Errorf("error reading 'tags': %w", err)
		}
	}

	if raw, found := object["teamids"]; found {
		err = json.Unmarshal(raw, &t.Teamids)
		if err != nil {
			return fmt.Errorf("error reading 'teamids': %w", err)
		}
	}

	if raw, found := object["userids"]; found {
		err = json.Unmarshal(raw, &t.Userids)
		if err != nil {
			return fmt.Errorf("error reading 'userids': %w", err)
		}
	}

	return err
}

// AsSMSes returns the union data inside the UpdateContact_NotificationTargets as a SMSes
func (t UpdateContact_NotificationTargets) AsSMSes() (SMSes, error) {
	var body SMSes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSMSes overwrites any union data inside the UpdateContact_NotificationTargets as the provided SMSes
func (t *UpdateContact_NotificationTargets) FromSMSes(v SMSes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSMSes performs a merge with any union data inside the UpdateContact_NotificationTargets, using the provided SMSes
func (t *UpdateContact_NotificationTargets) MergeSMSes(v SMSes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsEmails returns the union data inside the UpdateContact_NotificationTargets as a Emails
func (t UpdateContact_NotificationTargets) AsEmails() (Emails, error) {
	var body Emails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmails overwrites any union data inside the UpdateContact_NotificationTargets as the provided Emails
func (t *UpdateContact_NotificationTargets) FromEmails(v Emails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmails performs a merge with any union data inside the UpdateContact_NotificationTargets, using the provided Emails
func (t *UpdateContact_NotificationTargets) MergeEmails(v Emails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateContact_NotificationTargets) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateContact_NotificationTargets) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsWeeks returns the union data inside the SummaryPerformanceRespAttrs_Summary as a Weeks
func (t SummaryPerformanceRespAttrs_Summary) AsWeeks() (Weeks, error) {
	var body Weeks
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWeeks overwrites any union data inside the SummaryPerformanceRespAttrs_Summary as the provided Weeks
func (t *SummaryPerformanceRespAttrs_Summary) FromWeeks(v Weeks) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWeeks performs a merge with any union data inside the SummaryPerformanceRespAttrs_Summary, using the provided Weeks
func (t *SummaryPerformanceRespAttrs_Summary) MergeWeeks(v Weeks) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDays returns the union data inside the SummaryPerformanceRespAttrs_Summary as a Days
func (t SummaryPerformanceRespAttrs_Summary) AsDays() (Days, error) {
	var body Days
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDays overwrites any union data inside the SummaryPerformanceRespAttrs_Summary as the provided Days
func (t *SummaryPerformanceRespAttrs_Summary) FromDays(v Days) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDays performs a merge with any union data inside the SummaryPerformanceRespAttrs_Summary, using the provided Days
func (t *SummaryPerformanceRespAttrs_Summary) MergeDays(v Days) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsHours returns the union data inside the SummaryPerformanceRespAttrs_Summary as a Hours
func (t SummaryPerformanceRespAttrs_Summary) AsHours() (Hours, error) {
	var body Hours
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHours overwrites any union data inside the SummaryPerformanceRespAttrs_Summary as the provided Hours
func (t *SummaryPerformanceRespAttrs_Summary) FromHours(v Hours) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHours performs a merge with any union data inside the SummaryPerformanceRespAttrs_Summary, using the provided Hours
func (t *SummaryPerformanceRespAttrs_Summary) MergeHours(v Hours) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SummaryPerformanceRespAttrs_Summary) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SummaryPerformanceRespAttrs_Summary) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSummaryRespAttrsSummaryResponsetimeAvgresponse0 returns the union data inside the SummaryRespAttrs_Summary_Responsetime_Avgresponse as a SummaryRespAttrsSummaryResponsetimeAvgresponse0
func (t SummaryRespAttrs_Summary_Responsetime_Avgresponse) AsSummaryRespAttrsSummaryResponsetimeAvgresponse0() (SummaryRespAttrsSummaryResponsetimeAvgresponse0, error) {
	var body SummaryRespAttrsSummaryResponsetimeAvgresponse0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSummaryRespAttrsSummaryResponsetimeAvgresponse0 overwrites any union data inside the SummaryRespAttrs_Summary_Responsetime_Avgresponse as the provided SummaryRespAttrsSummaryResponsetimeAvgresponse0
func (t *SummaryRespAttrs_Summary_Responsetime_Avgresponse) FromSummaryRespAttrsSummaryResponsetimeAvgresponse0(v SummaryRespAttrsSummaryResponsetimeAvgresponse0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSummaryRespAttrsSummaryResponsetimeAvgresponse0 performs a merge with any union data inside the SummaryRespAttrs_Summary_Responsetime_Avgresponse, using the provided SummaryRespAttrsSummaryResponsetimeAvgresponse0
func (t *SummaryRespAttrs_Summary_Responsetime_Avgresponse) MergeSummaryRespAttrsSummaryResponsetimeAvgresponse0(v SummaryRespAttrsSummaryResponsetimeAvgresponse0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSummaryRespAttrsSummaryResponsetimeAvgresponse1 returns the union data inside the SummaryRespAttrs_Summary_Responsetime_Avgresponse as a SummaryRespAttrsSummaryResponsetimeAvgresponse1
func (t SummaryRespAttrs_Summary_Responsetime_Avgresponse) AsSummaryRespAttrsSummaryResponsetimeAvgresponse1() (SummaryRespAttrsSummaryResponsetimeAvgresponse1, error) {
	var body SummaryRespAttrsSummaryResponsetimeAvgresponse1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSummaryRespAttrsSummaryResponsetimeAvgresponse1 overwrites any union data inside the SummaryRespAttrs_Summary_Responsetime_Avgresponse as the provided SummaryRespAttrsSummaryResponsetimeAvgresponse1
func (t *SummaryRespAttrs_Summary_Responsetime_Avgresponse) FromSummaryRespAttrsSummaryResponsetimeAvgresponse1(v SummaryRespAttrsSummaryResponsetimeAvgresponse1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSummaryRespAttrsSummaryResponsetimeAvgresponse1 performs a merge with any union data inside the SummaryRespAttrs_Summary_Responsetime_Avgresponse, using the provided SummaryRespAttrsSummaryResponsetimeAvgresponse1
func (t *SummaryRespAttrs_Summary_Responsetime_Avgresponse) MergeSummaryRespAttrsSummaryResponsetimeAvgresponse1(v SummaryRespAttrsSummaryResponsetimeAvgresponse1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t SummaryRespAttrs_Summary_Responsetime_Avgresponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SummaryRespAttrs_Summary_Responsetime_Avgresponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetActions request
	GetActions(ctx context.Context, params *GetActionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertingContacts request
	GetAlertingContacts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAlertingContactsWithBody request with any body
	PostAlertingContactsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAlertingContacts(ctx context.Context, body PostAlertingContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAlertingContactsContactid request
	DeleteAlertingContactsContactid(ctx context.Context, contactid int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertingContactsContactid request
	GetAlertingContactsContactid(ctx context.Context, contactid int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAlertingContactsContactidWithBody request with any body
	PutAlertingContactsContactidWithBody(ctx context.Context, contactid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAlertingContactsContactid(ctx context.Context, contactid int, body PutAlertingContactsContactidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertingTeams request
	GetAlertingTeams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAlertingTeamsWithBody request with any body
	PostAlertingTeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAlertingTeams(ctx context.Context, body PostAlertingTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAlertingTeamsTeamid request
	DeleteAlertingTeamsTeamid(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertingTeamsTeamid request
	GetAlertingTeamsTeamid(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAlertingTeamsTeamidWithBody request with any body
	PutAlertingTeamsTeamidWithBody(ctx context.Context, teamid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAlertingTeamsTeamid(ctx context.Context, teamid int, body PutAlertingTeamsTeamidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnalysisCheckid request
	GetAnalysisCheckid(ctx context.Context, checkid AnalysisCheckid, params *GetAnalysisCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnalysisCheckidAnalysisid request
	GetAnalysisCheckidAnalysisid(ctx context.Context, checkid AnalysisCheckid, analysisid AnalysisAnalysisid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChecksWithBody request with any body
	DeleteChecksWithBody(ctx context.Context, params *DeleteChecksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteChecks(ctx context.Context, params *DeleteChecksParams, body DeleteChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChecks request
	GetChecks(ctx context.Context, params *GetChecksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChecksWithBody request with any body
	PostChecksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChecks(ctx context.Context, body PostChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChecksWithFormdataBody(ctx context.Context, body PostChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChecksWithBody request with any body
	PutChecksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChecks(ctx context.Context, body PutChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChecksWithFormdataBody(ctx context.Context, body PutChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteChecksCheckid request
	DeleteChecksCheckid(ctx context.Context, checkid int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChecksCheckid request
	GetChecksCheckid(ctx context.Context, checkid int, params *GetChecksCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutChecksCheckidWithBody request with any body
	PutChecksCheckidWithBody(ctx context.Context, checkid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChecksCheckid(ctx context.Context, checkid int, body PutChecksCheckidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutChecksCheckidWithFormdataBody(ctx context.Context, checkid int, body PutChecksCheckidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCredits request
	GetCredits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMaintenance request
	DeleteMaintenance(ctx context.Context, params *DeleteMaintenanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMaintenance request
	GetMaintenance(ctx context.Context, params *GetMaintenanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMaintenanceWithBody request with any body
	PostMaintenanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMaintenance(ctx context.Context, body PostMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMaintenanceWithFormdataBody(ctx context.Context, body PostMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMaintenanceOccurrences request
	DeleteMaintenanceOccurrences(ctx context.Context, params *DeleteMaintenanceOccurrencesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMaintenanceOccurrences request
	GetMaintenanceOccurrences(ctx context.Context, params *GetMaintenanceOccurrencesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMaintenanceOccurrencesId request
	DeleteMaintenanceOccurrencesId(ctx context.Context, id MaintenanceOccurrencesId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMaintenanceOccurrencesId request
	GetMaintenanceOccurrencesId(ctx context.Context, id MaintenanceOccurrencesId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMaintenanceOccurrencesIdWithBody request with any body
	PutMaintenanceOccurrencesIdWithBody(ctx context.Context, id MaintenanceOccurrencesId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMaintenanceOccurrencesId(ctx context.Context, id MaintenanceOccurrencesId, body PutMaintenanceOccurrencesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMaintenanceOccurrencesIdWithFormdataBody(ctx context.Context, id MaintenanceOccurrencesId, body PutMaintenanceOccurrencesIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMaintenanceId request
	DeleteMaintenanceId(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMaintenanceId request
	GetMaintenanceId(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMaintenanceIdWithBody request with any body
	PutMaintenanceIdWithBody(ctx context.Context, id MaintenanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMaintenanceId(ctx context.Context, id MaintenanceId, body PutMaintenanceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMaintenanceIdWithFormdataBody(ctx context.Context, id MaintenanceId, body PutMaintenanceIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProbes request
	GetProbes(ctx context.Context, params *GetProbesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReference request
	GetReference(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResultsCheckid request
	GetResultsCheckid(ctx context.Context, checkid ResultsCheckid, params *GetResultsCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSingle request
	GetSingle(ctx context.Context, params *GetSingleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSummaryAverageCheckid request
	GetSummaryAverageCheckid(ctx context.Context, checkid SummaryAverageCheckid, params *GetSummaryAverageCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSummaryHoursofdayCheckid request
	GetSummaryHoursofdayCheckid(ctx context.Context, checkid SummaryHoursofdayCheckid, params *GetSummaryHoursofdayCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSummaryOutageCheckid request
	GetSummaryOutageCheckid(ctx context.Context, checkid SummaryOutageCheckid, params *GetSummaryOutageCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSummaryPerformanceCheckid request
	GetSummaryPerformanceCheckid(ctx context.Context, checkid SummaryPerformanceCheckid, params *GetSummaryPerformanceCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSummaryProbesCheckid request
	GetSummaryProbesCheckid(ctx context.Context, checkid SummaryProbesCheckid, params *GetSummaryProbesCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllChecks request
	GetAllChecks(ctx context.Context, params *GetAllChecksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCheckWithBody request with any body
	AddCheckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCheck(ctx context.Context, body AddCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCheckReportStatusAll request
	GetCheckReportStatusAll(ctx context.Context, params *GetCheckReportStatusAllParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCheckReportPerformance request
	GetCheckReportPerformance(ctx context.Context, checkId int64, params *GetCheckReportPerformanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCheckReportStatus request
	GetCheckReportStatus(ctx context.Context, checkId int64, params *GetCheckReportStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCheck request
	DeleteCheck(ctx context.Context, checkID int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCheck request
	GetCheck(ctx context.Context, checkID int64, params *GetCheckParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyCheckWithBody request with any body
	ModifyCheckWithBody(ctx context.Context, checkID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyCheck(ctx context.Context, checkID int64, body ModifyCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTraceroute request
	GetTraceroute(ctx context.Context, params *GetTracerouteParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetActions(ctx context.Context, params *GetActionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertingContacts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertingContactsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertingContactsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertingContactsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertingContacts(ctx context.Context, body PostAlertingContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertingContactsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAlertingContactsContactid(ctx context.Context, contactid int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAlertingContactsContactidRequest(c.Server, contactid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertingContactsContactid(ctx context.Context, contactid int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertingContactsContactidRequest(c.Server, contactid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertingContactsContactidWithBody(ctx context.Context, contactid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertingContactsContactidRequestWithBody(c.Server, contactid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertingContactsContactid(ctx context.Context, contactid int, body PutAlertingContactsContactidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertingContactsContactidRequest(c.Server, contactid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertingTeams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertingTeamsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertingTeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertingTeamsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertingTeams(ctx context.Context, body PostAlertingTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertingTeamsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAlertingTeamsTeamid(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAlertingTeamsTeamidRequest(c.Server, teamid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertingTeamsTeamid(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertingTeamsTeamidRequest(c.Server, teamid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertingTeamsTeamidWithBody(ctx context.Context, teamid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertingTeamsTeamidRequestWithBody(c.Server, teamid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAlertingTeamsTeamid(ctx context.Context, teamid int, body PutAlertingTeamsTeamidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAlertingTeamsTeamidRequest(c.Server, teamid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnalysisCheckid(ctx context.Context, checkid AnalysisCheckid, params *GetAnalysisCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnalysisCheckidRequest(c.Server, checkid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnalysisCheckidAnalysisid(ctx context.Context, checkid AnalysisCheckid, analysisid AnalysisAnalysisid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnalysisCheckidAnalysisidRequest(c.Server, checkid, analysisid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChecksWithBody(ctx context.Context, params *DeleteChecksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChecksRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChecks(ctx context.Context, params *DeleteChecksParams, body DeleteChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChecksRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChecks(ctx context.Context, params *GetChecksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChecksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChecksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChecksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChecks(ctx context.Context, body PostChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChecksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChecksWithFormdataBody(ctx context.Context, body PostChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChecksRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChecksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChecksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChecks(ctx context.Context, body PutChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChecksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChecksWithFormdataBody(ctx context.Context, body PutChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChecksRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteChecksCheckid(ctx context.Context, checkid int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteChecksCheckidRequest(c.Server, checkid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChecksCheckid(ctx context.Context, checkid int, params *GetChecksCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChecksCheckidRequest(c.Server, checkid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChecksCheckidWithBody(ctx context.Context, checkid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChecksCheckidRequestWithBody(c.Server, checkid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChecksCheckid(ctx context.Context, checkid int, body PutChecksCheckidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChecksCheckidRequest(c.Server, checkid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutChecksCheckidWithFormdataBody(ctx context.Context, checkid int, body PutChecksCheckidFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutChecksCheckidRequestWithFormdataBody(c.Server, checkid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCredits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreditsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMaintenance(ctx context.Context, params *DeleteMaintenanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMaintenanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMaintenance(ctx context.Context, params *GetMaintenanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMaintenanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMaintenanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMaintenanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMaintenance(ctx context.Context, body PostMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMaintenanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMaintenanceWithFormdataBody(ctx context.Context, body PostMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMaintenanceRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMaintenanceOccurrences(ctx context.Context, params *DeleteMaintenanceOccurrencesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMaintenanceOccurrencesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMaintenanceOccurrences(ctx context.Context, params *GetMaintenanceOccurrencesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMaintenanceOccurrencesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMaintenanceOccurrencesId(ctx context.Context, id MaintenanceOccurrencesId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMaintenanceOccurrencesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMaintenanceOccurrencesId(ctx context.Context, id MaintenanceOccurrencesId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMaintenanceOccurrencesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMaintenanceOccurrencesIdWithBody(ctx context.Context, id MaintenanceOccurrencesId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMaintenanceOccurrencesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMaintenanceOccurrencesId(ctx context.Context, id MaintenanceOccurrencesId, body PutMaintenanceOccurrencesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMaintenanceOccurrencesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMaintenanceOccurrencesIdWithFormdataBody(ctx context.Context, id MaintenanceOccurrencesId, body PutMaintenanceOccurrencesIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMaintenanceOccurrencesIdRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMaintenanceId(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMaintenanceIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMaintenanceId(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMaintenanceIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMaintenanceIdWithBody(ctx context.Context, id MaintenanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMaintenanceIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMaintenanceId(ctx context.Context, id MaintenanceId, body PutMaintenanceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMaintenanceIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMaintenanceIdWithFormdataBody(ctx context.Context, id MaintenanceId, body PutMaintenanceIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMaintenanceIdRequestWithFormdataBody(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProbes(ctx context.Context, params *GetProbesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProbesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReference(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReferenceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResultsCheckid(ctx context.Context, checkid ResultsCheckid, params *GetResultsCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResultsCheckidRequest(c.Server, checkid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSingle(ctx context.Context, params *GetSingleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSingleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSummaryAverageCheckid(ctx context.Context, checkid SummaryAverageCheckid, params *GetSummaryAverageCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSummaryAverageCheckidRequest(c.Server, checkid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSummaryHoursofdayCheckid(ctx context.Context, checkid SummaryHoursofdayCheckid, params *GetSummaryHoursofdayCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSummaryHoursofdayCheckidRequest(c.Server, checkid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSummaryOutageCheckid(ctx context.Context, checkid SummaryOutageCheckid, params *GetSummaryOutageCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSummaryOutageCheckidRequest(c.Server, checkid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSummaryPerformanceCheckid(ctx context.Context, checkid SummaryPerformanceCheckid, params *GetSummaryPerformanceCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSummaryPerformanceCheckidRequest(c.Server, checkid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSummaryProbesCheckid(ctx context.Context, checkid SummaryProbesCheckid, params *GetSummaryProbesCheckidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSummaryProbesCheckidRequest(c.Server, checkid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllChecks(ctx context.Context, params *GetAllChecksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllChecksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCheckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCheckRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCheck(ctx context.Context, body AddCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCheckRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCheckReportStatusAll(ctx context.Context, params *GetCheckReportStatusAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCheckReportStatusAllRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCheckReportPerformance(ctx context.Context, checkId int64, params *GetCheckReportPerformanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCheckReportPerformanceRequest(c.Server, checkId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCheckReportStatus(ctx context.Context, checkId int64, params *GetCheckReportStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCheckReportStatusRequest(c.Server, checkId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCheck(ctx context.Context, checkID int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCheckRequest(c.Server, checkID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCheck(ctx context.Context, checkID int64, params *GetCheckParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCheckRequest(c.Server, checkID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyCheckWithBody(ctx context.Context, checkID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyCheckRequestWithBody(c.Server, checkID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyCheck(ctx context.Context, checkID int64, body ModifyCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyCheckRequest(c.Server, checkID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTraceroute(ctx context.Context, params *GetTracerouteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracerouteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetActionsRequest generates requests for GetActions
func NewGetActionsRequest(server string, params *GetActionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/actions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Checkids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "checkids", runtime.ParamLocationQuery, *params.Checkids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Userids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userids", runtime.ParamLocationQuery, *params.Userids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Via != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "via", runtime.ParamLocationQuery, *params.Via); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertingContactsRequest generates requests for GetAlertingContacts
func NewGetAlertingContactsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerting/contacts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAlertingContactsRequest calls the generic PostAlertingContacts builder with application/json body
func NewPostAlertingContactsRequest(server string, body PostAlertingContactsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAlertingContactsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAlertingContactsRequestWithBody generates requests for PostAlertingContacts with any type of body
func NewPostAlertingContactsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerting/contacts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAlertingContactsContactidRequest generates requests for DeleteAlertingContactsContactid
func NewDeleteAlertingContactsContactidRequest(server string, contactid int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactid", runtime.ParamLocationPath, contactid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerting/contacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertingContactsContactidRequest generates requests for GetAlertingContactsContactid
func NewGetAlertingContactsContactidRequest(server string, contactid int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactid", runtime.ParamLocationPath, contactid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerting/contacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAlertingContactsContactidRequest calls the generic PutAlertingContactsContactid builder with application/json body
func NewPutAlertingContactsContactidRequest(server string, contactid int, body PutAlertingContactsContactidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAlertingContactsContactidRequestWithBody(server, contactid, "application/json", bodyReader)
}

// NewPutAlertingContactsContactidRequestWithBody generates requests for PutAlertingContactsContactid with any type of body
func NewPutAlertingContactsContactidRequestWithBody(server string, contactid int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactid", runtime.ParamLocationPath, contactid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerting/contacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAlertingTeamsRequest generates requests for GetAlertingTeams
func NewGetAlertingTeamsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerting/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAlertingTeamsRequest calls the generic PostAlertingTeams builder with application/json body
func NewPostAlertingTeamsRequest(server string, body PostAlertingTeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAlertingTeamsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAlertingTeamsRequestWithBody generates requests for PostAlertingTeams with any type of body
func NewPostAlertingTeamsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerting/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAlertingTeamsTeamidRequest generates requests for DeleteAlertingTeamsTeamid
func NewDeleteAlertingTeamsTeamidRequest(server string, teamid int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamid", runtime.ParamLocationPath, teamid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerting/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertingTeamsTeamidRequest generates requests for GetAlertingTeamsTeamid
func NewGetAlertingTeamsTeamidRequest(server string, teamid int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamid", runtime.ParamLocationPath, teamid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerting/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAlertingTeamsTeamidRequest calls the generic PutAlertingTeamsTeamid builder with application/json body
func NewPutAlertingTeamsTeamidRequest(server string, teamid int, body PutAlertingTeamsTeamidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAlertingTeamsTeamidRequestWithBody(server, teamid, "application/json", bodyReader)
}

// NewPutAlertingTeamsTeamidRequestWithBody generates requests for PutAlertingTeamsTeamid with any type of body
func NewPutAlertingTeamsTeamidRequestWithBody(server string, teamid int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamid", runtime.ParamLocationPath, teamid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerting/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAnalysisCheckidRequest generates requests for GetAnalysisCheckid
func NewGetAnalysisCheckidRequest(server string, checkid AnalysisCheckid, params *GetAnalysisCheckidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/analysis/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAnalysisCheckidAnalysisidRequest generates requests for GetAnalysisCheckidAnalysisid
func NewGetAnalysisCheckidAnalysisidRequest(server string, checkid AnalysisCheckid, analysisid AnalysisAnalysisid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "analysisid", runtime.ParamLocationPath, analysisid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/analysis/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteChecksRequest calls the generic DeleteChecks builder with application/json body
func NewDeleteChecksRequest(server string, params *DeleteChecksParams, body DeleteChecksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteChecksRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDeleteChecksRequestWithBody generates requests for DeleteChecks with any type of body
func NewDeleteChecksRequestWithBody(server string, params *DeleteChecksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/checks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "delcheckids", runtime.ParamLocationQuery, params.Delcheckids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetChecksRequest generates requests for GetChecks
func NewGetChecksRequest(server string, params *GetChecksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/checks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Showencryption != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showencryption", runtime.ParamLocationQuery, *params.Showencryption); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_tags", runtime.ParamLocationQuery, *params.IncludeTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeSeverity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_severity", runtime.ParamLocationQuery, *params.IncludeSeverity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChecksRequest calls the generic PostChecks builder with application/json body
func NewPostChecksRequest(server string, body PostChecksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChecksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostChecksRequestWithFormdataBody calls the generic PostChecks builder with application/x-www-form-urlencoded body
func NewPostChecksRequestWithFormdataBody(server string, body PostChecksFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostChecksRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostChecksRequestWithBody generates requests for PostChecks with any type of body
func NewPostChecksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/checks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutChecksRequest calls the generic PutChecks builder with application/json body
func NewPutChecksRequest(server string, body PutChecksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChecksRequestWithBody(server, "application/json", bodyReader)
}

// NewPutChecksRequestWithFormdataBody calls the generic PutChecks builder with application/x-www-form-urlencoded body
func NewPutChecksRequestWithFormdataBody(server string, body PutChecksFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutChecksRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutChecksRequestWithBody generates requests for PutChecks with any type of body
func NewPutChecksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/checks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteChecksCheckidRequest generates requests for DeleteChecksCheckid
func NewDeleteChecksCheckidRequest(server string, checkid int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/checks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChecksCheckidRequest generates requests for GetChecksCheckid
func NewGetChecksCheckidRequest(server string, checkid int, params *GetChecksCheckidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/checks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeTeams != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_teams", runtime.ParamLocationQuery, *params.IncludeTeams); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutChecksCheckidRequest calls the generic PutChecksCheckid builder with application/json body
func NewPutChecksCheckidRequest(server string, checkid int, body PutChecksCheckidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutChecksCheckidRequestWithBody(server, checkid, "application/json", bodyReader)
}

// NewPutChecksCheckidRequestWithFormdataBody calls the generic PutChecksCheckid builder with application/x-www-form-urlencoded body
func NewPutChecksCheckidRequestWithFormdataBody(server string, checkid int, body PutChecksCheckidFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutChecksCheckidRequestWithBody(server, checkid, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutChecksCheckidRequestWithBody generates requests for PutChecksCheckid with any type of body
func NewPutChecksCheckidRequestWithBody(server string, checkid int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/checks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCreditsRequest generates requests for GetCredits
func NewGetCreditsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMaintenanceRequest generates requests for DeleteMaintenance
func NewDeleteMaintenanceRequest(server string, params *DeleteMaintenanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "maintenanceids", runtime.ParamLocationQuery, params.Maintenanceids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMaintenanceRequest generates requests for GetMaintenance
func NewGetMaintenanceRequest(server string, params *GetMaintenanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Orderby != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderby", runtime.ParamLocationQuery, *params.Orderby); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMaintenanceRequest calls the generic PostMaintenance builder with application/json body
func NewPostMaintenanceRequest(server string, body PostMaintenanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMaintenanceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMaintenanceRequestWithFormdataBody calls the generic PostMaintenance builder with application/x-www-form-urlencoded body
func NewPostMaintenanceRequestWithFormdataBody(server string, body PostMaintenanceFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostMaintenanceRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostMaintenanceRequestWithBody generates requests for PostMaintenance with any type of body
func NewPostMaintenanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMaintenanceOccurrencesRequest generates requests for DeleteMaintenanceOccurrences
func NewDeleteMaintenanceOccurrencesRequest(server string, params *DeleteMaintenanceOccurrencesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance.occurrences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "occurenceids", runtime.ParamLocationQuery, params.Occurenceids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMaintenanceOccurrencesRequest generates requests for GetMaintenanceOccurrences
func NewGetMaintenanceOccurrencesRequest(server string, params *GetMaintenanceOccurrencesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance.occurrences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Maintenanceid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maintenanceid", runtime.ParamLocationQuery, *params.Maintenanceid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMaintenanceOccurrencesIdRequest generates requests for DeleteMaintenanceOccurrencesId
func NewDeleteMaintenanceOccurrencesIdRequest(server string, id MaintenanceOccurrencesId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance.occurrences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMaintenanceOccurrencesIdRequest generates requests for GetMaintenanceOccurrencesId
func NewGetMaintenanceOccurrencesIdRequest(server string, id MaintenanceOccurrencesId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance.occurrences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutMaintenanceOccurrencesIdRequest calls the generic PutMaintenanceOccurrencesId builder with application/json body
func NewPutMaintenanceOccurrencesIdRequest(server string, id MaintenanceOccurrencesId, body PutMaintenanceOccurrencesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMaintenanceOccurrencesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutMaintenanceOccurrencesIdRequestWithFormdataBody calls the generic PutMaintenanceOccurrencesId builder with application/x-www-form-urlencoded body
func NewPutMaintenanceOccurrencesIdRequestWithFormdataBody(server string, id MaintenanceOccurrencesId, body PutMaintenanceOccurrencesIdFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutMaintenanceOccurrencesIdRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutMaintenanceOccurrencesIdRequestWithBody generates requests for PutMaintenanceOccurrencesId with any type of body
func NewPutMaintenanceOccurrencesIdRequestWithBody(server string, id MaintenanceOccurrencesId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance.occurrences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMaintenanceIdRequest generates requests for DeleteMaintenanceId
func NewDeleteMaintenanceIdRequest(server string, id MaintenanceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMaintenanceIdRequest generates requests for GetMaintenanceId
func NewGetMaintenanceIdRequest(server string, id MaintenanceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutMaintenanceIdRequest calls the generic PutMaintenanceId builder with application/json body
func NewPutMaintenanceIdRequest(server string, id MaintenanceId, body PutMaintenanceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMaintenanceIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutMaintenanceIdRequestWithFormdataBody calls the generic PutMaintenanceId builder with application/x-www-form-urlencoded body
func NewPutMaintenanceIdRequestWithFormdataBody(server string, id MaintenanceId, body PutMaintenanceIdFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutMaintenanceIdRequestWithBody(server, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutMaintenanceIdRequestWithBody generates requests for PutMaintenanceId with any type of body
func NewPutMaintenanceIdRequestWithBody(server string, id MaintenanceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maintenance/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProbesRequest generates requests for GetProbes
func NewGetProbesRequest(server string, params *GetProbesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/probes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Onlyactive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "onlyactive", runtime.ParamLocationQuery, *params.Onlyactive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Includedeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includedeleted", runtime.ParamLocationQuery, *params.Includedeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReferenceRequest generates requests for GetReference
func NewGetReferenceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reference")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResultsCheckidRequest generates requests for GetResultsCheckid
func NewGetResultsCheckidRequest(server string, checkid ResultsCheckid, params *GetResultsCheckidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/results/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Probes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "probes", runtime.ParamLocationQuery, *params.Probes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Includeanalysis != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeanalysis", runtime.ParamLocationQuery, *params.Includeanalysis); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Maxresponse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxresponse", runtime.ParamLocationQuery, *params.Maxresponse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Minresponse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minresponse", runtime.ParamLocationQuery, *params.Minresponse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSingleRequest generates requests for GetSingle
func NewGetSingleRequest(server string, params *GetSingleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/single")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.QueryParameters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Query Parameters", runtime.ParamLocationQuery, *params.QueryParameters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSummaryAverageCheckidRequest generates requests for GetSummaryAverageCheckid
func NewGetSummaryAverageCheckidRequest(server string, checkid SummaryAverageCheckid, params *GetSummaryAverageCheckidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/summary.average/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Probes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "probes", runtime.ParamLocationQuery, *params.Probes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Includeuptime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeuptime", runtime.ParamLocationQuery, *params.Includeuptime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Bycountry != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bycountry", runtime.ParamLocationQuery, *params.Bycountry); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Byprobe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "byprobe", runtime.ParamLocationQuery, *params.Byprobe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSummaryHoursofdayCheckidRequest generates requests for GetSummaryHoursofdayCheckid
func NewGetSummaryHoursofdayCheckidRequest(server string, checkid SummaryHoursofdayCheckid, params *GetSummaryHoursofdayCheckidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/summary.hoursofday/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Probes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "probes", runtime.ParamLocationQuery, *params.Probes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uselocaltime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uselocaltime", runtime.ParamLocationQuery, *params.Uselocaltime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSummaryOutageCheckidRequest generates requests for GetSummaryOutageCheckid
func NewGetSummaryOutageCheckidRequest(server string, checkid SummaryOutageCheckid, params *GetSummaryOutageCheckidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/summary.outage/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSummaryPerformanceCheckidRequest generates requests for GetSummaryPerformanceCheckid
func NewGetSummaryPerformanceCheckidRequest(server string, checkid SummaryPerformanceCheckid, params *GetSummaryPerformanceCheckidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/summary.performance/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Resolution != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolution", runtime.ParamLocationQuery, *params.Resolution); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Includeuptime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeuptime", runtime.ParamLocationQuery, *params.Includeuptime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Probes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "probes", runtime.ParamLocationQuery, *params.Probes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSummaryProbesCheckidRequest generates requests for GetSummaryProbesCheckid
func NewGetSummaryProbesCheckidRequest(server string, checkid SummaryProbesCheckid, params *GetSummaryProbesCheckidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "checkid", runtime.ParamLocationPath, checkid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/summary.probes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllChecksRequest generates requests for GetAllChecks
func NewGetAllChecksRequest(server string, params *GetAllChecksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tms/check")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExtendedTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "extended_tags", runtime.ParamLocationQuery, *params.ExtendedTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCheckRequest calls the generic AddCheck builder with application/json body
func NewAddCheckRequest(server string, body AddCheckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCheckRequestWithBody(server, "application/json", bodyReader)
}

// NewAddCheckRequestWithBody generates requests for AddCheck with any type of body
func NewAddCheckRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tms/check")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCheckReportStatusAllRequest generates requests for GetCheckReportStatusAll
func NewGetCheckReportStatusAllRequest(server string, params *GetCheckReportStatusAllParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tms/check/report/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OmitEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "omit_empty", runtime.ParamLocationQuery, *params.OmitEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCheckReportPerformanceRequest generates requests for GetCheckReportPerformance
func NewGetCheckReportPerformanceRequest(server string, checkId int64, params *GetCheckReportPerformanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "check_id", runtime.ParamLocationPath, checkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tms/check/%s/report/performance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Resolution != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolution", runtime.ParamLocationQuery, *params.Resolution); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeUptime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_uptime", runtime.ParamLocationQuery, *params.IncludeUptime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCheckReportStatusRequest generates requests for GetCheckReportStatus
func NewGetCheckReportStatusRequest(server string, checkId int64, params *GetCheckReportStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "check_id", runtime.ParamLocationPath, checkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tms/check/%s/report/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCheckRequest generates requests for DeleteCheck
func NewDeleteCheckRequest(server string, checkID int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cid", runtime.ParamLocationPath, checkID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tms/check/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCheckRequest generates requests for GetCheck
func NewGetCheckRequest(server string, checkID int64, params *GetCheckParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cid", runtime.ParamLocationPath, checkID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tms/check/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExtendedTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "extended_tags", runtime.ParamLocationQuery, *params.ExtendedTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyCheckRequest calls the generic ModifyCheck builder with application/json body
func NewModifyCheckRequest(server string, checkID int64, body ModifyCheckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyCheckRequestWithBody(server, checkID, "application/json", bodyReader)
}

// NewModifyCheckRequestWithBody generates requests for ModifyCheck with any type of body
func NewModifyCheckRequestWithBody(server string, checkID int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cid", runtime.ParamLocationPath, checkID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tms/check/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTracerouteRequest generates requests for GetTraceroute
func NewGetTracerouteRequest(server string, params *GetTracerouteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/traceroute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "host", runtime.ParamLocationQuery, params.Host); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Probeid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "probeid", runtime.ParamLocationQuery, *params.Probeid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetActionsWithResponse request
	GetActionsWithResponse(ctx context.Context, params *GetActionsParams, reqEditors ...RequestEditorFn) (*GetActionsResponse, error)

	// GetAlertingContactsWithResponse request
	GetAlertingContactsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertingContactsResponse, error)

	// PostAlertingContactsWithBodyWithResponse request with any body
	PostAlertingContactsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertingContactsResponse, error)

	PostAlertingContactsWithResponse(ctx context.Context, body PostAlertingContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertingContactsResponse, error)

	// DeleteAlertingContactsContactidWithResponse request
	DeleteAlertingContactsContactidWithResponse(ctx context.Context, contactid int, reqEditors ...RequestEditorFn) (*DeleteAlertingContactsContactidResponse, error)

	// GetAlertingContactsContactidWithResponse request
	GetAlertingContactsContactidWithResponse(ctx context.Context, contactid int, reqEditors ...RequestEditorFn) (*GetAlertingContactsContactidResponse, error)

	// PutAlertingContactsContactidWithBodyWithResponse request with any body
	PutAlertingContactsContactidWithBodyWithResponse(ctx context.Context, contactid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAlertingContactsContactidResponse, error)

	PutAlertingContactsContactidWithResponse(ctx context.Context, contactid int, body PutAlertingContactsContactidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAlertingContactsContactidResponse, error)

	// GetAlertingTeamsWithResponse request
	GetAlertingTeamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertingTeamsResponse, error)

	// PostAlertingTeamsWithBodyWithResponse request with any body
	PostAlertingTeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertingTeamsResponse, error)

	PostAlertingTeamsWithResponse(ctx context.Context, body PostAlertingTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertingTeamsResponse, error)

	// DeleteAlertingTeamsTeamidWithResponse request
	DeleteAlertingTeamsTeamidWithResponse(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*DeleteAlertingTeamsTeamidResponse, error)

	// GetAlertingTeamsTeamidWithResponse request
	GetAlertingTeamsTeamidWithResponse(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*GetAlertingTeamsTeamidResponse, error)

	// PutAlertingTeamsTeamidWithBodyWithResponse request with any body
	PutAlertingTeamsTeamidWithBodyWithResponse(ctx context.Context, teamid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAlertingTeamsTeamidResponse, error)

	PutAlertingTeamsTeamidWithResponse(ctx context.Context, teamid int, body PutAlertingTeamsTeamidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAlertingTeamsTeamidResponse, error)

	// GetAnalysisCheckidWithResponse request
	GetAnalysisCheckidWithResponse(ctx context.Context, checkid AnalysisCheckid, params *GetAnalysisCheckidParams, reqEditors ...RequestEditorFn) (*GetAnalysisCheckidResponse, error)

	// GetAnalysisCheckidAnalysisidWithResponse request
	GetAnalysisCheckidAnalysisidWithResponse(ctx context.Context, checkid AnalysisCheckid, analysisid AnalysisAnalysisid, reqEditors ...RequestEditorFn) (*GetAnalysisCheckidAnalysisidResponse, error)

	// DeleteChecksWithBodyWithResponse request with any body
	DeleteChecksWithBodyWithResponse(ctx context.Context, params *DeleteChecksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteChecksResponse, error)

	DeleteChecksWithResponse(ctx context.Context, params *DeleteChecksParams, body DeleteChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteChecksResponse, error)

	// GetChecksWithResponse request
	GetChecksWithResponse(ctx context.Context, params *GetChecksParams, reqEditors ...RequestEditorFn) (*GetChecksResponse, error)

	// PostChecksWithBodyWithResponse request with any body
	PostChecksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChecksResponse, error)

	PostChecksWithResponse(ctx context.Context, body PostChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChecksResponse, error)

	PostChecksWithFormdataBodyWithResponse(ctx context.Context, body PostChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostChecksResponse, error)

	// PutChecksWithBodyWithResponse request with any body
	PutChecksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChecksResponse, error)

	PutChecksWithResponse(ctx context.Context, body PutChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChecksResponse, error)

	PutChecksWithFormdataBodyWithResponse(ctx context.Context, body PutChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutChecksResponse, error)

	// DeleteChecksCheckidWithResponse request
	DeleteChecksCheckidWithResponse(ctx context.Context, checkid int, reqEditors ...RequestEditorFn) (*DeleteChecksCheckidResponse, error)

	// GetChecksCheckidWithResponse request
	GetChecksCheckidWithResponse(ctx context.Context, checkid int, params *GetChecksCheckidParams, reqEditors ...RequestEditorFn) (*GetChecksCheckidResponse, error)

	// PutChecksCheckidWithBodyWithResponse request with any body
	PutChecksCheckidWithBodyWithResponse(ctx context.Context, checkid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChecksCheckidResponse, error)

	PutChecksCheckidWithResponse(ctx context.Context, checkid int, body PutChecksCheckidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChecksCheckidResponse, error)

	PutChecksCheckidWithFormdataBodyWithResponse(ctx context.Context, checkid int, body PutChecksCheckidFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutChecksCheckidResponse, error)

	// GetCreditsWithResponse request
	GetCreditsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCreditsResponse, error)

	// DeleteMaintenanceWithResponse request
	DeleteMaintenanceWithResponse(ctx context.Context, params *DeleteMaintenanceParams, reqEditors ...RequestEditorFn) (*DeleteMaintenanceResponse, error)

	// GetMaintenanceWithResponse request
	GetMaintenanceWithResponse(ctx context.Context, params *GetMaintenanceParams, reqEditors ...RequestEditorFn) (*GetMaintenanceResponse, error)

	// PostMaintenanceWithBodyWithResponse request with any body
	PostMaintenanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMaintenanceResponse, error)

	PostMaintenanceWithResponse(ctx context.Context, body PostMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMaintenanceResponse, error)

	PostMaintenanceWithFormdataBodyWithResponse(ctx context.Context, body PostMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostMaintenanceResponse, error)

	// DeleteMaintenanceOccurrencesWithResponse request
	DeleteMaintenanceOccurrencesWithResponse(ctx context.Context, params *DeleteMaintenanceOccurrencesParams, reqEditors ...RequestEditorFn) (*DeleteMaintenanceOccurrencesResponse, error)

	// GetMaintenanceOccurrencesWithResponse request
	GetMaintenanceOccurrencesWithResponse(ctx context.Context, params *GetMaintenanceOccurrencesParams, reqEditors ...RequestEditorFn) (*GetMaintenanceOccurrencesResponse, error)

	// DeleteMaintenanceOccurrencesIdWithResponse request
	DeleteMaintenanceOccurrencesIdWithResponse(ctx context.Context, id MaintenanceOccurrencesId, reqEditors ...RequestEditorFn) (*DeleteMaintenanceOccurrencesIdResponse, error)

	// GetMaintenanceOccurrencesIdWithResponse request
	GetMaintenanceOccurrencesIdWithResponse(ctx context.Context, id MaintenanceOccurrencesId, reqEditors ...RequestEditorFn) (*GetMaintenanceOccurrencesIdResponse, error)

	// PutMaintenanceOccurrencesIdWithBodyWithResponse request with any body
	PutMaintenanceOccurrencesIdWithBodyWithResponse(ctx context.Context, id MaintenanceOccurrencesId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMaintenanceOccurrencesIdResponse, error)

	PutMaintenanceOccurrencesIdWithResponse(ctx context.Context, id MaintenanceOccurrencesId, body PutMaintenanceOccurrencesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMaintenanceOccurrencesIdResponse, error)

	PutMaintenanceOccurrencesIdWithFormdataBodyWithResponse(ctx context.Context, id MaintenanceOccurrencesId, body PutMaintenanceOccurrencesIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutMaintenanceOccurrencesIdResponse, error)

	// DeleteMaintenanceIdWithResponse request
	DeleteMaintenanceIdWithResponse(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*DeleteMaintenanceIdResponse, error)

	// GetMaintenanceIdWithResponse request
	GetMaintenanceIdWithResponse(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*GetMaintenanceIdResponse, error)

	// PutMaintenanceIdWithBodyWithResponse request with any body
	PutMaintenanceIdWithBodyWithResponse(ctx context.Context, id MaintenanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMaintenanceIdResponse, error)

	PutMaintenanceIdWithResponse(ctx context.Context, id MaintenanceId, body PutMaintenanceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMaintenanceIdResponse, error)

	PutMaintenanceIdWithFormdataBodyWithResponse(ctx context.Context, id MaintenanceId, body PutMaintenanceIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutMaintenanceIdResponse, error)

	// GetProbesWithResponse request
	GetProbesWithResponse(ctx context.Context, params *GetProbesParams, reqEditors ...RequestEditorFn) (*GetProbesResponse, error)

	// GetReferenceWithResponse request
	GetReferenceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReferenceResponse, error)

	// GetResultsCheckidWithResponse request
	GetResultsCheckidWithResponse(ctx context.Context, checkid ResultsCheckid, params *GetResultsCheckidParams, reqEditors ...RequestEditorFn) (*GetResultsCheckidResponse, error)

	// GetSingleWithResponse request
	GetSingleWithResponse(ctx context.Context, params *GetSingleParams, reqEditors ...RequestEditorFn) (*GetSingleResponse, error)

	// GetSummaryAverageCheckidWithResponse request
	GetSummaryAverageCheckidWithResponse(ctx context.Context, checkid SummaryAverageCheckid, params *GetSummaryAverageCheckidParams, reqEditors ...RequestEditorFn) (*GetSummaryAverageCheckidResponse, error)

	// GetSummaryHoursofdayCheckidWithResponse request
	GetSummaryHoursofdayCheckidWithResponse(ctx context.Context, checkid SummaryHoursofdayCheckid, params *GetSummaryHoursofdayCheckidParams, reqEditors ...RequestEditorFn) (*GetSummaryHoursofdayCheckidResponse, error)

	// GetSummaryOutageCheckidWithResponse request
	GetSummaryOutageCheckidWithResponse(ctx context.Context, checkid SummaryOutageCheckid, params *GetSummaryOutageCheckidParams, reqEditors ...RequestEditorFn) (*GetSummaryOutageCheckidResponse, error)

	// GetSummaryPerformanceCheckidWithResponse request
	GetSummaryPerformanceCheckidWithResponse(ctx context.Context, checkid SummaryPerformanceCheckid, params *GetSummaryPerformanceCheckidParams, reqEditors ...RequestEditorFn) (*GetSummaryPerformanceCheckidResponse, error)

	// GetSummaryProbesCheckidWithResponse request
	GetSummaryProbesCheckidWithResponse(ctx context.Context, checkid SummaryProbesCheckid, params *GetSummaryProbesCheckidParams, reqEditors ...RequestEditorFn) (*GetSummaryProbesCheckidResponse, error)

	// GetAllChecksWithResponse request
	GetAllChecksWithResponse(ctx context.Context, params *GetAllChecksParams, reqEditors ...RequestEditorFn) (*GetAllChecksResponse, error)

	// AddCheckWithBodyWithResponse request with any body
	AddCheckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCheckResponse, error)

	AddCheckWithResponse(ctx context.Context, body AddCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCheckResponse, error)

	// GetCheckReportStatusAllWithResponse request
	GetCheckReportStatusAllWithResponse(ctx context.Context, params *GetCheckReportStatusAllParams, reqEditors ...RequestEditorFn) (*GetCheckReportStatusAllResponse, error)

	// GetCheckReportPerformanceWithResponse request
	GetCheckReportPerformanceWithResponse(ctx context.Context, checkId int64, params *GetCheckReportPerformanceParams, reqEditors ...RequestEditorFn) (*GetCheckReportPerformanceResponse, error)

	// GetCheckReportStatusWithResponse request
	GetCheckReportStatusWithResponse(ctx context.Context, checkId int64, params *GetCheckReportStatusParams, reqEditors ...RequestEditorFn) (*GetCheckReportStatusResponse, error)

	// DeleteCheckWithResponse request
	DeleteCheckWithResponse(ctx context.Context, checkID int64, reqEditors ...RequestEditorFn) (*DeleteCheckResponse, error)

	// GetCheckWithResponse request
	GetCheckWithResponse(ctx context.Context, checkID int64, params *GetCheckParams, reqEditors ...RequestEditorFn) (*GetCheckResponse, error)

	// ModifyCheckWithBodyWithResponse request with any body
	ModifyCheckWithBodyWithResponse(ctx context.Context, checkID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyCheckResponse, error)

	ModifyCheckWithResponse(ctx context.Context, checkID int64, body ModifyCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyCheckResponse, error)

	// GetTracerouteWithResponse request
	GetTracerouteWithResponse(ctx context.Context, params *GetTracerouteParams, reqEditors ...RequestEditorFn) (*GetTracerouteResponse, error)
}

type GetActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionsAlertsEntry
}

// Status returns HTTPResponse.Status
func (r GetActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertingContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactsList
}

// Status returns HTTPResponse.Status
func (r GetAlertingContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertingContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAlertingContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Contact *struct {
			// Id ID of the created contact
			Id *string `json:"id,omitempty"`
		} `json:"contact,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostAlertingContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAlertingContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAlertingContactsContactidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteAlertingContactsContactidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAlertingContactsContactidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertingContactsContactidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contact
}

// Status returns HTTPResponse.Status
func (r GetAlertingContactsContactidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertingContactsContactidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAlertingContactsContactidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contact
}

// Status returns HTTPResponse.Status
func (r PutAlertingContactsContactidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAlertingContactsContactidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertingTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Teams
}

// Status returns HTTPResponse.Status
func (r GetAlertingTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertingTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAlertingTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Team *struct {
			// Id ID of the created team
			Id *string `json:"id,omitempty"`
		} `json:"team,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostAlertingTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAlertingTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAlertingTeamsTeamidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteAlertingTeamsTeamidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAlertingTeamsTeamidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertingTeamsTeamidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamID
}

// Status returns HTTPResponse.Status
func (r GetAlertingTeamsTeamidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertingTeamsTeamidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAlertingTeamsTeamidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamID
}

// Status returns HTTPResponse.Status
func (r PutAlertingTeamsTeamidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAlertingTeamsTeamidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnalysisCheckidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AnalysisRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetAnalysisCheckidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnalysisCheckidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnalysisCheckidAnalysisidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAnalysisCheckidAnalysisidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnalysisCheckidAnalysisidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Checks
}

// Status returns HTTPResponse.Status
func (r GetChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Check *struct {
			// Id Created check ID.
			Id *int `json:"id,omitempty"`

			// Name Created check name.
			Name *string `json:"name,omitempty"`
		} `json:"check,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteChecksCheckidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteChecksCheckidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteChecksCheckidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChecksCheckidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DetailedCheck
}

// Status returns HTTPResponse.Status
func (r GetChecksCheckidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChecksCheckidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutChecksCheckidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutChecksCheckidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutChecksCheckidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreditsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreditsRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetCreditsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreditsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMaintenanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceDeleteRespAttrs
}

// Status returns HTTPResponse.Status
func (r DeleteMaintenanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMaintenanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMaintenanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetMaintenanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMaintenanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMaintenanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenancePostRespAttrs
}

// Status returns HTTPResponse.Status
func (r PostMaintenanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMaintenanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMaintenanceOccurrencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceOccurrencesDeleteRespAttrs
}

// Status returns HTTPResponse.Status
func (r DeleteMaintenanceOccurrencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMaintenanceOccurrencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMaintenanceOccurrencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceOccurrencesRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetMaintenanceOccurrencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMaintenanceOccurrencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMaintenanceOccurrencesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceOccurrencesIdDeleteRespAttrs
}

// Status returns HTTPResponse.Status
func (r DeleteMaintenanceOccurrencesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMaintenanceOccurrencesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMaintenanceOccurrencesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceOccurrencesIdRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetMaintenanceOccurrencesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMaintenanceOccurrencesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMaintenanceOccurrencesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceOccurrencesIdPutRespAttrs
}

// Status returns HTTPResponse.Status
func (r PutMaintenanceOccurrencesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMaintenanceOccurrencesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMaintenanceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceIdDeleteRespAttrs
}

// Status returns HTTPResponse.Status
func (r DeleteMaintenanceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMaintenanceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMaintenanceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceIdRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetMaintenanceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMaintenanceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMaintenanceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceIdPutRespAttrs
}

// Status returns HTTPResponse.Status
func (r PutMaintenanceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMaintenanceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProbesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Probes
}

// Status returns HTTPResponse.Status
func (r GetProbesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProbesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *References
}

// Status returns HTTPResponse.Status
func (r GetReferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResultsCheckidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetResultsCheckidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResultsCheckidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSingleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleResp
}

// Status returns HTTPResponse.Status
func (r GetSingleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSingleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSummaryAverageCheckidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SummaryRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetSummaryAverageCheckidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSummaryAverageCheckidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSummaryHoursofdayCheckidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SummaryHoursofdayRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetSummaryHoursofdayCheckidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSummaryHoursofdayCheckidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSummaryOutageCheckidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SummaryOutageRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetSummaryOutageCheckidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSummaryOutageCheckidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSummaryPerformanceCheckidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SummaryPerformanceRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetSummaryPerformanceCheckidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSummaryPerformanceCheckidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSummaryProbesCheckidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SummaryProbesRespAttrs
}

// Status returns HTTPResponse.Status
func (r GetSummaryProbesCheckidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSummaryProbesCheckidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksAll
}

// Status returns HTTPResponse.Status
func (r GetAllChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckAddedResponse
}

// Status returns HTTPResponse.Status
func (r AddCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCheckReportStatusAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportStatusAll
}

// Status returns HTTPResponse.Status
func (r GetCheckReportStatusAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCheckReportStatusAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCheckReportPerformanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportPerformance
}

// Status returns HTTPResponse.Status
func (r GetCheckReportPerformanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCheckReportPerformanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCheckReportStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportStatusSingle
}

// Status returns HTTPResponse.Status
func (r GetCheckReportStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCheckReportStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckDeletedResponse
}

// Status returns HTTPResponse.Status
func (r DeleteCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckDetailed
}

// Status returns HTTPResponse.Status
func (r GetCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckModifiedResponse
}

// Status returns HTTPResponse.Status
func (r ModifyCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracerouteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Traceroute
}

// Status returns HTTPResponse.Status
func (r GetTracerouteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracerouteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetActionsWithResponse request returning *GetActionsResponse
func (c *ClientWithResponses) GetActionsWithResponse(ctx context.Context, params *GetActionsParams, reqEditors ...RequestEditorFn) (*GetActionsResponse, error) {
	rsp, err := c.GetActions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActionsResponse(rsp)
}

// GetAlertingContactsWithResponse request returning *GetAlertingContactsResponse
func (c *ClientWithResponses) GetAlertingContactsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertingContactsResponse, error) {
	rsp, err := c.GetAlertingContacts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertingContactsResponse(rsp)
}

// PostAlertingContactsWithBodyWithResponse request with arbitrary body returning *PostAlertingContactsResponse
func (c *ClientWithResponses) PostAlertingContactsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertingContactsResponse, error) {
	rsp, err := c.PostAlertingContactsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertingContactsResponse(rsp)
}

func (c *ClientWithResponses) PostAlertingContactsWithResponse(ctx context.Context, body PostAlertingContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertingContactsResponse, error) {
	rsp, err := c.PostAlertingContacts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertingContactsResponse(rsp)
}

// DeleteAlertingContactsContactidWithResponse request returning *DeleteAlertingContactsContactidResponse
func (c *ClientWithResponses) DeleteAlertingContactsContactidWithResponse(ctx context.Context, contactid int, reqEditors ...RequestEditorFn) (*DeleteAlertingContactsContactidResponse, error) {
	rsp, err := c.DeleteAlertingContactsContactid(ctx, contactid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAlertingContactsContactidResponse(rsp)
}

// GetAlertingContactsContactidWithResponse request returning *GetAlertingContactsContactidResponse
func (c *ClientWithResponses) GetAlertingContactsContactidWithResponse(ctx context.Context, contactid int, reqEditors ...RequestEditorFn) (*GetAlertingContactsContactidResponse, error) {
	rsp, err := c.GetAlertingContactsContactid(ctx, contactid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertingContactsContactidResponse(rsp)
}

// PutAlertingContactsContactidWithBodyWithResponse request with arbitrary body returning *PutAlertingContactsContactidResponse
func (c *ClientWithResponses) PutAlertingContactsContactidWithBodyWithResponse(ctx context.Context, contactid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAlertingContactsContactidResponse, error) {
	rsp, err := c.PutAlertingContactsContactidWithBody(ctx, contactid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertingContactsContactidResponse(rsp)
}

func (c *ClientWithResponses) PutAlertingContactsContactidWithResponse(ctx context.Context, contactid int, body PutAlertingContactsContactidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAlertingContactsContactidResponse, error) {
	rsp, err := c.PutAlertingContactsContactid(ctx, contactid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertingContactsContactidResponse(rsp)
}

// GetAlertingTeamsWithResponse request returning *GetAlertingTeamsResponse
func (c *ClientWithResponses) GetAlertingTeamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertingTeamsResponse, error) {
	rsp, err := c.GetAlertingTeams(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertingTeamsResponse(rsp)
}

// PostAlertingTeamsWithBodyWithResponse request with arbitrary body returning *PostAlertingTeamsResponse
func (c *ClientWithResponses) PostAlertingTeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAlertingTeamsResponse, error) {
	rsp, err := c.PostAlertingTeamsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertingTeamsResponse(rsp)
}

func (c *ClientWithResponses) PostAlertingTeamsWithResponse(ctx context.Context, body PostAlertingTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAlertingTeamsResponse, error) {
	rsp, err := c.PostAlertingTeams(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertingTeamsResponse(rsp)
}

// DeleteAlertingTeamsTeamidWithResponse request returning *DeleteAlertingTeamsTeamidResponse
func (c *ClientWithResponses) DeleteAlertingTeamsTeamidWithResponse(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*DeleteAlertingTeamsTeamidResponse, error) {
	rsp, err := c.DeleteAlertingTeamsTeamid(ctx, teamid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAlertingTeamsTeamidResponse(rsp)
}

// GetAlertingTeamsTeamidWithResponse request returning *GetAlertingTeamsTeamidResponse
func (c *ClientWithResponses) GetAlertingTeamsTeamidWithResponse(ctx context.Context, teamid int, reqEditors ...RequestEditorFn) (*GetAlertingTeamsTeamidResponse, error) {
	rsp, err := c.GetAlertingTeamsTeamid(ctx, teamid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertingTeamsTeamidResponse(rsp)
}

// PutAlertingTeamsTeamidWithBodyWithResponse request with arbitrary body returning *PutAlertingTeamsTeamidResponse
func (c *ClientWithResponses) PutAlertingTeamsTeamidWithBodyWithResponse(ctx context.Context, teamid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAlertingTeamsTeamidResponse, error) {
	rsp, err := c.PutAlertingTeamsTeamidWithBody(ctx, teamid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertingTeamsTeamidResponse(rsp)
}

func (c *ClientWithResponses) PutAlertingTeamsTeamidWithResponse(ctx context.Context, teamid int, body PutAlertingTeamsTeamidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAlertingTeamsTeamidResponse, error) {
	rsp, err := c.PutAlertingTeamsTeamid(ctx, teamid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAlertingTeamsTeamidResponse(rsp)
}

// GetAnalysisCheckidWithResponse request returning *GetAnalysisCheckidResponse
func (c *ClientWithResponses) GetAnalysisCheckidWithResponse(ctx context.Context, checkid AnalysisCheckid, params *GetAnalysisCheckidParams, reqEditors ...RequestEditorFn) (*GetAnalysisCheckidResponse, error) {
	rsp, err := c.GetAnalysisCheckid(ctx, checkid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnalysisCheckidResponse(rsp)
}

// GetAnalysisCheckidAnalysisidWithResponse request returning *GetAnalysisCheckidAnalysisidResponse
func (c *ClientWithResponses) GetAnalysisCheckidAnalysisidWithResponse(ctx context.Context, checkid AnalysisCheckid, analysisid AnalysisAnalysisid, reqEditors ...RequestEditorFn) (*GetAnalysisCheckidAnalysisidResponse, error) {
	rsp, err := c.GetAnalysisCheckidAnalysisid(ctx, checkid, analysisid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnalysisCheckidAnalysisidResponse(rsp)
}

// DeleteChecksWithBodyWithResponse request with arbitrary body returning *DeleteChecksResponse
func (c *ClientWithResponses) DeleteChecksWithBodyWithResponse(ctx context.Context, params *DeleteChecksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteChecksResponse, error) {
	rsp, err := c.DeleteChecksWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChecksResponse(rsp)
}

func (c *ClientWithResponses) DeleteChecksWithResponse(ctx context.Context, params *DeleteChecksParams, body DeleteChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteChecksResponse, error) {
	rsp, err := c.DeleteChecks(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChecksResponse(rsp)
}

// GetChecksWithResponse request returning *GetChecksResponse
func (c *ClientWithResponses) GetChecksWithResponse(ctx context.Context, params *GetChecksParams, reqEditors ...RequestEditorFn) (*GetChecksResponse, error) {
	rsp, err := c.GetChecks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChecksResponse(rsp)
}

// PostChecksWithBodyWithResponse request with arbitrary body returning *PostChecksResponse
func (c *ClientWithResponses) PostChecksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChecksResponse, error) {
	rsp, err := c.PostChecksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChecksResponse(rsp)
}

func (c *ClientWithResponses) PostChecksWithResponse(ctx context.Context, body PostChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChecksResponse, error) {
	rsp, err := c.PostChecks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChecksResponse(rsp)
}

func (c *ClientWithResponses) PostChecksWithFormdataBodyWithResponse(ctx context.Context, body PostChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostChecksResponse, error) {
	rsp, err := c.PostChecksWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChecksResponse(rsp)
}

// PutChecksWithBodyWithResponse request with arbitrary body returning *PutChecksResponse
func (c *ClientWithResponses) PutChecksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChecksResponse, error) {
	rsp, err := c.PutChecksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChecksResponse(rsp)
}

func (c *ClientWithResponses) PutChecksWithResponse(ctx context.Context, body PutChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChecksResponse, error) {
	rsp, err := c.PutChecks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChecksResponse(rsp)
}

func (c *ClientWithResponses) PutChecksWithFormdataBodyWithResponse(ctx context.Context, body PutChecksFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutChecksResponse, error) {
	rsp, err := c.PutChecksWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChecksResponse(rsp)
}

// DeleteChecksCheckidWithResponse request returning *DeleteChecksCheckidResponse
func (c *ClientWithResponses) DeleteChecksCheckidWithResponse(ctx context.Context, checkid int, reqEditors ...RequestEditorFn) (*DeleteChecksCheckidResponse, error) {
	rsp, err := c.DeleteChecksCheckid(ctx, checkid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteChecksCheckidResponse(rsp)
}

// GetChecksCheckidWithResponse request returning *GetChecksCheckidResponse
func (c *ClientWithResponses) GetChecksCheckidWithResponse(ctx context.Context, checkid int, params *GetChecksCheckidParams, reqEditors ...RequestEditorFn) (*GetChecksCheckidResponse, error) {
	rsp, err := c.GetChecksCheckid(ctx, checkid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChecksCheckidResponse(rsp)
}

// PutChecksCheckidWithBodyWithResponse request with arbitrary body returning *PutChecksCheckidResponse
func (c *ClientWithResponses) PutChecksCheckidWithBodyWithResponse(ctx context.Context, checkid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutChecksCheckidResponse, error) {
	rsp, err := c.PutChecksCheckidWithBody(ctx, checkid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChecksCheckidResponse(rsp)
}

func (c *ClientWithResponses) PutChecksCheckidWithResponse(ctx context.Context, checkid int, body PutChecksCheckidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutChecksCheckidResponse, error) {
	rsp, err := c.PutChecksCheckid(ctx, checkid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChecksCheckidResponse(rsp)
}

func (c *ClientWithResponses) PutChecksCheckidWithFormdataBodyWithResponse(ctx context.Context, checkid int, body PutChecksCheckidFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutChecksCheckidResponse, error) {
	rsp, err := c.PutChecksCheckidWithFormdataBody(ctx, checkid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutChecksCheckidResponse(rsp)
}

// GetCreditsWithResponse request returning *GetCreditsResponse
func (c *ClientWithResponses) GetCreditsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCreditsResponse, error) {
	rsp, err := c.GetCredits(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreditsResponse(rsp)
}

// DeleteMaintenanceWithResponse request returning *DeleteMaintenanceResponse
func (c *ClientWithResponses) DeleteMaintenanceWithResponse(ctx context.Context, params *DeleteMaintenanceParams, reqEditors ...RequestEditorFn) (*DeleteMaintenanceResponse, error) {
	rsp, err := c.DeleteMaintenance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMaintenanceResponse(rsp)
}

// GetMaintenanceWithResponse request returning *GetMaintenanceResponse
func (c *ClientWithResponses) GetMaintenanceWithResponse(ctx context.Context, params *GetMaintenanceParams, reqEditors ...RequestEditorFn) (*GetMaintenanceResponse, error) {
	rsp, err := c.GetMaintenance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMaintenanceResponse(rsp)
}

// PostMaintenanceWithBodyWithResponse request with arbitrary body returning *PostMaintenanceResponse
func (c *ClientWithResponses) PostMaintenanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMaintenanceResponse, error) {
	rsp, err := c.PostMaintenanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMaintenanceResponse(rsp)
}

func (c *ClientWithResponses) PostMaintenanceWithResponse(ctx context.Context, body PostMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMaintenanceResponse, error) {
	rsp, err := c.PostMaintenance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMaintenanceResponse(rsp)
}

func (c *ClientWithResponses) PostMaintenanceWithFormdataBodyWithResponse(ctx context.Context, body PostMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostMaintenanceResponse, error) {
	rsp, err := c.PostMaintenanceWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMaintenanceResponse(rsp)
}

// DeleteMaintenanceOccurrencesWithResponse request returning *DeleteMaintenanceOccurrencesResponse
func (c *ClientWithResponses) DeleteMaintenanceOccurrencesWithResponse(ctx context.Context, params *DeleteMaintenanceOccurrencesParams, reqEditors ...RequestEditorFn) (*DeleteMaintenanceOccurrencesResponse, error) {
	rsp, err := c.DeleteMaintenanceOccurrences(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMaintenanceOccurrencesResponse(rsp)
}

// GetMaintenanceOccurrencesWithResponse request returning *GetMaintenanceOccurrencesResponse
func (c *ClientWithResponses) GetMaintenanceOccurrencesWithResponse(ctx context.Context, params *GetMaintenanceOccurrencesParams, reqEditors ...RequestEditorFn) (*GetMaintenanceOccurrencesResponse, error) {
	rsp, err := c.GetMaintenanceOccurrences(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMaintenanceOccurrencesResponse(rsp)
}

// DeleteMaintenanceOccurrencesIdWithResponse request returning *DeleteMaintenanceOccurrencesIdResponse
func (c *ClientWithResponses) DeleteMaintenanceOccurrencesIdWithResponse(ctx context.Context, id MaintenanceOccurrencesId, reqEditors ...RequestEditorFn) (*DeleteMaintenanceOccurrencesIdResponse, error) {
	rsp, err := c.DeleteMaintenanceOccurrencesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMaintenanceOccurrencesIdResponse(rsp)
}

// GetMaintenanceOccurrencesIdWithResponse request returning *GetMaintenanceOccurrencesIdResponse
func (c *ClientWithResponses) GetMaintenanceOccurrencesIdWithResponse(ctx context.Context, id MaintenanceOccurrencesId, reqEditors ...RequestEditorFn) (*GetMaintenanceOccurrencesIdResponse, error) {
	rsp, err := c.GetMaintenanceOccurrencesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMaintenanceOccurrencesIdResponse(rsp)
}

// PutMaintenanceOccurrencesIdWithBodyWithResponse request with arbitrary body returning *PutMaintenanceOccurrencesIdResponse
func (c *ClientWithResponses) PutMaintenanceOccurrencesIdWithBodyWithResponse(ctx context.Context, id MaintenanceOccurrencesId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMaintenanceOccurrencesIdResponse, error) {
	rsp, err := c.PutMaintenanceOccurrencesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMaintenanceOccurrencesIdResponse(rsp)
}

func (c *ClientWithResponses) PutMaintenanceOccurrencesIdWithResponse(ctx context.Context, id MaintenanceOccurrencesId, body PutMaintenanceOccurrencesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMaintenanceOccurrencesIdResponse, error) {
	rsp, err := c.PutMaintenanceOccurrencesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMaintenanceOccurrencesIdResponse(rsp)
}

func (c *ClientWithResponses) PutMaintenanceOccurrencesIdWithFormdataBodyWithResponse(ctx context.Context, id MaintenanceOccurrencesId, body PutMaintenanceOccurrencesIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutMaintenanceOccurrencesIdResponse, error) {
	rsp, err := c.PutMaintenanceOccurrencesIdWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMaintenanceOccurrencesIdResponse(rsp)
}

// DeleteMaintenanceIdWithResponse request returning *DeleteMaintenanceIdResponse
func (c *ClientWithResponses) DeleteMaintenanceIdWithResponse(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*DeleteMaintenanceIdResponse, error) {
	rsp, err := c.DeleteMaintenanceId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMaintenanceIdResponse(rsp)
}

// GetMaintenanceIdWithResponse request returning *GetMaintenanceIdResponse
func (c *ClientWithResponses) GetMaintenanceIdWithResponse(ctx context.Context, id MaintenanceId, reqEditors ...RequestEditorFn) (*GetMaintenanceIdResponse, error) {
	rsp, err := c.GetMaintenanceId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMaintenanceIdResponse(rsp)
}

// PutMaintenanceIdWithBodyWithResponse request with arbitrary body returning *PutMaintenanceIdResponse
func (c *ClientWithResponses) PutMaintenanceIdWithBodyWithResponse(ctx context.Context, id MaintenanceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMaintenanceIdResponse, error) {
	rsp, err := c.PutMaintenanceIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMaintenanceIdResponse(rsp)
}

func (c *ClientWithResponses) PutMaintenanceIdWithResponse(ctx context.Context, id MaintenanceId, body PutMaintenanceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMaintenanceIdResponse, error) {
	rsp, err := c.PutMaintenanceId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMaintenanceIdResponse(rsp)
}

func (c *ClientWithResponses) PutMaintenanceIdWithFormdataBodyWithResponse(ctx context.Context, id MaintenanceId, body PutMaintenanceIdFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutMaintenanceIdResponse, error) {
	rsp, err := c.PutMaintenanceIdWithFormdataBody(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMaintenanceIdResponse(rsp)
}

// GetProbesWithResponse request returning *GetProbesResponse
func (c *ClientWithResponses) GetProbesWithResponse(ctx context.Context, params *GetProbesParams, reqEditors ...RequestEditorFn) (*GetProbesResponse, error) {
	rsp, err := c.GetProbes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProbesResponse(rsp)
}

// GetReferenceWithResponse request returning *GetReferenceResponse
func (c *ClientWithResponses) GetReferenceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReferenceResponse, error) {
	rsp, err := c.GetReference(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReferenceResponse(rsp)
}

// GetResultsCheckidWithResponse request returning *GetResultsCheckidResponse
func (c *ClientWithResponses) GetResultsCheckidWithResponse(ctx context.Context, checkid ResultsCheckid, params *GetResultsCheckidParams, reqEditors ...RequestEditorFn) (*GetResultsCheckidResponse, error) {
	rsp, err := c.GetResultsCheckid(ctx, checkid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResultsCheckidResponse(rsp)
}

// GetSingleWithResponse request returning *GetSingleResponse
func (c *ClientWithResponses) GetSingleWithResponse(ctx context.Context, params *GetSingleParams, reqEditors ...RequestEditorFn) (*GetSingleResponse, error) {
	rsp, err := c.GetSingle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSingleResponse(rsp)
}

// GetSummaryAverageCheckidWithResponse request returning *GetSummaryAverageCheckidResponse
func (c *ClientWithResponses) GetSummaryAverageCheckidWithResponse(ctx context.Context, checkid SummaryAverageCheckid, params *GetSummaryAverageCheckidParams, reqEditors ...RequestEditorFn) (*GetSummaryAverageCheckidResponse, error) {
	rsp, err := c.GetSummaryAverageCheckid(ctx, checkid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSummaryAverageCheckidResponse(rsp)
}

// GetSummaryHoursofdayCheckidWithResponse request returning *GetSummaryHoursofdayCheckidResponse
func (c *ClientWithResponses) GetSummaryHoursofdayCheckidWithResponse(ctx context.Context, checkid SummaryHoursofdayCheckid, params *GetSummaryHoursofdayCheckidParams, reqEditors ...RequestEditorFn) (*GetSummaryHoursofdayCheckidResponse, error) {
	rsp, err := c.GetSummaryHoursofdayCheckid(ctx, checkid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSummaryHoursofdayCheckidResponse(rsp)
}

// GetSummaryOutageCheckidWithResponse request returning *GetSummaryOutageCheckidResponse
func (c *ClientWithResponses) GetSummaryOutageCheckidWithResponse(ctx context.Context, checkid SummaryOutageCheckid, params *GetSummaryOutageCheckidParams, reqEditors ...RequestEditorFn) (*GetSummaryOutageCheckidResponse, error) {
	rsp, err := c.GetSummaryOutageCheckid(ctx, checkid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSummaryOutageCheckidResponse(rsp)
}

// GetSummaryPerformanceCheckidWithResponse request returning *GetSummaryPerformanceCheckidResponse
func (c *ClientWithResponses) GetSummaryPerformanceCheckidWithResponse(ctx context.Context, checkid SummaryPerformanceCheckid, params *GetSummaryPerformanceCheckidParams, reqEditors ...RequestEditorFn) (*GetSummaryPerformanceCheckidResponse, error) {
	rsp, err := c.GetSummaryPerformanceCheckid(ctx, checkid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSummaryPerformanceCheckidResponse(rsp)
}

// GetSummaryProbesCheckidWithResponse request returning *GetSummaryProbesCheckidResponse
func (c *ClientWithResponses) GetSummaryProbesCheckidWithResponse(ctx context.Context, checkid SummaryProbesCheckid, params *GetSummaryProbesCheckidParams, reqEditors ...RequestEditorFn) (*GetSummaryProbesCheckidResponse, error) {
	rsp, err := c.GetSummaryProbesCheckid(ctx, checkid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSummaryProbesCheckidResponse(rsp)
}

// GetAllChecksWithResponse request returning *GetAllChecksResponse
func (c *ClientWithResponses) GetAllChecksWithResponse(ctx context.Context, params *GetAllChecksParams, reqEditors ...RequestEditorFn) (*GetAllChecksResponse, error) {
	rsp, err := c.GetAllChecks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllChecksResponse(rsp)
}

// AddCheckWithBodyWithResponse request with arbitrary body returning *AddCheckResponse
func (c *ClientWithResponses) AddCheckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCheckResponse, error) {
	rsp, err := c.AddCheckWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCheckResponse(rsp)
}

func (c *ClientWithResponses) AddCheckWithResponse(ctx context.Context, body AddCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCheckResponse, error) {
	rsp, err := c.AddCheck(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCheckResponse(rsp)
}

// GetCheckReportStatusAllWithResponse request returning *GetCheckReportStatusAllResponse
func (c *ClientWithResponses) GetCheckReportStatusAllWithResponse(ctx context.Context, params *GetCheckReportStatusAllParams, reqEditors ...RequestEditorFn) (*GetCheckReportStatusAllResponse, error) {
	rsp, err := c.GetCheckReportStatusAll(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCheckReportStatusAllResponse(rsp)
}

// GetCheckReportPerformanceWithResponse request returning *GetCheckReportPerformanceResponse
func (c *ClientWithResponses) GetCheckReportPerformanceWithResponse(ctx context.Context, checkId int64, params *GetCheckReportPerformanceParams, reqEditors ...RequestEditorFn) (*GetCheckReportPerformanceResponse, error) {
	rsp, err := c.GetCheckReportPerformance(ctx, checkId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCheckReportPerformanceResponse(rsp)
}

// GetCheckReportStatusWithResponse request returning *GetCheckReportStatusResponse
func (c *ClientWithResponses) GetCheckReportStatusWithResponse(ctx context.Context, checkId int64, params *GetCheckReportStatusParams, reqEditors ...RequestEditorFn) (*GetCheckReportStatusResponse, error) {
	rsp, err := c.GetCheckReportStatus(ctx, checkId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCheckReportStatusResponse(rsp)
}

// DeleteCheckWithResponse request returning *DeleteCheckResponse
func (c *ClientWithResponses) DeleteCheckWithResponse(ctx context.Context, checkID int64, reqEditors ...RequestEditorFn) (*DeleteCheckResponse, error) {
	rsp, err := c.DeleteCheck(ctx, checkID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCheckResponse(rsp)
}

// GetCheckWithResponse request returning *GetCheckResponse
func (c *ClientWithResponses) GetCheckWithResponse(ctx context.Context, checkID int64, params *GetCheckParams, reqEditors ...RequestEditorFn) (*GetCheckResponse, error) {
	rsp, err := c.GetCheck(ctx, checkID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCheckResponse(rsp)
}

// ModifyCheckWithBodyWithResponse request with arbitrary body returning *ModifyCheckResponse
func (c *ClientWithResponses) ModifyCheckWithBodyWithResponse(ctx context.Context, checkID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyCheckResponse, error) {
	rsp, err := c.ModifyCheckWithBody(ctx, checkID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyCheckResponse(rsp)
}

func (c *ClientWithResponses) ModifyCheckWithResponse(ctx context.Context, checkID int64, body ModifyCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyCheckResponse, error) {
	rsp, err := c.ModifyCheck(ctx, checkID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyCheckResponse(rsp)
}

// GetTracerouteWithResponse request returning *GetTracerouteResponse
func (c *ClientWithResponses) GetTracerouteWithResponse(ctx context.Context, params *GetTracerouteParams, reqEditors ...RequestEditorFn) (*GetTracerouteResponse, error) {
	rsp, err := c.GetTraceroute(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracerouteResponse(rsp)
}

// ParseGetActionsResponse parses an HTTP response from a GetActionsWithResponse call
func ParseGetActionsResponse(rsp *http.Response) (*GetActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionsAlertsEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAlertingContactsResponse parses an HTTP response from a GetAlertingContactsWithResponse call
func ParseGetAlertingContactsResponse(rsp *http.Response) (*GetAlertingContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertingContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAlertingContactsResponse parses an HTTP response from a PostAlertingContactsWithResponse call
func ParsePostAlertingContactsResponse(rsp *http.Response) (*PostAlertingContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAlertingContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Contact *struct {
				// Id ID of the created contact
				Id *string `json:"id,omitempty"`
			} `json:"contact,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAlertingContactsContactidResponse parses an HTTP response from a DeleteAlertingContactsContactidWithResponse call
func ParseDeleteAlertingContactsContactidResponse(rsp *http.Response) (*DeleteAlertingContactsContactidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAlertingContactsContactidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAlertingContactsContactidResponse parses an HTTP response from a GetAlertingContactsContactidWithResponse call
func ParseGetAlertingContactsContactidResponse(rsp *http.Response) (*GetAlertingContactsContactidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertingContactsContactidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAlertingContactsContactidResponse parses an HTTP response from a PutAlertingContactsContactidWithResponse call
func ParsePutAlertingContactsContactidResponse(rsp *http.Response) (*PutAlertingContactsContactidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAlertingContactsContactidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAlertingTeamsResponse parses an HTTP response from a GetAlertingTeamsWithResponse call
func ParseGetAlertingTeamsResponse(rsp *http.Response) (*GetAlertingTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertingTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Teams
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAlertingTeamsResponse parses an HTTP response from a PostAlertingTeamsWithResponse call
func ParsePostAlertingTeamsResponse(rsp *http.Response) (*PostAlertingTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAlertingTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Team *struct {
				// Id ID of the created team
				Id *string `json:"id,omitempty"`
			} `json:"team,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAlertingTeamsTeamidResponse parses an HTTP response from a DeleteAlertingTeamsTeamidWithResponse call
func ParseDeleteAlertingTeamsTeamidResponse(rsp *http.Response) (*DeleteAlertingTeamsTeamidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAlertingTeamsTeamidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAlertingTeamsTeamidResponse parses an HTTP response from a GetAlertingTeamsTeamidWithResponse call
func ParseGetAlertingTeamsTeamidResponse(rsp *http.Response) (*GetAlertingTeamsTeamidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertingTeamsTeamidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAlertingTeamsTeamidResponse parses an HTTP response from a PutAlertingTeamsTeamidWithResponse call
func ParsePutAlertingTeamsTeamidResponse(rsp *http.Response) (*PutAlertingTeamsTeamidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAlertingTeamsTeamidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAnalysisCheckidResponse parses an HTTP response from a GetAnalysisCheckidWithResponse call
func ParseGetAnalysisCheckidResponse(rsp *http.Response) (*GetAnalysisCheckidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnalysisCheckidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AnalysisRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAnalysisCheckidAnalysisidResponse parses an HTTP response from a GetAnalysisCheckidAnalysisidWithResponse call
func ParseGetAnalysisCheckidAnalysisidResponse(rsp *http.Response) (*GetAnalysisCheckidAnalysisidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnalysisCheckidAnalysisidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteChecksResponse parses an HTTP response from a DeleteChecksWithResponse call
func ParseDeleteChecksResponse(rsp *http.Response) (*DeleteChecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChecksResponse parses an HTTP response from a GetChecksWithResponse call
func ParseGetChecksResponse(rsp *http.Response) (*GetChecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Checks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostChecksResponse parses an HTTP response from a PostChecksWithResponse call
func ParsePostChecksResponse(rsp *http.Response) (*PostChecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Check *struct {
				// Id Created check ID.
				Id *int `json:"id,omitempty"`

				// Name Created check name.
				Name *string `json:"name,omitempty"`
			} `json:"check,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutChecksResponse parses an HTTP response from a PutChecksWithResponse call
func ParsePutChecksResponse(rsp *http.Response) (*PutChecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteChecksCheckidResponse parses an HTTP response from a DeleteChecksCheckidWithResponse call
func ParseDeleteChecksCheckidResponse(rsp *http.Response) (*DeleteChecksCheckidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteChecksCheckidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChecksCheckidResponse parses an HTTP response from a GetChecksCheckidWithResponse call
func ParseGetChecksCheckidResponse(rsp *http.Response) (*GetChecksCheckidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChecksCheckidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DetailedCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutChecksCheckidResponse parses an HTTP response from a PutChecksCheckidWithResponse call
func ParsePutChecksCheckidResponse(rsp *http.Response) (*PutChecksCheckidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutChecksCheckidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCreditsResponse parses an HTTP response from a GetCreditsWithResponse call
func ParseGetCreditsResponse(rsp *http.Response) (*GetCreditsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreditsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreditsRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMaintenanceResponse parses an HTTP response from a DeleteMaintenanceWithResponse call
func ParseDeleteMaintenanceResponse(rsp *http.Response) (*DeleteMaintenanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMaintenanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceDeleteRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMaintenanceResponse parses an HTTP response from a GetMaintenanceWithResponse call
func ParseGetMaintenanceResponse(rsp *http.Response) (*GetMaintenanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMaintenanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMaintenanceResponse parses an HTTP response from a PostMaintenanceWithResponse call
func ParsePostMaintenanceResponse(rsp *http.Response) (*PostMaintenanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMaintenanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenancePostRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMaintenanceOccurrencesResponse parses an HTTP response from a DeleteMaintenanceOccurrencesWithResponse call
func ParseDeleteMaintenanceOccurrencesResponse(rsp *http.Response) (*DeleteMaintenanceOccurrencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMaintenanceOccurrencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceOccurrencesDeleteRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMaintenanceOccurrencesResponse parses an HTTP response from a GetMaintenanceOccurrencesWithResponse call
func ParseGetMaintenanceOccurrencesResponse(rsp *http.Response) (*GetMaintenanceOccurrencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMaintenanceOccurrencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceOccurrencesRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMaintenanceOccurrencesIdResponse parses an HTTP response from a DeleteMaintenanceOccurrencesIdWithResponse call
func ParseDeleteMaintenanceOccurrencesIdResponse(rsp *http.Response) (*DeleteMaintenanceOccurrencesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMaintenanceOccurrencesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceOccurrencesIdDeleteRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMaintenanceOccurrencesIdResponse parses an HTTP response from a GetMaintenanceOccurrencesIdWithResponse call
func ParseGetMaintenanceOccurrencesIdResponse(rsp *http.Response) (*GetMaintenanceOccurrencesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMaintenanceOccurrencesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceOccurrencesIdRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutMaintenanceOccurrencesIdResponse parses an HTTP response from a PutMaintenanceOccurrencesIdWithResponse call
func ParsePutMaintenanceOccurrencesIdResponse(rsp *http.Response) (*PutMaintenanceOccurrencesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMaintenanceOccurrencesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceOccurrencesIdPutRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMaintenanceIdResponse parses an HTTP response from a DeleteMaintenanceIdWithResponse call
func ParseDeleteMaintenanceIdResponse(rsp *http.Response) (*DeleteMaintenanceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMaintenanceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceIdDeleteRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMaintenanceIdResponse parses an HTTP response from a GetMaintenanceIdWithResponse call
func ParseGetMaintenanceIdResponse(rsp *http.Response) (*GetMaintenanceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMaintenanceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceIdRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutMaintenanceIdResponse parses an HTTP response from a PutMaintenanceIdWithResponse call
func ParsePutMaintenanceIdResponse(rsp *http.Response) (*PutMaintenanceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMaintenanceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceIdPutRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProbesResponse parses an HTTP response from a GetProbesWithResponse call
func ParseGetProbesResponse(rsp *http.Response) (*GetProbesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProbesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Probes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReferenceResponse parses an HTTP response from a GetReferenceWithResponse call
func ParseGetReferenceResponse(rsp *http.Response) (*GetReferenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest References
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetResultsCheckidResponse parses an HTTP response from a GetResultsCheckidWithResponse call
func ParseGetResultsCheckidResponse(rsp *http.Response) (*GetResultsCheckidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResultsCheckidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSingleResponse parses an HTTP response from a GetSingleWithResponse call
func ParseGetSingleResponse(rsp *http.Response) (*GetSingleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSingleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSummaryAverageCheckidResponse parses an HTTP response from a GetSummaryAverageCheckidWithResponse call
func ParseGetSummaryAverageCheckidResponse(rsp *http.Response) (*GetSummaryAverageCheckidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSummaryAverageCheckidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SummaryRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSummaryHoursofdayCheckidResponse parses an HTTP response from a GetSummaryHoursofdayCheckidWithResponse call
func ParseGetSummaryHoursofdayCheckidResponse(rsp *http.Response) (*GetSummaryHoursofdayCheckidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSummaryHoursofdayCheckidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SummaryHoursofdayRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSummaryOutageCheckidResponse parses an HTTP response from a GetSummaryOutageCheckidWithResponse call
func ParseGetSummaryOutageCheckidResponse(rsp *http.Response) (*GetSummaryOutageCheckidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSummaryOutageCheckidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SummaryOutageRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSummaryPerformanceCheckidResponse parses an HTTP response from a GetSummaryPerformanceCheckidWithResponse call
func ParseGetSummaryPerformanceCheckidResponse(rsp *http.Response) (*GetSummaryPerformanceCheckidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSummaryPerformanceCheckidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SummaryPerformanceRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSummaryProbesCheckidResponse parses an HTTP response from a GetSummaryProbesCheckidWithResponse call
func ParseGetSummaryProbesCheckidResponse(rsp *http.Response) (*GetSummaryProbesCheckidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSummaryProbesCheckidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SummaryProbesRespAttrs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllChecksResponse parses an HTTP response from a GetAllChecksWithResponse call
func ParseGetAllChecksResponse(rsp *http.Response) (*GetAllChecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksAll
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCheckResponse parses an HTTP response from a AddCheckWithResponse call
func ParseAddCheckResponse(rsp *http.Response) (*AddCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckAddedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCheckReportStatusAllResponse parses an HTTP response from a GetCheckReportStatusAllWithResponse call
func ParseGetCheckReportStatusAllResponse(rsp *http.Response) (*GetCheckReportStatusAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCheckReportStatusAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportStatusAll
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCheckReportPerformanceResponse parses an HTTP response from a GetCheckReportPerformanceWithResponse call
func ParseGetCheckReportPerformanceResponse(rsp *http.Response) (*GetCheckReportPerformanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCheckReportPerformanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportPerformance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCheckReportStatusResponse parses an HTTP response from a GetCheckReportStatusWithResponse call
func ParseGetCheckReportStatusResponse(rsp *http.Response) (*GetCheckReportStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCheckReportStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportStatusSingle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCheckResponse parses an HTTP response from a DeleteCheckWithResponse call
func ParseDeleteCheckResponse(rsp *http.Response) (*DeleteCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckDeletedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCheckResponse parses an HTTP response from a GetCheckWithResponse call
func ParseGetCheckResponse(rsp *http.Response) (*GetCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckDetailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseModifyCheckResponse parses an HTTP response from a ModifyCheckWithResponse call
func ParseModifyCheckResponse(rsp *http.Response) (*ModifyCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckModifiedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTracerouteResponse parses an HTTP response from a GetTracerouteWithResponse call
func ParseGetTracerouteResponse(rsp *http.Response) (*GetTracerouteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracerouteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Traceroute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of actions alerts.
	// (GET /actions)
	GetActions(ctx echo.Context, params GetActionsParams) error
	// Returns a list of all contacts
	// (GET /alerting/contacts)
	GetAlertingContacts(ctx echo.Context) error
	// Creates a new contact
	// (POST /alerting/contacts)
	PostAlertingContacts(ctx echo.Context) error
	// Deletes a contact with its contact methods
	// (DELETE /alerting/contacts/{contactid})
	DeleteAlertingContactsContactid(ctx echo.Context, contactid int) error
	// Returns a contact with its contact methods
	// (GET /alerting/contacts/{contactid})
	GetAlertingContactsContactid(ctx echo.Context, contactid int) error
	// Update a contact
	// (PUT /alerting/contacts/{contactid})
	PutAlertingContactsContactid(ctx echo.Context, contactid int) error

	// (GET /alerting/teams)
	GetAlertingTeams(ctx echo.Context) error
	// Creates a new team
	// (POST /alerting/teams)
	PostAlertingTeams(ctx echo.Context) error

	// (DELETE /alerting/teams/{teamid})
	DeleteAlertingTeamsTeamid(ctx echo.Context, teamid int) error

	// (GET /alerting/teams/{teamid})
	GetAlertingTeamsTeamid(ctx echo.Context, teamid int) error

	// (PUT /alerting/teams/{teamid})
	PutAlertingTeamsTeamid(ctx echo.Context, teamid int) error
	// Returns a list of the latest root cause analysis
	// (GET /analysis/{checkid})
	GetAnalysisCheckid(ctx echo.Context, checkid AnalysisCheckid, params GetAnalysisCheckidParams) error
	// Returns the raw result for a specified analysis.
	// (GET /analysis/{checkid}/{analysisid})
	GetAnalysisCheckidAnalysisid(ctx echo.Context, checkid AnalysisCheckid, analysisid AnalysisAnalysisid) error
	// Deletes a list of checks.
	// (DELETE /checks)
	DeleteChecks(ctx echo.Context, params DeleteChecksParams) error

	// (GET /checks)
	GetChecks(ctx echo.Context, params GetChecksParams) error
	// Creates a new check.
	// (POST /checks)
	PostChecks(ctx echo.Context) error
	// Pause or change resolution for multiple checks.
	// (PUT /checks)
	PutChecks(ctx echo.Context) error
	// Deletes a check.
	// (DELETE /checks/{checkid})
	DeleteChecksCheckid(ctx echo.Context, checkid int) error
	// Returns a detailed description of a check.
	// (GET /checks/{checkid})
	GetChecksCheckid(ctx echo.Context, checkid int, params GetChecksCheckidParams) error
	// Modify settings for a check.
	// (PUT /checks/{checkid})
	PutChecksCheckid(ctx echo.Context, checkid int) error
	// Returns information about remaining credits
	// (GET /credits)
	GetCredits(ctx echo.Context) error
	// Delete multiple maintenance windows.
	// (DELETE /maintenance)
	DeleteMaintenance(ctx echo.Context, params DeleteMaintenanceParams) error

	// (GET /maintenance)
	GetMaintenance(ctx echo.Context, params GetMaintenanceParams) error

	// (POST /maintenance)
	PostMaintenance(ctx echo.Context) error
	// Deletes multiple maintenance occurrences
	// (DELETE /maintenance.occurrences)
	DeleteMaintenanceOccurrences(ctx echo.Context, params DeleteMaintenanceOccurrencesParams) error
	// Returns a list of maintenance occurrences.
	// (GET /maintenance.occurrences)
	GetMaintenanceOccurrences(ctx echo.Context, params GetMaintenanceOccurrencesParams) error
	// Deletes the maintenance occurrence
	// (DELETE /maintenance.occurrences/{id})
	DeleteMaintenanceOccurrencesId(ctx echo.Context, id MaintenanceOccurrencesId) error
	// Gets a maintenance occurrence details
	// (GET /maintenance.occurrences/{id})
	GetMaintenanceOccurrencesId(ctx echo.Context, id MaintenanceOccurrencesId) error
	// Modifies a maintenance occurrence
	// (PUT /maintenance.occurrences/{id})
	PutMaintenanceOccurrencesId(ctx echo.Context, id MaintenanceOccurrencesId) error
	// Delete the maintenance window.
	// (DELETE /maintenance/{id})
	DeleteMaintenanceId(ctx echo.Context, id MaintenanceId) error

	// (GET /maintenance/{id})
	GetMaintenanceId(ctx echo.Context, id MaintenanceId) error

	// (PUT /maintenance/{id})
	PutMaintenanceId(ctx echo.Context, id MaintenanceId) error
	// Returns a list of Pingdom probe servers
	// (GET /probes)
	GetProbes(ctx echo.Context, params GetProbesParams) error
	// Get regions, timezone and date/time/number references
	// (GET /reference)
	GetReference(ctx echo.Context) error
	// Return a list of raw test results
	// (GET /results/{checkid})
	GetResultsCheckid(ctx echo.Context, checkid ResultsCheckid, params GetResultsCheckidParams) error
	// Performs a single check.
	// (GET /single)
	GetSingle(ctx echo.Context, params GetSingleParams) error
	// Get the average time/uptime value for a specified
	// (GET /summary.average/{checkid})
	GetSummaryAverageCheckid(ctx echo.Context, checkid SummaryAverageCheckid, params GetSummaryAverageCheckidParams) error
	// Returns the average response time for each hour.
	// (GET /summary.hoursofday/{checkid})
	GetSummaryHoursofdayCheckid(ctx echo.Context, checkid SummaryHoursofdayCheckid, params GetSummaryHoursofdayCheckidParams) error
	// Get a list of status changes for a specified check
	// (GET /summary.outage/{checkid})
	GetSummaryOutageCheckid(ctx echo.Context, checkid SummaryOutageCheckid, params GetSummaryOutageCheckidParams) error
	// For a given interval return a list of subintervals
	// (GET /summary.performance/{checkid})
	GetSummaryPerformanceCheckid(ctx echo.Context, checkid SummaryPerformanceCheckid, params GetSummaryPerformanceCheckidParams) error
	// Get a list of probes that performed tests
	// (GET /summary.probes/{checkid})
	GetSummaryProbesCheckid(ctx echo.Context, checkid SummaryProbesCheckid, params GetSummaryProbesCheckidParams) error
	// Returns a list overview of all transaction checks.
	// (GET /tms/check)
	GetAllChecks(ctx echo.Context, params GetAllChecksParams) error
	// Creates a new transaction check.
	// (POST /tms/check)
	AddCheck(ctx echo.Context) error
	// Returns a status change report for all transaction checks in the current organization
	// (GET /tms/check/report/status)
	GetCheckReportStatusAll(ctx echo.Context, params GetCheckReportStatusAllParams) error
	// Returns a performance report for a single transaction check
	// (GET /tms/check/{check_id}/report/performance)
	GetCheckReportPerformance(ctx echo.Context, checkId int64, params GetCheckReportPerformanceParams) error
	// Returns a status change report for a single transaction check
	// (GET /tms/check/{check_id}/report/status)
	GetCheckReportStatus(ctx echo.Context, checkId int64, params GetCheckReportStatusParams) error
	// Deletes a transaction check.
	// (DELETE /tms/check/{cid})
	DeleteCheck(ctx echo.Context, checkID int64) error
	// Returns a single transaction check.
	// (GET /tms/check/{cid})
	GetCheck(ctx echo.Context, checkID int64, params GetCheckParams) error
	// Modify settings for transaction check.
	// (PUT /tms/check/{cid})
	ModifyCheck(ctx echo.Context, checkID int64) error
	// Perform a traceroute
	// (GET /traceroute)
	GetTraceroute(ctx echo.Context, params GetTracerouteParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetActions converts echo context to params.
func (w *ServerInterfaceWrapper) GetActions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActionsParams
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "checkids" -------------

	err = runtime.BindQueryParameter("form", true, false, "checkids", ctx.QueryParams(), &params.Checkids)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkids: %s", err))
	}

	// ------------- Optional query parameter "userids" -------------

	err = runtime.BindQueryParameter("form", true, false, "userids", ctx.QueryParams(), &params.Userids)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userids: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "via" -------------

	err = runtime.BindQueryParameter("form", true, false, "via", ctx.QueryParams(), &params.Via)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter via: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetActions(ctx, params)
	return err
}

// GetAlertingContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertingContacts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAlertingContacts(ctx)
	return err
}

// PostAlertingContacts converts echo context to params.
func (w *ServerInterfaceWrapper) PostAlertingContacts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAlertingContacts(ctx)
	return err
}

// DeleteAlertingContactsContactid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAlertingContactsContactid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactid" -------------
	var contactid int

	err = runtime.BindStyledParameterWithLocation("simple", false, "contactid", runtime.ParamLocationPath, ctx.Param("contactid"), &contactid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAlertingContactsContactid(ctx, contactid)
	return err
}

// GetAlertingContactsContactid converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertingContactsContactid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactid" -------------
	var contactid int

	err = runtime.BindStyledParameterWithLocation("simple", false, "contactid", runtime.ParamLocationPath, ctx.Param("contactid"), &contactid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAlertingContactsContactid(ctx, contactid)
	return err
}

// PutAlertingContactsContactid converts echo context to params.
func (w *ServerInterfaceWrapper) PutAlertingContactsContactid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactid" -------------
	var contactid int

	err = runtime.BindStyledParameterWithLocation("simple", false, "contactid", runtime.ParamLocationPath, ctx.Param("contactid"), &contactid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutAlertingContactsContactid(ctx, contactid)
	return err
}

// GetAlertingTeams converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertingTeams(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAlertingTeams(ctx)
	return err
}

// PostAlertingTeams converts echo context to params.
func (w *ServerInterfaceWrapper) PostAlertingTeams(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAlertingTeams(ctx)
	return err
}

// DeleteAlertingTeamsTeamid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAlertingTeamsTeamid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "teamid" -------------
	var teamid int

	err = runtime.BindStyledParameterWithLocation("simple", false, "teamid", runtime.ParamLocationPath, ctx.Param("teamid"), &teamid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter teamid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAlertingTeamsTeamid(ctx, teamid)
	return err
}

// GetAlertingTeamsTeamid converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlertingTeamsTeamid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "teamid" -------------
	var teamid int

	err = runtime.BindStyledParameterWithLocation("simple", false, "teamid", runtime.ParamLocationPath, ctx.Param("teamid"), &teamid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter teamid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAlertingTeamsTeamid(ctx, teamid)
	return err
}

// PutAlertingTeamsTeamid converts echo context to params.
func (w *ServerInterfaceWrapper) PutAlertingTeamsTeamid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "teamid" -------------
	var teamid int

	err = runtime.BindStyledParameterWithLocation("simple", false, "teamid", runtime.ParamLocationPath, ctx.Param("teamid"), &teamid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter teamid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutAlertingTeamsTeamid(ctx, teamid)
	return err
}

// GetAnalysisCheckid converts echo context to params.
func (w *ServerInterfaceWrapper) GetAnalysisCheckid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkid" -------------
	var checkid AnalysisCheckid

	err = runtime.BindStyledParameterWithLocation("simple", false, "checkid", runtime.ParamLocationPath, ctx.Param("checkid"), &checkid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkid: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAnalysisCheckidParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAnalysisCheckid(ctx, checkid, params)
	return err
}

// GetAnalysisCheckidAnalysisid converts echo context to params.
func (w *ServerInterfaceWrapper) GetAnalysisCheckidAnalysisid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkid" -------------
	var checkid AnalysisCheckid

	err = runtime.BindStyledParameterWithLocation("simple", false, "checkid", runtime.ParamLocationPath, ctx.Param("checkid"), &checkid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkid: %s", err))
	}

	// ------------- Path parameter "analysisid" -------------
	var analysisid AnalysisAnalysisid

	err = runtime.BindStyledParameterWithLocation("simple", false, "analysisid", runtime.ParamLocationPath, ctx.Param("analysisid"), &analysisid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter analysisid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAnalysisCheckidAnalysisid(ctx, checkid, analysisid)
	return err
}

// DeleteChecks converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteChecks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteChecksParams
	// ------------- Required query parameter "delcheckids" -------------

	err = runtime.BindQueryParameter("form", false, true, "delcheckids", ctx.QueryParams(), &params.Delcheckids)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delcheckids: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteChecks(ctx, params)
	return err
}

// GetChecks converts echo context to params.
func (w *ServerInterfaceWrapper) GetChecks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChecksParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showencryption" -------------

	err = runtime.BindQueryParameter("form", true, false, "showencryption", ctx.QueryParams(), &params.Showencryption)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showencryption: %s", err))
	}

	// ------------- Optional query parameter "include_tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_tags", ctx.QueryParams(), &params.IncludeTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_tags: %s", err))
	}

	// ------------- Optional query parameter "include_severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_severity", ctx.QueryParams(), &params.IncludeSeverity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_severity: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetChecks(ctx, params)
	return err
}

// PostChecks converts echo context to params.
func (w *ServerInterfaceWrapper) PostChecks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostChecks(ctx)
	return err
}

// PutChecks converts echo context to params.
func (w *ServerInterfaceWrapper) PutChecks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutChecks(ctx)
	return err
}

// DeleteChecksCheckid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteChecksCheckid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkid" -------------
	var checkid int

	err = runtime.BindStyledParameterWithLocation("simple", false, "checkid", runtime.ParamLocationPath, ctx.Param("checkid"), &checkid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteChecksCheckid(ctx, checkid)
	return err
}

// GetChecksCheckid converts echo context to params.
func (w *ServerInterfaceWrapper) GetChecksCheckid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkid" -------------
	var checkid int

	err = runtime.BindStyledParameterWithLocation("simple", false, "checkid", runtime.ParamLocationPath, ctx.Param("checkid"), &checkid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkid: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChecksCheckidParams
	// ------------- Optional query parameter "include_teams" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_teams", ctx.QueryParams(), &params.IncludeTeams)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_teams: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetChecksCheckid(ctx, checkid, params)
	return err
}

// PutChecksCheckid converts echo context to params.
func (w *ServerInterfaceWrapper) PutChecksCheckid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkid" -------------
	var checkid int

	err = runtime.BindStyledParameterWithLocation("simple", false, "checkid", runtime.ParamLocationPath, ctx.Param("checkid"), &checkid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutChecksCheckid(ctx, checkid)
	return err
}

// GetCredits converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredits(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCredits(ctx)
	return err
}

// DeleteMaintenance converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMaintenance(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteMaintenanceParams
	// ------------- Required query parameter "maintenanceids" -------------

	err = runtime.BindQueryParameter("form", false, true, "maintenanceids", ctx.QueryParams(), &params.Maintenanceids)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter maintenanceids: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMaintenance(ctx, params)
	return err
}

// GetMaintenance converts echo context to params.
func (w *ServerInterfaceWrapper) GetMaintenance(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMaintenanceParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderby" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderby", ctx.QueryParams(), &params.Orderby)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderby: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMaintenance(ctx, params)
	return err
}

// PostMaintenance converts echo context to params.
func (w *ServerInterfaceWrapper) PostMaintenance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMaintenance(ctx)
	return err
}

// DeleteMaintenanceOccurrences converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMaintenanceOccurrences(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteMaintenanceOccurrencesParams
	// ------------- Required query parameter "occurenceids" -------------

	err = runtime.BindQueryParameter("form", true, true, "occurenceids", ctx.QueryParams(), &params.Occurenceids)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter occurenceids: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMaintenanceOccurrences(ctx, params)
	return err
}

// GetMaintenanceOccurrences converts echo context to params.
func (w *ServerInterfaceWrapper) GetMaintenanceOccurrences(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMaintenanceOccurrencesParams
	// ------------- Optional query parameter "maintenanceid" -------------

	err = runtime.BindQueryParameter("form", true, false, "maintenanceid", ctx.QueryParams(), &params.Maintenanceid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter maintenanceid: %s", err))
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMaintenanceOccurrences(ctx, params)
	return err
}

// DeleteMaintenanceOccurrencesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMaintenanceOccurrencesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id MaintenanceOccurrencesId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMaintenanceOccurrencesId(ctx, id)
	return err
}

// GetMaintenanceOccurrencesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMaintenanceOccurrencesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id MaintenanceOccurrencesId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMaintenanceOccurrencesId(ctx, id)
	return err
}

// PutMaintenanceOccurrencesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutMaintenanceOccurrencesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id MaintenanceOccurrencesId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutMaintenanceOccurrencesId(ctx, id)
	return err
}

// DeleteMaintenanceId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMaintenanceId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id MaintenanceId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMaintenanceId(ctx, id)
	return err
}

// GetMaintenanceId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMaintenanceId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id MaintenanceId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMaintenanceId(ctx, id)
	return err
}

// PutMaintenanceId converts echo context to params.
func (w *ServerInterfaceWrapper) PutMaintenanceId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id MaintenanceId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutMaintenanceId(ctx, id)
	return err
}

// GetProbes converts echo context to params.
func (w *ServerInterfaceWrapper) GetProbes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProbesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "onlyactive" -------------

	err = runtime.BindQueryParameter("form", true, false, "onlyactive", ctx.QueryParams(), &params.Onlyactive)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter onlyactive: %s", err))
	}

	// ------------- Optional query parameter "includedeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "includedeleted", ctx.QueryParams(), &params.Includedeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includedeleted: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProbes(ctx, params)
	return err
}

// GetReference converts echo context to params.
func (w *ServerInterfaceWrapper) GetReference(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetReference(ctx)
	return err
}

// GetResultsCheckid converts echo context to params.
func (w *ServerInterfaceWrapper) GetResultsCheckid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkid" -------------
	var checkid ResultsCheckid

	err = runtime.BindStyledParameterWithLocation("simple", false, "checkid", runtime.ParamLocationPath, ctx.Param("checkid"), &checkid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkid: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResultsCheckidParams
	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "probes" -------------

	err = runtime.BindQueryParameter("form", true, false, "probes", ctx.QueryParams(), &params.Probes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter probes: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "includeanalysis" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeanalysis", ctx.QueryParams(), &params.Includeanalysis)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeanalysis: %s", err))
	}

	// ------------- Optional query parameter "maxresponse" -------------

	err = runtime.BindQueryParameter("form", true, false, "maxresponse", ctx.QueryParams(), &params.Maxresponse)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter maxresponse: %s", err))
	}

	// ------------- Optional query parameter "minresponse" -------------

	err = runtime.BindQueryParameter("form", true, false, "minresponse", ctx.QueryParams(), &params.Minresponse)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter minresponse: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetResultsCheckid(ctx, checkid, params)
	return err
}

// GetSingle converts echo context to params.
func (w *ServerInterfaceWrapper) GetSingle(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSingleParams
	// ------------- Optional query parameter "Query Parameters" -------------

	err = runtime.BindQueryParameter("form", true, false, "Query Parameters", ctx.QueryParams(), &params.QueryParameters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Query Parameters: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSingle(ctx, params)
	return err
}

// GetSummaryAverageCheckid converts echo context to params.
func (w *ServerInterfaceWrapper) GetSummaryAverageCheckid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkid" -------------
	var checkid SummaryAverageCheckid

	err = runtime.BindStyledParameterWithLocation("simple", false, "checkid", runtime.ParamLocationPath, ctx.Param("checkid"), &checkid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkid: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSummaryAverageCheckidParams
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Optional query parameter "probes" -------------

	err = runtime.BindQueryParameter("form", true, false, "probes", ctx.QueryParams(), &params.Probes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter probes: %s", err))
	}

	// ------------- Optional query parameter "includeuptime" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeuptime", ctx.QueryParams(), &params.Includeuptime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeuptime: %s", err))
	}

	// ------------- Optional query parameter "bycountry" -------------

	err = runtime.BindQueryParameter("form", true, false, "bycountry", ctx.QueryParams(), &params.Bycountry)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bycountry: %s", err))
	}

	// ------------- Optional query parameter "byprobe" -------------

	err = runtime.BindQueryParameter("form", true, false, "byprobe", ctx.QueryParams(), &params.Byprobe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter byprobe: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSummaryAverageCheckid(ctx, checkid, params)
	return err
}

// GetSummaryHoursofdayCheckid converts echo context to params.
func (w *ServerInterfaceWrapper) GetSummaryHoursofdayCheckid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkid" -------------
	var checkid SummaryHoursofdayCheckid

	err = runtime.BindStyledParameterWithLocation("simple", false, "checkid", runtime.ParamLocationPath, ctx.Param("checkid"), &checkid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkid: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSummaryHoursofdayCheckidParams
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Optional query parameter "probes" -------------

	err = runtime.BindQueryParameter("form", true, false, "probes", ctx.QueryParams(), &params.Probes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter probes: %s", err))
	}

	// ------------- Optional query parameter "uselocaltime" -------------

	err = runtime.BindQueryParameter("form", true, false, "uselocaltime", ctx.QueryParams(), &params.Uselocaltime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uselocaltime: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSummaryHoursofdayCheckid(ctx, checkid, params)
	return err
}

// GetSummaryOutageCheckid converts echo context to params.
func (w *ServerInterfaceWrapper) GetSummaryOutageCheckid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkid" -------------
	var checkid SummaryOutageCheckid

	err = runtime.BindStyledParameterWithLocation("simple", false, "checkid", runtime.ParamLocationPath, ctx.Param("checkid"), &checkid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkid: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSummaryOutageCheckidParams
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSummaryOutageCheckid(ctx, checkid, params)
	return err
}

// GetSummaryPerformanceCheckid converts echo context to params.
func (w *ServerInterfaceWrapper) GetSummaryPerformanceCheckid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkid" -------------
	var checkid SummaryPerformanceCheckid

	err = runtime.BindStyledParameterWithLocation("simple", false, "checkid", runtime.ParamLocationPath, ctx.Param("checkid"), &checkid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkid: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSummaryPerformanceCheckidParams
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Optional query parameter "resolution" -------------

	err = runtime.BindQueryParameter("form", true, false, "resolution", ctx.QueryParams(), &params.Resolution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resolution: %s", err))
	}

	// ------------- Optional query parameter "includeuptime" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeuptime", ctx.QueryParams(), &params.Includeuptime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeuptime: %s", err))
	}

	// ------------- Optional query parameter "probes" -------------

	err = runtime.BindQueryParameter("form", true, false, "probes", ctx.QueryParams(), &params.Probes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter probes: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSummaryPerformanceCheckid(ctx, checkid, params)
	return err
}

// GetSummaryProbesCheckid converts echo context to params.
func (w *ServerInterfaceWrapper) GetSummaryProbesCheckid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "checkid" -------------
	var checkid SummaryProbesCheckid

	err = runtime.BindStyledParameterWithLocation("simple", false, "checkid", runtime.ParamLocationPath, ctx.Param("checkid"), &checkid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkid: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSummaryProbesCheckidParams
	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSummaryProbesCheckid(ctx, checkid, params)
	return err
}

// GetAllChecks converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllChecks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllChecksParams
	// ------------- Optional query parameter "extended_tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "extended_tags", ctx.QueryParams(), &params.ExtendedTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter extended_tags: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllChecks(ctx, params)
	return err
}

// AddCheck converts echo context to params.
func (w *ServerInterfaceWrapper) AddCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddCheck(ctx)
	return err
}

// GetCheckReportStatusAll converts echo context to params.
func (w *ServerInterfaceWrapper) GetCheckReportStatusAll(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCheckReportStatusAllParams
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "omit_empty" -------------

	err = runtime.BindQueryParameter("form", true, false, "omit_empty", ctx.QueryParams(), &params.OmitEmpty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter omit_empty: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCheckReportStatusAll(ctx, params)
	return err
}

// GetCheckReportPerformance converts echo context to params.
func (w *ServerInterfaceWrapper) GetCheckReportPerformance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "check_id" -------------
	var checkId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "check_id", runtime.ParamLocationPath, ctx.Param("check_id"), &checkId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter check_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCheckReportPerformanceParams
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// ------------- Optional query parameter "resolution" -------------

	err = runtime.BindQueryParameter("form", true, false, "resolution", ctx.QueryParams(), &params.Resolution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resolution: %s", err))
	}

	// ------------- Optional query parameter "include_uptime" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_uptime", ctx.QueryParams(), &params.IncludeUptime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_uptime: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCheckReportPerformance(ctx, checkId, params)
	return err
}

// GetCheckReportStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCheckReportStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "check_id" -------------
	var checkId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "check_id", runtime.ParamLocationPath, ctx.Param("check_id"), &checkId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter check_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCheckReportStatusParams
	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCheckReportStatus(ctx, checkId, params)
	return err
}

// DeleteCheck converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCheck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cid" -------------
	var checkID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "cid", runtime.ParamLocationPath, ctx.Param("cid"), &checkID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCheck(ctx, checkID)
	return err
}

// GetCheck converts echo context to params.
func (w *ServerInterfaceWrapper) GetCheck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cid" -------------
	var checkID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "cid", runtime.ParamLocationPath, ctx.Param("cid"), &checkID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cid: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCheckParams
	// ------------- Optional query parameter "extended_tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "extended_tags", ctx.QueryParams(), &params.ExtendedTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter extended_tags: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCheck(ctx, checkID, params)
	return err
}

// ModifyCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ModifyCheck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cid" -------------
	var checkID int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "cid", runtime.ParamLocationPath, ctx.Param("cid"), &checkID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ModifyCheck(ctx, checkID)
	return err
}

// GetTraceroute converts echo context to params.
func (w *ServerInterfaceWrapper) GetTraceroute(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTracerouteParams
	// ------------- Required query parameter "host" -------------

	err = runtime.BindQueryParameter("form", true, true, "host", ctx.QueryParams(), &params.Host)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter host: %s", err))
	}

	// ------------- Optional query parameter "probeid" -------------

	err = runtime.BindQueryParameter("form", true, false, "probeid", ctx.QueryParams(), &params.Probeid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter probeid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTraceroute(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/actions", wrapper.GetActions)
	router.GET(baseURL+"/alerting/contacts", wrapper.GetAlertingContacts)
	router.POST(baseURL+"/alerting/contacts", wrapper.PostAlertingContacts)
	router.DELETE(baseURL+"/alerting/contacts/:contactid", wrapper.DeleteAlertingContactsContactid)
	router.GET(baseURL+"/alerting/contacts/:contactid", wrapper.GetAlertingContactsContactid)
	router.PUT(baseURL+"/alerting/contacts/:contactid", wrapper.PutAlertingContactsContactid)
	router.GET(baseURL+"/alerting/teams", wrapper.GetAlertingTeams)
	router.POST(baseURL+"/alerting/teams", wrapper.PostAlertingTeams)
	router.DELETE(baseURL+"/alerting/teams/:teamid", wrapper.DeleteAlertingTeamsTeamid)
	router.GET(baseURL+"/alerting/teams/:teamid", wrapper.GetAlertingTeamsTeamid)
	router.PUT(baseURL+"/alerting/teams/:teamid", wrapper.PutAlertingTeamsTeamid)
	router.GET(baseURL+"/analysis/:checkid", wrapper.GetAnalysisCheckid)
	router.GET(baseURL+"/analysis/:checkid/:analysisid", wrapper.GetAnalysisCheckidAnalysisid)
	router.DELETE(baseURL+"/checks", wrapper.DeleteChecks)
	router.GET(baseURL+"/checks", wrapper.GetChecks)
	router.POST(baseURL+"/checks", wrapper.PostChecks)
	router.PUT(baseURL+"/checks", wrapper.PutChecks)
	router.DELETE(baseURL+"/checks/:checkid", wrapper.DeleteChecksCheckid)
	router.GET(baseURL+"/checks/:checkid", wrapper.GetChecksCheckid)
	router.PUT(baseURL+"/checks/:checkid", wrapper.PutChecksCheckid)
	router.GET(baseURL+"/credits", wrapper.GetCredits)
	router.DELETE(baseURL+"/maintenance", wrapper.DeleteMaintenance)
	router.GET(baseURL+"/maintenance", wrapper.GetMaintenance)
	router.POST(baseURL+"/maintenance", wrapper.PostMaintenance)
	router.DELETE(baseURL+"/maintenance.occurrences", wrapper.DeleteMaintenanceOccurrences)
	router.GET(baseURL+"/maintenance.occurrences", wrapper.GetMaintenanceOccurrences)
	router.DELETE(baseURL+"/maintenance.occurrences/:id", wrapper.DeleteMaintenanceOccurrencesId)
	router.GET(baseURL+"/maintenance.occurrences/:id", wrapper.GetMaintenanceOccurrencesId)
	router.PUT(baseURL+"/maintenance.occurrences/:id", wrapper.PutMaintenanceOccurrencesId)
	router.DELETE(baseURL+"/maintenance/:id", wrapper.DeleteMaintenanceId)
	router.GET(baseURL+"/maintenance/:id", wrapper.GetMaintenanceId)
	router.PUT(baseURL+"/maintenance/:id", wrapper.PutMaintenanceId)
	router.GET(baseURL+"/probes", wrapper.GetProbes)
	router.GET(baseURL+"/reference", wrapper.GetReference)
	router.GET(baseURL+"/results/:checkid", wrapper.GetResultsCheckid)
	router.GET(baseURL+"/single", wrapper.GetSingle)
	router.GET(baseURL+"/summary.average/:checkid", wrapper.GetSummaryAverageCheckid)
	router.GET(baseURL+"/summary.hoursofday/:checkid", wrapper.GetSummaryHoursofdayCheckid)
	router.GET(baseURL+"/summary.outage/:checkid", wrapper.GetSummaryOutageCheckid)
	router.GET(baseURL+"/summary.performance/:checkid", wrapper.GetSummaryPerformanceCheckid)
	router.GET(baseURL+"/summary.probes/:checkid", wrapper.GetSummaryProbesCheckid)
	router.GET(baseURL+"/tms/check", wrapper.GetAllChecks)
	router.POST(baseURL+"/tms/check", wrapper.AddCheck)
	router.GET(baseURL+"/tms/check/report/status", wrapper.GetCheckReportStatusAll)
	router.GET(baseURL+"/tms/check/:check_id/report/performance", wrapper.GetCheckReportPerformance)
	router.GET(baseURL+"/tms/check/:check_id/report/status", wrapper.GetCheckReportStatus)
	router.DELETE(baseURL+"/tms/check/:cid", wrapper.DeleteCheck)
	router.GET(baseURL+"/tms/check/:cid", wrapper.GetCheck)
	router.PUT(baseURL+"/tms/check/:cid", wrapper.ModifyCheck)
	router.GET(baseURL+"/traceroute", wrapper.GetTraceroute)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AaTXyD90Uh1WHf33n/7/AAAA//93qk23EhQCAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
